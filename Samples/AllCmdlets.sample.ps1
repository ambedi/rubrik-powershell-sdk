# This file was generated by the Rubrik SDK for PowerShell
. "${PSScriptRoot}/../Utils/import.ps1"
. "${PSScriptRoot}/SampleUtils.ps1"

# -------------------------------------------------------------------
# Invoke-RscMutateActivitySeries -cancel
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateActivitySeries -cancel -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateActivitySeries -cancel${nl}${nl}" @"
    Cancel an activity series.
    GraphQL operation: cancelActivitySeries(input: CancelActivitySeriesInput!):Boolean!
"@ "${nl}Field type: ${fieldTypeName}"



# -------------------------------------------------------------------
# Invoke-RscMutateAws -startNativeEc2InstanceSnapshotsJob
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -startNativeEc2InstanceSnapshotsJob -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -startNativeEc2InstanceSnapshotsJob${nl}${nl}" @"
    Start an on demand create snapshot job for AWS EC2 Instances.When completed, this will start taking an on-demand snapshot of the selected EC2 Instances  as per the SLA Policy assigned to the respective instances.
    GraphQL operation: startAwsNativeEc2InstanceSnapshotsJob(input: StartAwsNativeEc2InstanceSnapshotsJobInput!):BatchAsyncJobStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -startRestoreNativeEc2InstanceSnapshotJob
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -startRestoreNativeEc2InstanceSnapshotJob -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -startRestoreNativeEc2InstanceSnapshotJob${nl}${nl}" @"
    Start an on demand restore snapshot job for AWS EC2 Instance. When completed, this will replace the original EC2 Instance with the selected snapshot.
    GraphQL operation: startRestoreAwsNativeEc2InstanceSnapshotJob(input: StartRestoreAwsNativeEc2InstanceSnapshotJobInput!):AsyncJobStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -startRefreshNativeAccountsJob
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -startRefreshNativeAccountsJob -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -startRefreshNativeAccountsJob${nl}${nl}" @"
    Start an on demand job to refresh AWS accounts. The job updates the Rubrik platform with changes to the AWS Native accounts.
    GraphQL operation: startRefreshAwsNativeAccountsJob(input: StartRefreshAwsNativeAccountsJobInput!):BatchAsyncJobStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -startCreateNativeEbsVolumeSnapshotsJob
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -startCreateNativeEbsVolumeSnapshotsJob -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -startCreateNativeEbsVolumeSnapshotsJob${nl}${nl}" @"
    Start job to create snapshots of EBS Volumes with given IDs. When completed, this will start taking an on-demand snapshot of the selected EBS Volumes  as per the SLA Policy assigned to the respective volumes.
    GraphQL operation: startCreateAwsNativeEbsVolumeSnapshotsJob(input: StartCreateAwsNativeEbsVolumeSnapshotsJobInput!):BatchAsyncJobStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -startNativeAccountDisableJob
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -startNativeAccountDisableJob -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -startNativeAccountDisableJob${nl}${nl}" @"
    Starts a job to disable a specific AWS Native account. When complete, the job will disable protection for the specified AWS Native account.
    GraphQL operation: startAwsNativeAccountDisableJob(input: StartAwsNativeAccountDisableJobInput!):AsyncJobStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -startExportNativeEbsVolumeSnapshotJob
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -startExportNativeEbsVolumeSnapshotJob -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -startExportNativeEbsVolumeSnapshotJob${nl}${nl}" @"
    Start a job to export EBS Volume. The job creates a new EBS Volume with the same properties as that of the snapshot that is exported.
    GraphQL operation: startExportAwsNativeEbsVolumeSnapshotJob(input: StartExportAwsNativeEbsVolumeSnapshotJobInput!):AsyncJobStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -excludeNativeEbsVolumesFromSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -excludeNativeEbsVolumesFromSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -excludeNativeEbsVolumesFromSnapshot${nl}${nl}" @"
    Mark AWS Native EBS Volumes to be excluded from EC2 Instance snapshot. By default, all EBS Volumes are marked as included.
    GraphQL operation: excludeAwsNativeEbsVolumesFromSnapshot(input: ExcludeAwsNativeEbsVolumesFromSnapshotInput!):Void
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -startNativeRdsInstanceSnapshotsJob
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -startNativeRdsInstanceSnapshotsJob -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -startNativeRdsInstanceSnapshotsJob${nl}${nl}" @"
    Start job to create snapshots of RDS Instance with given IDs. When completed, this will start taking an on-demand snapshot of the selected RDS Instances  as per the SLA Policy assigned to the respective instances.
    GraphQL operation: startAwsNativeRdsInstanceSnapshotsJob(input: StartAwsNativeRdsInstanceSnapshotsJobInput!):BatchAsyncJobStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -createAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -createAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -createAccount${nl}${nl}" @"
    
    GraphQL operation: createAwsAccount(input: CreateAwsAccountInput!):CloudAccount!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -updateAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -updateAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -updateAccount${nl}${nl}" @"
    
    GraphQL operation: updateAwsAccount(input: UpdateAwsAccountInput!):CloudAccount!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -createAutomaticTargetMapping
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -createAutomaticTargetMapping -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -createAutomaticTargetMapping${nl}${nl}" @"
    
    GraphQL operation: createAutomaticAwsTargetMapping(input: CreateAutomaticAwsTargetMappingInput!):TargetMapping!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -createCloudNativeStorageSetting
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -createCloudNativeStorageSetting -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -createCloudNativeStorageSetting${nl}${nl}" @"
    
    GraphQL operation: createCloudNativeAwsStorageSetting(input: CreateCloudNativeAwsStorageSettingInput!):CreateCloudNativeAwsStorageSettingReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -updateAutomaticTargetMapping
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -updateAutomaticTargetMapping -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -updateAutomaticTargetMapping${nl}${nl}" @"
    
    GraphQL operation: updateAutomaticAwsTargetMapping(input: UpdateAutomaticAwsTargetMappingInput!):TargetMapping!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -updateCloudNativeStorageSetting
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -updateCloudNativeStorageSetting -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -updateCloudNativeStorageSetting${nl}${nl}" @"
    
    GraphQL operation: updateCloudNativeAwsStorageSetting(input: UpdateCloudNativeAwsStorageSettingInput!):UpdateCloudNativeAwsStorageSettingReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -createTarget
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -createTarget -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -createTarget${nl}${nl}" @"
    
    GraphQL operation: createAwsTarget(input: CreateAwsTargetInput!):Target!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -updateTarget
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -updateTarget -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -updateTarget${nl}${nl}" @"
    
    GraphQL operation: updateAwsTarget(input: UpdateAwsTargetInput!):Target!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -createReaderTarget
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -createReaderTarget -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -createReaderTarget${nl}${nl}" @"
    Create a reader type for AWS archival location on a Rubrik cluster.
    GraphQL operation: createAwsReaderTarget(input: CreateAwsReaderTargetInput!):Target!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -createComputeSetting
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -createComputeSetting -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -createComputeSetting${nl}${nl}" @"
    
    GraphQL operation: createAwsComputeSetting(input: CreateAwsComputeSettingInput!):AwsComputeSettings!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -updateComputeSetting
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -updateComputeSetting -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -updateComputeSetting${nl}${nl}" @"
    
    GraphQL operation: updateAwsComputeSetting(input: UpdateAwsComputeSettingInput!):AwsComputeSettings!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -deleteComputeSetting
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -deleteComputeSetting -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -deleteComputeSetting${nl}${nl}" @"
    
    GraphQL operation: deleteAwsComputeSetting(input: DeleteAwsComputeSettingInput!):Void
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -CloudAccountValidate
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -CloudAccountValidate -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -CloudAccountValidate${nl}${nl}" @"
    This endpoint is deprecated.
    GraphQL operation: awsCloudAccountValidate(awsCloudAccountValidateArg: AwsCloudAccountValidateInput!):AwsCloudAccountValidateResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -CloudAccountInitiate
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -CloudAccountInitiate -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -CloudAccountInitiate${nl}${nl}" @"
    This endpoint is deprecated.
    GraphQL operation: awsCloudAccountInitiate(awsCloudAccountInitiateArg: AwsCloudAccountInitiateInput!):AwsCloudAccountCreateResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -NativeProtectionAccountAdd
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -NativeProtectionAccountAdd -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -NativeProtectionAccountAdd${nl}${nl}" @"
    This endpoint is deprecated.
    GraphQL operation: awsNativeProtectionAccountAdd(awsNativeProtectionAccountAddArg: AwsNativeProtectionAccountAddRequest!):AwsNativeProtectionAccountAddResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -validateAndCreateCloudAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -validateAndCreateCloudAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -validateAndCreateCloudAccount${nl}${nl}" @"
    Validate and create AWS cloud account. If validation fails, no error is returned and the cause is present in the ""message"" field of return object or within admin/child accounts of return object. In case validation succeeds, it initiates creation of AWS cloud account. This is the first step to set up native protection.
    GraphQL operation: validateAndCreateAwsCloudAccount(input: ValidateAndCreateAwsCloudAccountInput!):ValidateAndCreateAwsCloudAccountReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -finalizeCloudAccountProtection
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -finalizeCloudAccountProtection -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -finalizeCloudAccountProtection${nl}${nl}" @"
    Process cloud account. This is the second step after validate and create in addition of a feature for cloud account.The CloudFormation stack should be created after this step using the CloudFormation URL provided in the first step.
    GraphQL operation: finalizeAwsCloudAccountProtection(input: FinalizeAwsCloudAccountProtectionInput!):FinalizeAwsCloudAccountProtectionReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -prepareCloudAccountDeletion
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -prepareCloudAccountDeletion -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -prepareCloudAccountDeletion${nl}${nl}" @"
    Prepare deletion of cloud account. This is the first step to delete AWS cloud account. It generated template for deletion of cloud account and does not change any state of account.
    GraphQL operation: prepareAwsCloudAccountDeletion(input: PrepareAwsCloudAccountDeletionInput!):PrepareAwsCloudAccountDeletionReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -finalizeCloudAccountDeletion
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -finalizeCloudAccountDeletion -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -finalizeCloudAccountDeletion${nl}${nl}" @"
    Process and finalize deletion of cloud account is the last step in deletion of a feature from cloud account. This endpoint is a MUST for deletion of disconnected features.
    GraphQL operation: finalizeAwsCloudAccountDeletion(input: FinalizeAwsCloudAccountDeletionInput!):FinalizeAwsCloudAccountDeletionReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -updateCloudAccountFeature
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -updateCloudAccountFeature -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -updateCloudAccountFeature${nl}${nl}" @"
    Updates regions, stack ARN, and role ARN for a feature for a given cloud account.
    GraphQL operation: updateAwsCloudAccountFeature(input: UpdateAwsCloudAccountFeatureInput!):UpdateAwsCloudAccountFeatureReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -updateCloudAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -updateCloudAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -updateCloudAccount${nl}${nl}" @"
    Update properties for a given AWS cloud account.
    GraphQL operation: updateAwsCloudAccount(input: UpdateAwsCloudAccountInput!):Void
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -prepareFeatureUpdateForCloudAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -prepareFeatureUpdateForCloudAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -prepareFeatureUpdateForCloudAccount${nl}${nl}" @"
    Prepare manual update features to latest version.
    GraphQL operation: prepareFeatureUpdateForAwsCloudAccount(input: PrepareFeatureUpdateForAwsCloudAccountInput!):PrepareFeatureUpdateForAwsCloudAccountReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -CloudAccountUpdateFeature
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -CloudAccountUpdateFeature -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -CloudAccountUpdateFeature${nl}${nl}" @"
    This endpoint is deprecated.
    GraphQL operation: awsCloudAccountUpdateFeature(cloudAccountUuid: UUID!, features: [CloudAccountFeature!]!):AwsCloudAccountUpdateFeatureResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -createExocomputeConfig
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -createExocomputeConfig -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -createExocomputeConfig${nl}${nl}" @"
    Create AWS Exocompute configs.
    GraphQL operation: createAwsExocomputeConfigs(input: CreateAwsExocomputeConfigsInput!):CreateAwsExocomputeConfigsReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -deleteExocomputeConfig
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -deleteExocomputeConfig -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -deleteExocomputeConfig${nl}${nl}" @"
    Deletes AWS Exocompute configs.
    GraphQL operation: deleteAwsExocomputeConfigs(input: DeleteAwsExocomputeConfigsInput!):DeleteAwsExocomputeConfigsReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -updateExocomputeConfig
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -updateExocomputeConfig -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -updateExocomputeConfig${nl}${nl}" @"
    Update AWS Exocompute configs.
    GraphQL operation: updateAwsExocomputeConfigs(input: UpdateAwsExocomputeConfigsInput!):UpdateAwsExocomputeConfigsReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -startExocomputeDisableJob
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -startExocomputeDisableJob -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -startExocomputeDisableJob${nl}${nl}" @"
    Starts a job to disable AWS Exocompute feature. When complete, the job will disable exocompute feature for the specified AWS Native account.
    GraphQL operation: startAwsExocomputeDisableJob(input: StartAwsExocomputeDisableJobInput!):AsyncJobStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -addIamUserBasedCloudAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -addIamUserBasedCloudAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -addIamUserBasedCloudAccount${nl}${nl}" @"
    Adds an IAM user-based AWS cloud account and enables the features specified in the input after successful validation of the request.
    GraphQL operation: addAwsIamUserBasedCloudAccount(input: AddAwsIamUserBasedCloudAccountInput!):AddAwsIamUserBasedCloudAccountReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -deleteIamUserBasedCloudAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -deleteIamUserBasedCloudAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -deleteIamUserBasedCloudAccount${nl}${nl}" @"
    Deletes IAM user-based AWS cloud account.
    GraphQL operation: deleteAwsIamUserBasedCloudAccount(input: DeleteAwsIamUserBasedCloudAccountInput!):DeleteAwsIamUserBasedCloudAccountReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -deleteCloudAccountWithoutCft
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -deleteCloudAccountWithoutCft -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -deleteCloudAccountWithoutCft${nl}${nl}" @"
    Removes AWS cloud account without cleaning up the associated permissions from the AWS cloud account. Customer needs to clean up the permissions in the AWS account themselves. This mutation is supported only for IAM user-based and authentication server-based AWS cloud accounts.
    GraphQL operation: deleteAwsCloudAccountWithoutCft(input: DeleteAwsCloudAccountWithoutCftInput!):DeleteAwsCloudAccountWithoutCftReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -upgradeIamUserBasedCloudAccountPermission
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -upgradeIamUserBasedCloudAccountPermission -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -upgradeIamUserBasedCloudAccountPermission${nl}${nl}" @"
    Set IAM user-based AWS account features status to Connected from Update Permissions state. It should be used by caution from cloud accounts only after latest required permissions are granted to authorized IAM user.
    GraphQL operation: upgradeAwsIamUserBasedCloudAccountPermissions(input: UpgradeAwsIamUserBasedCloudAccountPermissionsInput!):Boolean!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -upgradeCloudAccountFeaturesWithoutCft
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -upgradeCloudAccountFeaturesWithoutCft -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -upgradeCloudAccountFeaturesWithoutCft${nl}${nl}" @"
    Updates status of AWS cloud account features to connected if they are in update permissions state. This mutation should be used with caution. It should be invoked only after the latest required permissions are granted to the AWS cloud account user used by Rubrik. This mutation does not verify if the required permissions are actually granted to the user or not. Its usage is restricted to only IAM user-based and authentication server-based AWS cloud accounts.
    GraphQL operation: upgradeAwsCloudAccountFeaturesWithoutCft(input: UpgradeAwsCloudAccountFeaturesWithoutCftInput!):Boolean!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -addAuthenticationServerBasedCloudAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -addAuthenticationServerBasedCloudAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -addAuthenticationServerBasedCloudAccount${nl}${nl}" @"
    Validates and adds an authentication server-based AWS cloud account. When validation succeeds, the AWS cloud account is added and the features specified in the request are enabled. When validation fails, an error is not returned, but the cause of the failure is specified in the ""message"" field of the response object.
    GraphQL operation: addAwsAuthenticationServerBasedCloudAccount(input: AddAwsAuthenticationServerBasedCloudAccountInput!):AddAwsAuthenticationServerBasedCloudAccountReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -patchAuthenticationServerBasedCloudAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -patchAuthenticationServerBasedCloudAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -patchAuthenticationServerBasedCloudAccount${nl}${nl}" @"
    Updates authentication server-based AWS cloud account. Use this mutation to update account details related to role name, certificates, features. The mutation can update one or more certificates associated to an account in a single request. All input fields except account identifier are optional so that any combination of account attributes can be updated in a single call. If none of the optional fields are provided in the input then no updates are performed, and the response does not contain any error message.
    GraphQL operation: patchAwsAuthenticationServerBasedCloudAccount(input: PatchAwsAuthenticationServerBasedCloudAccountInput!):Boolean!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -patchIamUserBasedCloudAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -patchIamUserBasedCloudAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -patchIamUserBasedCloudAccount${nl}${nl}" @"
    Updates IAM user-based AWS cloud account. Use this mutation to update account details access/secret keys, role ARN and regions. All input fields except account ID are optional so that any combination of account attributes can be updated in a single call. If none of the optional fields are provided in the input then no updates are performed, and the response does not contain any error message.
    GraphQL operation: patchAwsIamUserBasedCloudAccount(input: PatchAwsIamUserBasedCloudAccountInput!):Boolean!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -createCluster
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -createCluster -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -createCluster${nl}${nl}" @"
    Create a Rubrik Cloud Cluster on AWS.
    GraphQL operation: createAwsCluster(input: CreateAwsClusterInput!):CcProvisionJobReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -deleteCluster
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -deleteCluster -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAws -deleteCluster${nl}${nl}" @"
    Delete a Rubrik Cloud Cluster on AWS.
    GraphQL operation: deleteAwsCluster(input: DeleteAwsClusterInput!):CcProvisionJobReply!
"@ "${nl}Field type: ${fieldTypeName}"



# -------------------------------------------------------------------
# Invoke-RscMutateAzure -startRefreshNativeSubscriptionsJob
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -startRefreshNativeSubscriptionsJob -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -startRefreshNativeSubscriptionsJob${nl}${nl}" @"
    Start a job to refresh Azure Native subscription for the given subscription IDs. When started, this job will update the Rubrik platform with any changes that have been done on Azure for the respective subscription.
    GraphQL operation: startRefreshAzureNativeSubscriptionsJob(input: StartRefreshAzureNativeSubscriptionsJobInput!):BatchAsyncJobStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -startRestoreNativeVirtualMachineJob
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -startRestoreNativeVirtualMachineJob -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -startRestoreNativeVirtualMachineJob${nl}${nl}" @"
    Start a job to restore Azure Native virtual machine with the selected snapshot. When started, this will replace the original VM with the selected snapshot.
    GraphQL operation: startRestoreAzureNativeVirtualMachineJob(input: StartRestoreAzureNativeVirtualMachineJobInput!):AsyncJobStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -startExportNativeVirtualMachineJob
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -startExportNativeVirtualMachineJob -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -startExportNativeVirtualMachineJob${nl}${nl}" @"
    Start a job to export the Azure native virtual machine for a specified snapshot to a specified destination.
    GraphQL operation: startExportAzureNativeVirtualMachineJob(input: StartExportAzureNativeVirtualMachineJobInput!):AsyncJobStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -excludeNativeManagedDisksFromSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -excludeNativeManagedDisksFromSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -excludeNativeManagedDisksFromSnapshot${nl}${nl}" @"
    Exclude the Managed Disks from snapshots, for the specified virtual machines.
    GraphQL operation: excludeAzureNativeManagedDisksFromSnapshot(input: ExcludeAzureNativeManagedDisksFromSnapshotInput!):Void
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -startCreateNativeVirtualMachineSnapshotsJob
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -startCreateNativeVirtualMachineSnapshotsJob -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -startCreateNativeVirtualMachineSnapshotsJob${nl}${nl}" @"
    Start a job to create a snapshot for the Azure Native virtual machine identified by the IDs. When started, this will start taking an on-demand snapshot of the selected VMs as per the SLA Policy assigned to the respective VMs.
    GraphQL operation: startCreateAzureNativeVirtualMachineSnapshotsJob(input: StartCreateAzureNativeVirtualMachineSnapshotsJobInput!):BatchAsyncJobStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -startDisableNativeSubscriptionProtectionJob
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -startDisableNativeSubscriptionProtectionJob -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -startDisableNativeSubscriptionProtectionJob${nl}${nl}" @"
    Start a job to disable protection for a specified Azure subscription.
    GraphQL operation: startDisableAzureNativeSubscriptionProtectionJob(input: StartDisableAzureNativeSubscriptionProtectionJobInput!):AsyncJobStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -startCreateNativeManagedDiskSnapshotsJob
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -startCreateNativeManagedDiskSnapshotsJob -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -startCreateNativeManagedDiskSnapshotsJob${nl}${nl}" @"
    Start a job to create snapshots of the Azure Native Managed Disks identified by the given IDs. When started, this will start taking an on-demand snapshot of the selected disks as per the SLA Policy assigned to the respective disks.
    GraphQL operation: startCreateAzureNativeManagedDiskSnapshotsJob(input: StartCreateAzureNativeManagedDiskSnapshotsJobInput!):BatchAsyncJobStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -startExportNativeManagedDiskJob
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -startExportNativeManagedDiskJob -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -startExportNativeManagedDiskJob${nl}${nl}" @"
    Start a job to export the specified Azure Native Managed Disks to the desired destination.
    GraphQL operation: startExportAzureNativeManagedDiskJob(input: StartExportAzureNativeManagedDiskJobInput!):AsyncJobStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -startExportSqlDatabaseDbJob
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -startExportSqlDatabaseDbJob -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -startExportSqlDatabaseDbJob${nl}${nl}" @"
    Start a job to export Azure SQL Database. The job creates a new Azure SQL Database with the same properties as that of the instance that is exported.
    GraphQL operation: startExportAzureSqlDatabaseDbJob(input: StartExportAzureSqlDatabaseDbJobInput!):AsyncJobStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -startExportSqlManagedInstanceDbJob
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -startExportSqlManagedInstanceDbJob -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -startExportSqlManagedInstanceDbJob${nl}${nl}" @"
    Start a job to export Azure SQL Managed Instance database. The job creates a new Azure SQL Managed Instance database with the same properties as that of the instance that is exported.
    GraphQL operation: startExportAzureSqlManagedInstanceDbJob(input: StartExportAzureSqlManagedInstanceDbJobInput!):AsyncJobStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -createAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -createAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -createAccount${nl}${nl}" @"
    
    GraphQL operation: createAzureAccount(input: CreateAzureAccountInput!):CloudAccount!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -updateAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -updateAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -updateAccount${nl}${nl}" @"
    
    GraphQL operation: updateAzureAccount(input: UpdateAzureAccountInput!):CloudAccount!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -createAutomaticTargetMapping
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -createAutomaticTargetMapping -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -createAutomaticTargetMapping${nl}${nl}" @"
    
    GraphQL operation: createAutomaticAzureTargetMapping(input: CreateAutomaticAzureTargetMappingInput!):TargetMapping!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -createCloudNativeStorageSetting
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -createCloudNativeStorageSetting -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -createCloudNativeStorageSetting${nl}${nl}" @"
    Creates Storage Settings for the archival of azure cloud native protected objects
    GraphQL operation: createCloudNativeAzureStorageSetting(input: CreateCloudNativeAzureStorageSettingInput!):CreateCloudNativeAzureStorageSettingReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -createCloudNativeRcvStorageSetting
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -createCloudNativeRcvStorageSetting -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -createCloudNativeRcvStorageSetting${nl}${nl}" @"
    Create Rubrik Cloud Vault storage settings for archiving azure cloud native protected objects.
    GraphQL operation: createCloudNativeRcvAzureStorageSetting(input: CreateCloudNativeRcvAzureStorageSettingInput!):CreateCloudNativeRcvAzureStorageSettingReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -updateAutomaticTargetMapping
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -updateAutomaticTargetMapping -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -updateAutomaticTargetMapping${nl}${nl}" @"
    
    GraphQL operation: updateAutomaticAzureTargetMapping(input: UpdateAutomaticAzureTargetMappingInput!):TargetMapping!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -updateCloudNativeStorageSetting
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -updateCloudNativeStorageSetting -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -updateCloudNativeStorageSetting${nl}${nl}" @"
    
    GraphQL operation: updateCloudNativeAzureStorageSetting(input: UpdateCloudNativeAzureStorageSettingInput!):UpdateCloudNativeAzureStorageSettingReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -updateCloudNativeRcvStorageSetting
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -updateCloudNativeRcvStorageSetting -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -updateCloudNativeRcvStorageSetting${nl}${nl}" @"
    Updates an existing Rubrik Cloud Vault Storage Settings for the archival of azure cloud native protected objects.
    GraphQL operation: updateCloudNativeRcvAzureStorageSetting(input: UpdateCloudNativeRcvAzureStorageSettingInput!):UpdateCloudNativeRcvAzureStorageSettingReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -createTarget
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -createTarget -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -createTarget${nl}${nl}" @"
    Creates an Azure archival target on the Rubrik cluster.
    GraphQL operation: createAzureTarget(input: CreateAzureTargetInput!):Target!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -updateTarget
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -updateTarget -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -updateTarget${nl}${nl}" @"
    
    GraphQL operation: updateAzureTarget(input: UpdateAzureTargetInput!):Target!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -createReaderTarget
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -createReaderTarget -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -createReaderTarget${nl}${nl}" @"
    Creates reader type for Azure archival location on a CDM cluster.
    GraphQL operation: createAzureReaderTarget(input: CreateAzureReaderTargetInput!):Target!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -startCloudAccountOauth
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -startCloudAccountOauth -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -startCloudAccountOauth${nl}${nl}" @"
    Initiates a session before doing Azure OAuth flow. If a custom app is configured for the tenant, the client ID of the custom app is returned. Otherwise, the client ID of the default app is returned.
    GraphQL operation: startAzureCloudAccountOauth(input: StartAzureCloudAccountOauthInput!):StartAzureCloudAccountOauthReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -completeCloudAccountOauth
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -completeCloudAccountOauth -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -completeCloudAccountOauth${nl}${nl}" @"
    Complete the Azure OAuth flow and pass the authorization code.
    GraphQL operation: completeAzureCloudAccountOauth(input: CompleteAzureCloudAccountOauthInput!):CompleteAzureCloudAccountOauthReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -setCloudAccountCustomerAppCredential
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -setCloudAccountCustomerAppCredential -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -setCloudAccountCustomerAppCredential${nl}${nl}" @"
    Set credentials for the customer application, for the tenant domain name.
    GraphQL operation: setAzureCloudAccountCustomerAppCredentials(input: SetAzureCloudAccountCustomerAppCredentialsInput!):Boolean!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -addCloudAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -addCloudAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -addCloudAccount${nl}${nl}" @"
    Add the Azure Subscriptions cloud account for the given feature.
    GraphQL operation: addAzureCloudAccount(input: AddAzureCloudAccountInput!):AddAzureCloudAccountReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -addCloudAccountWithoutOauth
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -addCloudAccountWithoutOauth -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -addCloudAccountWithoutOauth${nl}${nl}" @"
    Add the Azure Subscription cloud account for the given feature without OAuth.
    GraphQL operation: addAzureCloudAccountWithoutOauth(input: AddAzureCloudAccountWithoutOauthInput!):AddAzureCloudAccountWithoutOauthReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -deleteCloudAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -deleteCloudAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -deleteCloudAccount${nl}${nl}" @"
    Delete the Azure Subscriptions cloud account for the given feature.
    GraphQL operation: deleteAzureCloudAccount(input: DeleteAzureCloudAccountInput!):DeleteAzureCloudAccountReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -deleteCloudAccountWithoutOauth
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -deleteCloudAccountWithoutOauth -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -deleteCloudAccountWithoutOauth${nl}${nl}" @"
    Delete the Azure Subscriptions cloud account for the given feature without OAuth.
    GraphQL operation: deleteAzureCloudAccountWithoutOauth(input: DeleteAzureCloudAccountWithoutOauthInput!):DeleteAzureCloudAccountWithoutOauthReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -upgradeCloudAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -upgradeCloudAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -upgradeCloudAccount${nl}${nl}" @"
    Update permissions of the Azure Subscriptions cloud account for given feature.
    GraphQL operation: upgradeAzureCloudAccount(input: UpgradeAzureCloudAccountInput!):UpgradeAzureCloudAccountReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -updateCustomerAppPermissionForSql
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -updateCustomerAppPermissionForSql -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -updateCustomerAppPermissionForSql${nl}${nl}" @"
    Updates the Azure app for the specified account in an idempotent manner to support Azure SQL Database and  Managed Instance Database authentication.
    GraphQL operation: updateCustomerAppPermissionForAzureSql:Void
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -startDisableCloudAccountJob
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -startDisableCloudAccountJob -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -startDisableCloudAccountJob${nl}${nl}" @"
    Start on-demand jobs to disable the feature for the given Azure Cloud Accounts. When completed, the status of cloud account feature will change to Disabled and the feature will become eligible to be deleted.
    GraphQL operation: startDisableAzureCloudAccountJob(input: StartDisableAzureCloudAccountJobInput!):BatchAsyncJobStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -updateCloudAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -updateCloudAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -updateCloudAccount${nl}${nl}" @"
    Update names of the Azure Subscriptions cloud account and regions for the given feature.
    GraphQL operation: updateAzureCloudAccount(input: UpdateAzureCloudAccountInput!):UpdateAzureCloudAccountReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -mapCloudAccountToPersistentStorageLocation
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -mapCloudAccountToPersistentStorageLocation -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -mapCloudAccountToPersistentStorageLocation${nl}${nl}" @"
    Map Azure cloud accounts to a persistent storage location.
    GraphQL operation: mapAzureCloudAccountToPersistentStorageLocation(input: MapAzureCloudAccountToPersistentStorageLocationInput!):MapAzureCloudAccountToPersistentStorageLocationReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -addCloudAccountExocomputeConfiguration
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -addCloudAccountExocomputeConfiguration -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -addCloudAccountExocomputeConfiguration${nl}${nl}" @"
    Add Exocompute configurations for an Azure Cloud Account.
    GraphQL operation: addAzureCloudAccountExocomputeConfigurations(input: AddAzureCloudAccountExocomputeConfigurationsInput!):AddAzureCloudAccountExocomputeConfigurationsReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -deleteCloudAccountExocomputeConfiguration
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -deleteCloudAccountExocomputeConfiguration -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -deleteCloudAccountExocomputeConfiguration${nl}${nl}" @"
    Delete Exocompute configurations for an Azure Cloud Account.
    GraphQL operation: deleteAzureCloudAccountExocomputeConfigurations(input: DeleteAzureCloudAccountExocomputeConfigurationsInput!):DeleteAzureCloudAccountExocomputeConfigurationsReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -mapCloudAccountExocomputeSubscription
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -mapCloudAccountExocomputeSubscription -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -mapCloudAccountExocomputeSubscription${nl}${nl}" @"
    Map Azure cloud accounts to an Exocompute subscription.
    GraphQL operation: mapAzureCloudAccountExocomputeSubscription(input: MapAzureCloudAccountExocomputeSubscriptionInput!):MapAzureCloudAccountExocomputeSubscriptionReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -unmapCloudAccountExocomputeSubscription
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -unmapCloudAccountExocomputeSubscription -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -unmapCloudAccountExocomputeSubscription${nl}${nl}" @"
    Unmap Azure cloud accounts from the mapped Exocompute subscription.
    GraphQL operation: unmapAzureCloudAccountExocomputeSubscription(input: UnmapAzureCloudAccountExocomputeSubscriptionInput!):UnmapAzureCloudAccountExocomputeSubscriptionReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -upgradeCloudAccountPermissionsWithoutOauth
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -upgradeCloudAccountPermissionsWithoutOauth -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -upgradeCloudAccountPermissionsWithoutOauth${nl}${nl}" @"
    Set Azure Cloud Account feature status to Connected from Update Permissions state without any permission validation. It should be used by caution from cloud accounts which have been set up without using OAuth, only after adding the latest permissions that are required.
    GraphQL operation: upgradeAzureCloudAccountPermissionsWithoutOauth(input: UpgradeAzureCloudAccountPermissionsWithoutOauthInput!):UpgradeAzureCloudAccountPermissionsWithoutOauthReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -OauthConsentKickoff
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -OauthConsentKickoff -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -OauthConsentKickoff${nl}${nl}" @"
    Kicks off an OAuth consent flow for Azure resource access.
    GraphQL operation: azureOauthConsentKickoff:AzureOauthConsentKickoffReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -OauthConsentComplete
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -OauthConsentComplete -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -OauthConsentComplete${nl}${nl}" @"
    Completes an OAuth consent flow for Azure resource access.
    GraphQL operation: azureOauthConsentComplete(input: AzureOauthConsentCompleteInput!):RequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -createSaasAppAad
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -createSaasAppAad -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -createSaasAppAad${nl}${nl}" @"
    Create or get an Azure AAD application.
    GraphQL operation: createAzureSaasAppAad:CreateAzureSaasAppAadReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -createCluster
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -createCluster -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -createCluster${nl}${nl}" @"
    Create a Rubrik Cloud Cluster on Azure.
    GraphQL operation: createAzureCluster(input: CreateAzureClusterInput!):CcProvisionJobReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -deleteCluster
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -deleteCluster -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -deleteCluster${nl}${nl}" @"
    Delete a Rubrik Cloud Cluster on Azure.
    GraphQL operation: deleteAzureCluster(input: DeleteAzureClusterInput!):CcProvisionJobReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -kickoffAdAppSetup
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -kickoffAdAppSetup -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -kickoffAdAppSetup${nl}${nl}" @"
    Initiates the Azure AD app creation flow.
    GraphQL operation: kickoffAzureAdAppSetup(input: KickoffAzureAdAppSetupInput!):KickoffAzureAdAppSetupReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -completeAdAppSetup
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -completeAdAppSetup -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -completeAdAppSetup${nl}${nl}" @"
    Completes the creation flow for an Azure AD app.
    GraphQL operation: completeAzureAdAppSetup(input: CompleteAzureAdAppSetupInput!):CompleteAzureAdAppSetupReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -deleteAdDirectory
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -deleteAdDirectory -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -deleteAdDirectory${nl}${nl}" @"
    Deletes an Azure AD directory.
    GraphQL operation: deleteAzureAdDirectory(workloadFid: UUID!):CreateOnDemandJobReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -backupAdDirectory
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -backupAdDirectory -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzure -backupAdDirectory${nl}${nl}" @"
    Backs up the Azure AD directory.
    GraphQL operation: backupAzureAdDirectory(input: BackupAzureAdDirectoryInput!):[CreateOnDemandJobReply!]!
"@ "${nl}Field type: ${fieldTypeName}"



# -------------------------------------------------------------------
# Invoke-RscMutateAzureO365 -setupExocompute
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzureO365 -setupExocompute -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateAzureO365 -setupExocompute${nl}${nl}" @"
    Sets up Exocompute for an O365 subscription.
    GraphQL operation: setupAzureO365Exocompute(tenantId: String!, subscriptionId: UUID!, exocomputeConfig: AzureO365ExocomputeConfig!):SetupAzureO365ExocomputeResp!
"@ "${nl}Field type: ${fieldTypeName}"



# -------------------------------------------------------------------
# Invoke-RscMutateCassandra -recoverSource
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateCassandra -recoverSource -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateCassandra -recoverSource${nl}${nl}" @"
    Recover a cassandra source.
    GraphQL operation: recoverCassandraSource(input: MosaicRestoreDataInput!):MosaicAsyncResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateCassandra -createSource
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateCassandra -createSource -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateCassandra -createSource${nl}${nl}" @"
    Create a cassandra source.
    GraphQL operation: createCassandraSource(input: AddMosaicSourceInput!):MosaicAsyncResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateCassandra -updateSource
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateCassandra -updateSource -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateCassandra -updateSource${nl}${nl}" @"
    Update a cassandra source.
    GraphQL operation: updateCassandraSource(input: ModifyMosaicSourceInput!):MosaicAsyncResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateCassandra -deleteSource
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateCassandra -deleteSource -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateCassandra -deleteSource${nl}${nl}" @"
    Delete a cassandra source.
    GraphQL operation: deleteCassandraSource(input: DeleteMosaicSourceInput!):MosaicAsyncResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateCassandra -bulkDeleteSource
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateCassandra -bulkDeleteSource -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateCassandra -bulkDeleteSource${nl}${nl}" @"
    Bulk Delete cassandra sources.
    GraphQL operation: bulkDeleteCassandraSources(input: BulkDeleteMosaicSourcesInput!):MosaicAsyncResponse!
"@ "${nl}Field type: ${fieldTypeName}"



# -------------------------------------------------------------------
# Invoke-RscMutateCluster -AddNodesToCloud
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateCluster -AddNodesToCloud -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateCluster -AddNodesToCloud${nl}${nl}" @"
    Add nodes to cloud cluster.
    GraphQL operation: addNodesToCloudCluster(input: AddNodesToCloudClusterInput!):CcProvisionJobReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateCluster -RegisterCloud
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateCluster -RegisterCloud -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateCluster -RegisterCloud${nl}${nl}" @"
    Register a cloud cluster.
    GraphQL operation: registerCloudCluster(input: RegisterCloudClusterInput!):RegisterCloudClusterReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateCluster -CreateFailover
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateCluster -CreateFailover -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateCluster -CreateFailover${nl}${nl}" @"
    Create a failover cluster

Supported in v5.2+
Create a failover cluster.
    GraphQL operation: createFailoverCluster(input: CreateFailoverClusterInput!):CreateFailoverClusterReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateCluster -UpdateFailover
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateCluster -UpdateFailover -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateCluster -UpdateFailover${nl}${nl}" @"
    Update a failover cluster

Supported in v5.2+
Update failover cluster with specified properties.
    GraphQL operation: updateFailoverCluster(input: UpdateFailoverClusterInput!):UpdateFailoverClusterReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateCluster -DeleteFailover
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateCluster -DeleteFailover -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateCluster -DeleteFailover${nl}${nl}" @"
    Delete a failover cluster

Supported in v5.2+
Delete a failover cluster.
    GraphQL operation: deleteFailoverCluster(input: DeleteFailoverClusterInput!):ResponseSuccess!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateCluster -BulkDeleteFailover
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateCluster -BulkDeleteFailover -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateCluster -BulkDeleteFailover${nl}${nl}" @"
    Delete the provided failover clusters

Supported in v5.3+
Delete the provided failover clusters.
    GraphQL operation: bulkDeleteFailoverCluster(input: BulkDeleteFailoverClusterInput!):ResponseSuccess!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateCluster -CreateK8s
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateCluster -CreateK8s -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateCluster -CreateK8s${nl}${nl}" @"
    Add a Kubernetes cluster.
    GraphQL operation: createK8sCluster(input: CreateK8sClusterInput!):CreateK8sClusterReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateCluster -RefreshK8s
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateCluster -RefreshK8s -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateCluster -RefreshK8s${nl}${nl}" @"
    Refresh resources of a Kubernetes cluster.
    GraphQL operation: refreshK8sCluster(input: RefreshK8sClusterInput!):CreateOnDemandJobReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateCluster -ArchiveK8s
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateCluster -ArchiveK8s -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateCluster -ArchiveK8s${nl}${nl}" @"
    Archive a Kubernetes cluster.
    GraphQL operation: archiveK8sCluster(input: ArchiveK8sClusterInput!):ArchiveK8sClusterReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateCluster -RemoveCdm
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateCluster -RemoveCdm -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateCluster -RemoveCdm${nl}${nl}" @"
    
    GraphQL operation: removeCdmCluster(clusterUUID: UUID!, isForce: Boolean!, expireInDays: Long):Boolean!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateCluster -RecoverCloud
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateCluster -RecoverCloud -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateCluster -RecoverCloud${nl}${nl}" @"
    Recover a Rubrik Cloud Cluster.
    GraphQL operation: recoverCloudCluster(input: RecoverCloudClusterInput!):CcProvisionJobReply!
"@ "${nl}Field type: ${fieldTypeName}"



# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -registerScvmm
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -registerScvmm -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateHyperv -registerScvmm${nl}${nl}" @"
    Register HyperV SCVMM to Rubrik Cluster.
    GraphQL operation: registerHypervScvmm(input: RegisterHypervScvmmInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -ScvmmUpdate
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -ScvmmUpdate -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateHyperv -ScvmmUpdate${nl}${nl}" @"
    Update properties for a given HyperV SCVMM.
    GraphQL operation: hypervScvmmUpdate(input: HypervScvmmUpdateInput!):HypervScvmmUpdateReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -ScvmmDelete
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -ScvmmDelete -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateHyperv -ScvmmDelete${nl}${nl}" @"
    Delete a given HyperV SCVMM.
    GraphQL operation: hypervScvmmDelete(input: HypervScvmmDeleteInput!):ResponseSuccess!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -refreshScvmm
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -refreshScvmm -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateHyperv -refreshScvmm${nl}${nl}" @"
    Refresh a given HyperV SCVMM.
    GraphQL operation: refreshHypervScvmm(input: RefreshHypervScvmmInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -OnDemandSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -OnDemandSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateHyperv -OnDemandSnapshot${nl}${nl}" @"
    Create on-demand VM snapshot

Supported in v5.0+
Create an on-demand snapshot for the given VM ID.
    GraphQL operation: hypervOnDemandSnapshot(input: HypervOnDemandSnapshotInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -DeleteAllSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -DeleteAllSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateHyperv -DeleteAllSnapshot${nl}${nl}" @"
    Delete all snapshots of VM

Supported in v5.0+
Delete all snapshots of a virtual machine.
    GraphQL operation: hypervDeleteAllSnapshots(input: HypervDeleteAllSnapshotsInput!):RequestSuccess!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -exportVirtualMachine
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -exportVirtualMachine -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateHyperv -exportVirtualMachine${nl}${nl}" @"
    Export VM snapshot

Supported in v5.0+
Export snapshot of a vm.
    GraphQL operation: exportHypervVirtualMachine(input: ExportHypervVirtualMachineInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -downloadVirtualMachineSnapshotFile
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -downloadVirtualMachineSnapshotFile -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateHyperv -downloadVirtualMachineSnapshotFile${nl}${nl}" @"
    Download files from a Hyper-V VM backup

Supported in v5.0+
Start an asynchronous job to download multiple files and folders from a specified Hyper-V VM backup. The response returns an asynchrounous request ID. Get the URL for downloading the ZIP file including the specific files/folders by sending a GET request to 'hyperv/vm/request/{id}'.
    GraphQL operation: downloadHypervVirtualMachineSnapshotFiles(input: DownloadHypervVirtualMachineSnapshotFilesInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -instantRecoverVirtualMachineSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -instantRecoverVirtualMachineSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateHyperv -instantRecoverVirtualMachineSnapshot${nl}${nl}" @"
    Creates an instant recover request that restores a target VM from the given Rubrik-hosted-snapshot

Supported in v5.0+
The VM will be started with networking enabled. If the VM does not exist anymore, a new VM will be created.
    GraphQL operation: instantRecoverHypervVirtualMachineSnapshot(input: InstantRecoverHypervVirtualMachineSnapshotInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -restoreVirtualMachineSnapshotFile
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -restoreVirtualMachineSnapshotFile -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateHyperv -restoreVirtualMachineSnapshotFile${nl}${nl}" @"
    Restore files from snapshot

Supported in v5.0+
Restore files from a snapshot to the original source location.
    GraphQL operation: restoreHypervVirtualMachineSnapshotFiles(input: RestoreHypervVirtualMachineSnapshotFilesInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -registerAgentVirtualMachine
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -registerAgentVirtualMachine -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateHyperv -registerAgentVirtualMachine${nl}${nl}" @"
    Register the agent installed in VM

Supported in v5.0+
Register the agent that installed in VM.
    GraphQL operation: registerAgentHypervVirtualMachine(input: RegisterAgentHypervVirtualMachineInput!):RequestSuccess!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -deleteVirtualMachineSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -deleteVirtualMachineSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateHyperv -deleteVirtualMachineSnapshot${nl}${nl}" @"
    Delete VM snapshot

Supported in v5.0+
Delete a snapshot by expiring it. Snapshot is expired only if it is a manual snapshot or a snapshot of an unprotected vm.
    GraphQL operation: deleteHypervVirtualMachineSnapshot(input: DeleteHypervVirtualMachineSnapshotInput!):RequestSuccess!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -downloadVirtualMachineSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -downloadVirtualMachineSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateHyperv -downloadVirtualMachineSnapshot${nl}${nl}" @"
    Creates a download from archival request

Supported in v5.0+
Download a snapshot from archival.
    GraphQL operation: downloadHypervVirtualMachineSnapshot(input: DownloadHypervVirtualMachineSnapshotInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -createVirtualMachineSnapshotMount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -createVirtualMachineSnapshotMount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateHyperv -createVirtualMachineSnapshotMount${nl}${nl}" @"
    Create a live mount request

Supported in v5.0+
Create a live mount request with given configuration.
    GraphQL operation: createHypervVirtualMachineSnapshotMount(input: CreateHypervVirtualMachineSnapshotMountInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -updateVirtualMachineSnapshotMount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -updateVirtualMachineSnapshotMount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateHyperv -updateVirtualMachineSnapshotMount${nl}${nl}" @"
    Power a Live Mount on and off

Supported in v5.0+
Power a specified Live Mount virtual machine on or off. Pass **_true_** to power the virtual machine on and pass **_false_** to power the virtual machine off.
    GraphQL operation: updateHypervVirtualMachineSnapshotMount(input: UpdateHypervVirtualMachineSnapshotMountInput!):UpdateHypervVirtualMachineSnapshotMountReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -deleteVirtualMachineSnapshotMount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -deleteVirtualMachineSnapshotMount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateHyperv -deleteVirtualMachineSnapshotMount${nl}${nl}" @"
    Requst to delete a live mount

Supported in v5.0+
Create a request to delete a live mount.
    GraphQL operation: deleteHypervVirtualMachineSnapshotMount(input: DeleteHypervVirtualMachineSnapshotMountInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -refreshServer
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -refreshServer -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateHyperv -refreshServer${nl}${nl}" @"
    Refresh Hyper-V host metadata

Supported in v5.0+
Create a job to refresh the metadata for the specified Hyper-V host.
    GraphQL operation: refreshHypervServer(input: RefreshHypervServerInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -batchOnDemandBackupVm
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -batchOnDemandBackupVm -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateHyperv -batchOnDemandBackupVm${nl}${nl}" @"
    Takes bulk on-demand backup of Hyper-V virtual machines

Supported in v9.0
Takes on-demand backup of multiple specified Hyper-V virtual machines.
    GraphQL operation: batchOnDemandBackupHypervVm(input: BatchOnDemandBackupHypervVmInput!):BatchOnDemandBackupHypervVmReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -batchExportVm
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -batchExportVm -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateHyperv -batchExportVm${nl}${nl}" @"
    Exports a snapshot from each member of a set of virtual machines

Supported in v7.0+
Export a snapshot from each member of a set of virtual machines.
    GraphQL operation: batchExportHypervVm(input: BatchExportHypervVmInput!):BatchExportHypervVmReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -batchMountVm
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -batchMountVm -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateHyperv -batchMountVm${nl}${nl}" @"
    Mount snapshots from multiple virtual machines

Supported in v7.0+
Mounts a batch of snapshots from a group of specified virtual machines.
    GraphQL operation: batchMountHypervVm(input: BatchMountHypervVmInput!):BatchMountHypervVmReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -batchInstantRecoverVm
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -batchInstantRecoverVm -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateHyperv -batchInstantRecoverVm${nl}${nl}" @"
    Instantly recovers snapshots from multiple virtual machines

Supported in v7.0+
Instantly recovers a batch of snapshots from a group of specified virtual machines.
    GraphQL operation: batchInstantRecoverHypervVm(input: BatchInstantRecoverHypervVmInput!):BatchInstantRecoverHypervVmReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -updateVirtualMachine
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -updateVirtualMachine -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateHyperv -updateVirtualMachine${nl}${nl}" @"
    Update VM

Supported in v5.0+
Update VM with specified properties.
    GraphQL operation: updateHypervVirtualMachine(input: UpdateHypervVirtualMachineInput!):UpdateHypervVirtualMachineReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -downloadSnapshotFromLocation
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -downloadSnapshotFromLocation -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateHyperv -downloadSnapshotFromLocation${nl}${nl}" @"
    Download a snapshot from a replication target

Supported in v7.0+
Initiates a job to download a snapshot from the specified location when the snapshot does not exist locally. The specified location has to be a replication target connected to this Rubrik cluster. If an SLA Domain is not provided, the snapshot will be retained forever.
    GraphQL operation: downloadHypervSnapshotFromLocation(input: DownloadHypervSnapshotFromLocationInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"



# -------------------------------------------------------------------
# Invoke-RscMutateLdap -updateIntegration
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateLdap -updateIntegration -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateLdap -updateIntegration${nl}${nl}" @"
    Mutate LDAP integration.
    GraphQL operation: updateLdapIntegration(,   id: UUID,   name: String!,   bindUserName: String!,   bindUserPassword: String!,   baseDn: String,   trustedCerts: String,   dynamicDnsName: String,   ldapServers: [LdapServerInput!],   userSearchFilter: String,   userNameAttr: String,   groupMembershipAttr: String,   groupSearchFilter: String,   groupMemberAttr: String, ):String!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateLdap -removeIntegration
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateLdap -removeIntegration -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateLdap -removeIntegration${nl}${nl}" @"
    Remove LDAP integration.
    GraphQL operation: removeLdapIntegration(id: UUID!):Boolean!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateLdap -deletePrincipal
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateLdap -deletePrincipal -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateLdap -deletePrincipal${nl}${nl}" @"
    
    GraphQL operation: deleteLdapPrincipals(principalIds: [String!]!):Boolean!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateLdap -setMfaSetting
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateLdap -setMfaSetting -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateLdap -setMfaSetting${nl}${nl}" @"
    Update the MFA settings for the given LDAP integration. Return true when the operation succeeds.
    GraphQL operation: setLdapMfaSetting(input: SetLdapMfaSettingInput!):Boolean!
"@ "${nl}Field type: ${fieldTypeName}"



# -------------------------------------------------------------------
# Invoke-RscMutateMongo -addSource
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMongo -addSource -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateMongo -addSource${nl}${nl}" @"
    Add a new MongoDB source

Supported in v8.1+
Adds a new MongoDB source to the Rubrik Cluster.
    GraphQL operation: addMongoSource(input: AddMongoSourceInput!):AddMongoSourceReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateMongo -deleteSource
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMongo -deleteSource -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateMongo -deleteSource${nl}${nl}" @"
    Delete a MongoDB source

Supported in v8.1+
Deletes a specific MongoDB source.
    GraphQL operation: deleteMongoSource(input: DeleteMongoSourceInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateMongo -discoverSource
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMongo -discoverSource -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateMongo -discoverSource${nl}${nl}" @"
    Discover a MongoDB source on-demand

Supported in v8.1+
Initiates an on-demand job to discover a MongoDB source.
    GraphQL operation: discoverMongoSource(input: DiscoverMongoSourceInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateMongo -patchSource
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMongo -patchSource -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateMongo -patchSource${nl}${nl}" @"
    Edit a MongoDB source

Supported in v8.1+
Edits the properties of a MongoDB source. Hosts, name, and type of MongoDB cannot be changed once added.
    GraphQL operation: patchMongoSource(input: PatchMongoSourceInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateMongo -retryAddSource
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMongo -retryAddSource -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateMongo -retryAddSource${nl}${nl}" @"
    Update a MongoDB source

Supported in v8.1+
Updates a MongoDB source details. You can use this endpoint for updating MongoDB source details when the request to add a source fails.
    GraphQL operation: retryAddMongoSource(input: RetryAddMongoSourceInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateMongo -assignSlaToDbCollection
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMongo -assignSlaToDbCollection -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateMongo -assignSlaToDbCollection${nl}${nl}" @"
    Assign SLA Domain to MongoDB collection objects

Supported in v8.1+
Assigns SLA Domain to the given MongoDB collection objects.
    GraphQL operation: assignSlaToMongoDbCollection(input: AssignSlaToMongoDbCollectionInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateMongo -recoverSource
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMongo -recoverSource -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateMongo -recoverSource${nl}${nl}" @"
    Recover a MongoDB source from Rubrik CDM cluster.
    GraphQL operation: recoverMongoSource(input: RecoverMongoSourceInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateMongo -createdbSource
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMongo -createdbSource -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateMongo -createdbSource${nl}${nl}" @"
    Register a new MongoDB source to NoSQL cluster. 
For MongoDB, the term ""source"" is usually used for either a replica set or a sharded cluster.
For more info on MongoDB cluster, refer to: https://docs.mongodb.com/manual/introduction/.
    GraphQL operation: createMongodbSource(input: AddMosaicSourceInput!):MosaicAsyncResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateMongo -updatedbSource
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMongo -updatedbSource -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateMongo -updatedbSource${nl}${nl}" @"
    Modifies configuration for a registered MongoDB source in NoSQL cluster.
    GraphQL operation: updateMongodbSource(input: ModifyMosaicSourceInput!):MosaicAsyncResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateMongo -deletedbSource
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMongo -deletedbSource -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateMongo -deletedbSource${nl}${nl}" @"
    Remove a registered MongoDB source from NoSQL cluster.
    GraphQL operation: deleteMongodbSource(input: DeleteMosaicSourceInput!):MosaicAsyncResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateMongo -bulkDeletedbSource
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMongo -bulkDeletedbSource -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateMongo -bulkDeletedbSource${nl}${nl}" @"
    Bulk Delete Sources

Supported in m3.2.0-m4.2.0.
    GraphQL operation: bulkDeleteMongodbSources(input: BulkDeleteMosaicSourcesInput!):MosaicAsyncResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateMongo -recoverdbSource
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMongo -recoverdbSource -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateMongo -recoverdbSource${nl}${nl}" @"
    Recover a MongoDB source from NoSQL cluster.
    GraphQL operation: recoverMongodbSource(input: MosaicRestoreDataInput!):MosaicAsyncResponse!
"@ "${nl}Field type: ${fieldTypeName}"



# -------------------------------------------------------------------
# Invoke-RscMutateMssql -browseDatabaseSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMssql -browseDatabaseSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateMssql -browseDatabaseSnapshot${nl}${nl}" @"
    List snapshots and logs from a Mssql Database. This endpoint is only used to fetch data, but uses a mutation instead of a query due to limitations with the CDM API.
    GraphQL operation: browseMssqlDatabaseSnapshot(input: BrowseMssqlDatabaseSnapshotInput!):BrowseMssqlDatabaseSnapshotReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateMssql -exportDatabase
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMssql -exportDatabase -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateMssql -exportDatabase${nl}${nl}" @"
    Create a request to export a Microsoft SQL database.
    GraphQL operation: exportMssqlDatabase(input: ExportMssqlDatabaseInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateMssql -restoreDatabase
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMssql -restoreDatabase -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateMssql -restoreDatabase${nl}${nl}" @"
    Create a request to restore a Microsoft SQL database.
    GraphQL operation: restoreMssqlDatabase(input: RestoreMssqlDatabaseInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateMssql -bulkUpdateDb
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMssql -bulkUpdateDb -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateMssql -bulkUpdateDb${nl}${nl}" @"
    Update multiple Microsoft SQL databases with the specified properties.
    GraphQL operation: bulkUpdateMssqlDbs(input: BulkUpdateMssqlDbsInput!):BulkUpdateMssqlDbsReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateMssql -takeLogBackup
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMssql -takeLogBackup -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateMssql -takeLogBackup${nl}${nl}" @"
    Take an on-demand log backup for a Microsoft SQL database.
    GraphQL operation: takeMssqlLogBackup(input: TakeMssqlLogBackupInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateMssql -createOnDemandBackup
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMssql -createOnDemandBackup -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateMssql -createOnDemandBackup${nl}${nl}" @"
    Take an on-demand backup of a Microsoft SQL Database
    GraphQL operation: createOnDemandMssqlBackup(input: CreateOnDemandMssqlBackupInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateMssql -deleteDbSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMssql -deleteDbSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateMssql -deleteDbSnapshot${nl}${nl}" @"
    Delete snapshots of a Microsoft SQL Database.
    GraphQL operation: deleteMssqlDbSnapshots(input: DeleteMssqlDbSnapshotsInput!):ResponseSuccess!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateMssql -deleteLiveMount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMssql -deleteLiveMount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateMssql -deleteLiveMount${nl}${nl}" @"
    Delete a Live Mount of a SQL Server database

Supported in v5.0+
Create an async request to delete a Live Mount of a SQL Server database. Poll the task status by using /mssql/request/{id}.
    GraphQL operation: deleteMssqlLiveMount(input: DeleteMssqlLiveMountInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateMssql -bulkCreateOnDemandBackup
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMssql -bulkCreateOnDemandBackup -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateMssql -bulkCreateOnDemandBackup${nl}${nl}" @"
    Take a bulk on-demand backup of a Microsoft SQL Database.
    GraphQL operation: bulkCreateOnDemandMssqlBackup(input: BulkCreateOnDemandMssqlBackupInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateMssql -createLiveMount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMssql -createLiveMount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateMssql -createLiveMount${nl}${nl}" @"
    Create live mount of a Microsoft SQL Database.
    GraphQL operation: createMssqlLiveMount(input: CreateMssqlLiveMountInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateMssql -updateLogShippingConfiguration
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMssql -updateLogShippingConfiguration -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateMssql -updateLogShippingConfiguration${nl}${nl}" @"
    Update log shipping configuration of a Microsoft SQL Database.
    GraphQL operation: updateMssqlLogShippingConfiguration(input: UpdateMssqlLogShippingConfigurationInput!):UpdateMssqlLogShippingConfigurationReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateMssql -downloadDatabaseFilesFromArchivalLocation
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMssql -downloadDatabaseFilesFromArchivalLocation -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateMssql -downloadDatabaseFilesFromArchivalLocation${nl}${nl}" @"
    Download Microsoft SQL Database backup files from archival location.
    GraphQL operation: downloadMssqlDatabaseFilesFromArchivalLocation(input: DownloadMssqlDatabaseFilesFromArchivalLocationInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateMssql -downloadDatabaseBackupFile
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMssql -downloadDatabaseBackupFile -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateMssql -downloadDatabaseBackupFile${nl}${nl}" @"
    Downloads a list of snapshot and log backups from a Microsoft SQL database

Supported in v5.2+
Downloads a list of snapshot and log backups from a Microsoft SQL database.
    GraphQL operation: downloadMssqlDatabaseBackupFiles(input: DownloadMssqlDatabaseBackupFilesInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateMssql -assignSlaDomainPropertie
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMssql -assignSlaDomainPropertie -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateMssql -assignSlaDomainPropertie${nl}${nl}" @"
    Assign SLA domain properties to Mssql objects.
    GraphQL operation: assignMssqlSlaDomainProperties(input: AssignMssqlSlaDomainPropertiesInput!):ResponseSuccess!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateMssql -updateDefaultPropertie
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMssql -updateDefaultPropertie -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateMssql -updateDefaultPropertie${nl}${nl}" @"
    Update the default properties for Microsoft SQL databases.
    GraphQL operation: updateMssqlDefaultProperties(input: UpdateMssqlDefaultPropertiesInput!):UpdateMssqlDefaultPropertiesReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateMssql -createLogShippingConfiguration
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMssql -createLogShippingConfiguration -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateMssql -createLogShippingConfiguration${nl}${nl}" @"
    Create log shipping configuration of a Microsoft SQL Database.
    GraphQL operation: createMssqlLogShippingConfiguration(input: CreateMssqlLogShippingConfigurationInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateMssql -assignSlaDomainPropertiesAsync
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMssql -assignSlaDomainPropertiesAsync -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateMssql -assignSlaDomainPropertiesAsync${nl}${nl}" @"
    Assign SLA domain properties to Mssql objects.
    GraphQL operation: assignMssqlSlaDomainPropertiesAsync(input: AssignMssqlSlaDomainPropertiesAsyncInput!):AssignMssqlSlaDomainPropertiesAsyncReply!
"@ "${nl}Field type: ${fieldTypeName}"



# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -createCluster
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -createCluster -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateNutanix -createCluster${nl}${nl}" @"
    Add Nutanix cluster

Supported in v5.0+
Create a Nutanix cluster object by providing an address and account credentials for Prism. Initiates an asynchronous job to establish a connection with the cluster and retrieve all metadata. Use GET /nutanix_cluster/{id}/status to check status.
    GraphQL operation: createNutanixCluster(input: CreateNutanixClusterInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -refreshCluster
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -refreshCluster -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateNutanix -refreshCluster${nl}${nl}" @"
    Refresh Nutanix cluster metadata

Supported in v5.0+
Create a job to refresh the metadata for the specified Nutanix cluster.
    GraphQL operation: refreshNutanixCluster(input: RefreshNutanixClusterInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -updateCluster
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -updateCluster -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateNutanix -updateCluster${nl}${nl}" @"
    Patch Nutanix cluster

Supported in v5.0+
Patch the host, credentials, and/or CA certs of the specified Nutanix cluster object.
    GraphQL operation: updateNutanixCluster(input: UpdateNutanixClusterInput!):UpdateNutanixClusterReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -deleteCluster
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -deleteCluster -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateNutanix -deleteCluster${nl}${nl}" @"
    Remove Nutanix cluster

Supported in v5.0+
Initiates an asynchronous job to remove a Nutanix cluster object. The Nutanix cluster cannot have VMs mounted through the Rubrik cluster.
    GraphQL operation: deleteNutanixCluster(input: DeleteNutanixClusterInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -registerAgentVm
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -registerAgentVm -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateNutanix -registerAgentVm${nl}${nl}" @"
    v5.0-v8.0: Register the agent installed on the Nutanix VM
v8.1+: Register the agent installed on the Nutanix virtual machine

Supported in v5.0+
v5.0-v5.3: Register the agent installed on the Nutanix VM
v6.0-v8.0: Register the agent installed on the Nutanix VM.
v8.1+: Register the agent installed on the Nutanix virtual machine.
    GraphQL operation: registerAgentNutanixVm(input: RegisterAgentNutanixVmInput!):RequestSuccess!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -updateVm
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -updateVm -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateNutanix -updateVm${nl}${nl}" @"
    v5.0-v8.0: Patch VM
v8.1+: Patch virtual machine

Supported in v5.0+
v5.0-v5.3: Patch VM with specified properties
v6.0-v8.0: Patch VM with specified properties.
v8.1+: Patch virtual machine with specified properties.
    GraphQL operation: updateNutanixVm(input: UpdateNutanixVmInput!):Void
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -createOnDemandBackup
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -createOnDemandBackup -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateNutanix -createOnDemandBackup${nl}${nl}" @"
    v5.0-v8.0: Create on-demand VM snapshot
v8.1+: Create on-demand virtual machine snapshot

Supported in v5.0+
v5.0-v5.3: Create an on-demand snapshot for the given VM ID
v6.0-v8.0: Create an on-demand snapshot for the given VM ID.
v8.1+: Create an on-demand snapshot for the given virtual machine ID.
    GraphQL operation: createOnDemandNutanixBackup(input: CreateOnDemandNutanixBackupInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -deleteSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -deleteSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateNutanix -deleteSnapshot${nl}${nl}" @"
    v5.0-v8.0: Delete all snapshots of VM
v8.1+: Delete all snapshots of virtual machine

Supported in v5.0+
Delete all snapshots of a virtual machine.
    GraphQL operation: deleteNutanixSnapshots(input: DeleteNutanixSnapshotsInput!):RequestSuccess!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -mountSnapshotV1
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -mountSnapshotV1 -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateNutanix -mountSnapshotV1${nl}${nl}" @"
    Initiate a Live Mount of a Nutanix virtual machine snapshot

Supported in v6.0+
Initiates a request to perform a Live Mount of a Nutanix virtual machine snapshot identified by the snapshot ID.
    GraphQL operation: mountNutanixSnapshotV1(input: MountNutanixSnapshotV1Input!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -patchMountV1
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -patchMountV1 -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateNutanix -patchMountV1${nl}${nl}" @"
    Change Nutanix Live Mount power status

Supported in v6.0+
Changes the power status of a mounted Nutanix virtual machine.
    GraphQL operation: patchNutanixMountV1(input: PatchNutanixMountV1Input!):PatchNutanixMountV1Reply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -deleteMountV1
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -deleteMountV1 -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateNutanix -deleteMountV1${nl}${nl}" @"
    Remove a Live Mount of a Nutanix virtual machine snapshot

Supported in v6.0+
Initiates a request to remove a Live Mount of a Nutanix virtual machine snapshot identified by the ID of the Live Mount.
    GraphQL operation: deleteNutanixMountV1(input: DeleteNutanixMountV1Input!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -migrateMountV1
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -migrateMountV1 -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateNutanix -migrateMountV1${nl}${nl}" @"
    Relocate a Nutanix virtual machine to another storage container

Supported in v6.0+
Initiate a request to migrate the virtual disks of a specified Nutanix Live Mount to another storage container. The destination storage container has been specified when the Live Mount was created. The Live Mount will be deleted when the relocation succeeds.
    GraphQL operation: migrateNutanixMountV1(input: MigrateNutanixMountV1Input!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -restoreFilesSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -restoreFilesSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateNutanix -restoreFilesSnapshot${nl}${nl}" @"
    Restore files

Supported in v5.0+
Restore files from a snapshot to the source Nutanix virtual machine.
    GraphQL operation: restoreFilesNutanixSnapshot(input: RestoreFilesNutanixSnapshotInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -downloadFilesSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -downloadFilesSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateNutanix -downloadFilesSnapshot${nl}${nl}" @"
    v5.0-v8.0: Download files from a Nutanix VM backup
v8.1+: Download files from a Nutanix virtual machine backup

Supported in v5.0+
v5.0-v8.0: Start an asynchronous job to download multiple files and folders from a specified Nutanix VM backup. The response returns an asynchronous request ID. Get the URL for downloading the zip file including the specific files/folders by sending a GET request to 'nutanix/vm/request/{id}'.
v8.1+: Start an asynchronous job to download multiple files and folders from a specified Nutanix virtual machine backup. The response returns an asynchronous request ID. Get the URL for downloading the zip file including the specific files/folders by sending a GET request to 'nutanix/vm/request/{id}'.
    GraphQL operation: downloadFilesNutanixSnapshot(input: DownloadFilesNutanixSnapshotInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -exportSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -exportSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateNutanix -exportSnapshot${nl}${nl}" @"
    v5.0-v8.0: Export VM snapshot
v8.1+: Export virtual machine snapshot

Supported in v5.0+
v5.0-v8.0: Export snapshot of a vm.
v8.1+: Export snapshot of a virtual machine.
    GraphQL operation: exportNutanixSnapshot(input: ExportNutanixSnapshotInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -downloadSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -downloadSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateNutanix -downloadSnapshot${nl}${nl}" @"
    Creates a download from archival request

Supported in v5.0+
Download a snapshot from archival.
    GraphQL operation: downloadNutanixSnapshot(input: DownloadNutanixSnapshotInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -batchExportVm
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -batchExportVm -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateNutanix -batchExportVm${nl}${nl}" @"
    Exports a snapshot from each member of a set of virtual machines

Supported in v7.0+
Export a snapshot from each member of a set of virtual machines.
    GraphQL operation: batchExportNutanixVm(input: BatchExportNutanixVmInput!):BatchExportNutanixVmReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -batchMountVm
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -batchMountVm -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateNutanix -batchMountVm${nl}${nl}" @"
    Mount snapshots from multiple virtual machines

Supported in v7.0+
Mounts a batch of snapshots from a group of specified virtual machines.
    GraphQL operation: batchMountNutanixVm(input: BatchMountNutanixVmInput!):BatchMountNutanixVmReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -downloadVmFromLocation
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -downloadVmFromLocation -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateNutanix -downloadVmFromLocation${nl}${nl}" @"
    Download a snapshot from a replication target

Supported in v7.0+
Initiates a job to download a snapshot from the specified location when the snapshot does not exist locally. The specified location has to be a replication target connected to this Rubrik cluster. If an SLA Domain is not provided, the snapshot will be retained forever.
    GraphQL operation: downloadNutanixVmFromLocation(input: DownloadNutanixVmFromLocationInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -createPrismCentral
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -createPrismCentral -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateNutanix -createPrismCentral${nl}${nl}" @"
    Add Nutanix Prism Central and it's corresponding Prism Elements

Supported in v9.0
Create a Nutanix Prism Central object and refresh the Prism Elements present in it.
    GraphQL operation: createNutanixPrismCentral(input: CreateNutanixPrismCentralInput!):BatchAsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -updatePrismCentral
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -updatePrismCentral -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateNutanix -updatePrismCentral${nl}${nl}" @"
    Patch Nutanix Prism Central

Supported in v9.0
Patch the host and credentials of Nutanix Prism Central.
    GraphQL operation: updateNutanixPrismCentral(input: UpdateNutanixPrismCentralInput!):UpdateNutanixPrismCentralReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -deletePrismCentral
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -deletePrismCentral -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateNutanix -deletePrismCentral${nl}${nl}" @"
    Remove Nutanix Prism Central

Supported in v9.0
Initiates an asynchronous job to remove a Nutanix Prism Central object. The Nutanix Clusters attached to the Prism Central cannot have Virtual Machines mounted through the Rubrik cluster.
    GraphQL operation: deleteNutanixPrismCentral(input: DeleteNutanixPrismCentralInput!):BatchAsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -refreshPrismCentral
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -refreshPrismCentral -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateNutanix -refreshPrismCentral${nl}${nl}" @"
    Refresh Nutanix Prism Central metadata

Supported in v9.0
Initiates a job to refresh the metadata for the specified Nutanix Prism Central and all its associated clusters.
    GraphQL operation: refreshNutanixPrismCentral(input: RefreshNutanixPrismCentralInput!):BatchAsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -bulkOnDemandSnapshotVm
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -bulkOnDemandSnapshotVm -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateNutanix -bulkOnDemandSnapshotVm${nl}${nl}" @"
    Take an on-demand snapshot for selected Nutanix virtual machines

Supported in v9.0
Take bulk backups for multiple Nutanix virtual machines.
    GraphQL operation: bulkOnDemandSnapshotNutanixVm(input: BulkOnDemandSnapshotNutanixVmInput!):BulkOnDemandSnapshotNutanixVmReply!
"@ "${nl}Field type: ${fieldTypeName}"



# -------------------------------------------------------------------
# Invoke-RscMutateO365 -SaaSSetupKickoff
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -SaaSSetupKickoff -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateO365 -SaaSSetupKickoff${nl}${nl}" @"
    
    GraphQL operation: o365SaaSSetupKickoff:O365SaasSetupKickoffReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -PdlGroup
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -PdlGroup -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateO365 -PdlGroup${nl}${nl}" @"
    Retrieve or create the groups corresponding to the preferred data location and workload pairings for use in role creation.
    GraphQL operation: o365PdlGroups(input: O365PdlGroupsInput!):O365PdlGroupsReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -SaasSetupComplete
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -SaasSetupComplete -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateO365 -SaasSetupComplete${nl}${nl}" @"
    Completes a Rubrik-Hosted setup flow.
    GraphQL operation: o365SaasSetupComplete(input: O365SaasSetupCompleteInput!):AddO365OrgResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -SetupKickoff
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -SetupKickoff -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateO365 -SetupKickoff${nl}${nl}" @"
    Kicks off an O365 subscription setup flow.
    GraphQL operation: o365SetupKickoff:O365SetupKickoffResp!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -addOrg
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -addOrg -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateO365 -addOrg${nl}${nl}" @"
    Adds an O365 org to the account.
    GraphQL operation: addO365Org(input: AddO365OrgInput!):AddO365OrgResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -OauthConsentKickoff
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -OauthConsentKickoff -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateO365 -OauthConsentKickoff${nl}${nl}" @"
    Kicks off the OAuth consent flow for an O365 Azure AD App.
    GraphQL operation: o365OauthConsentKickoff(input: O365OauthConsentKickoffInput!):O365OauthConsentKickoffReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -OauthConsentComplete
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -OauthConsentComplete -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateO365 -OauthConsentComplete${nl}${nl}" @"
    Completes the OAuth consent flow for an O365 Azure AD App.
    GraphQL operation: o365OauthConsentComplete(input: O365OauthConsentCompleteInput!):O365OauthConsentCompleteReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -createAppKickoff
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -createAppKickoff -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateO365 -createAppKickoff${nl}${nl}" @"
    Kicks off the creation flow for an O365 Azure AD App.
    GraphQL operation: createO365AppKickoff(input: CreateO365AppKickoffInput!):CreateO365AppKickoffResp!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -createAppComplete
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -createAppComplete -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateO365 -createAppComplete${nl}${nl}" @"
    Completes the creation flow for an O365 Azure AD App.
    GraphQL operation: createO365AppComplete(input: CreateO365AppCompleteInput!):RequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -insertCustomerApp
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -insertCustomerApp -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateO365 -insertCustomerApp${nl}${nl}" @"
    Inserts a Customer-hosted O365 Azure AD App.
    GraphQL operation: insertCustomerO365App(input: InsertCustomerO365AppInput!):RequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -updateAppAuthStatus
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -updateAppAuthStatus -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateO365 -updateAppAuthStatus${nl}${nl}" @"
    Update O365 App authentication status to applicable app version.
    GraphQL operation: updateO365AppAuthStatus(input: UpdateO365AppAuthStatusInput!):UpdateO365AppAuthStatusReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -updateAppPermission
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -updateAppPermission -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateO365 -updateAppPermission${nl}${nl}" @"
    Update O365 Azure app permission in Azure AD portal.
    GraphQL operation: updateO365AppPermissions(input: UpdateO365AppPermissionsInput!):Void
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -deleteAzureApp
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -deleteAzureApp -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateO365 -deleteAzureApp${nl}${nl}" @"
    Deletes an O365 Azure AD App from the account.
    GraphQL operation: deleteO365AzureApp(o365AppClientId: String!, o365AppType: String!):RequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -backupMailbox
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -backupMailbox -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateO365 -backupMailbox${nl}${nl}" @"
    Backup mailbox workload.
    GraphQL operation: backupO365Mailbox(mailboxIds: [UUID!]!):BatchAsyncJobStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -backupOnedrive
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -backupOnedrive -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateO365 -backupOnedrive${nl}${nl}" @"
    Take on-demand snapshot for Onedrive.
    GraphQL operation: backupO365Onedrive(input: BackupO365OnedriveInput!):BatchAsyncJobStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -backupSharepointDrive
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -backupSharepointDrive -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateO365 -backupSharepointDrive${nl}${nl}" @"
    Take on-demand snapshot for Sharepoint drive.
    GraphQL operation: backupO365SharepointDrive(input: BackupO365SharepointDriveInput!):BatchAsyncJobStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -backupSharepointList
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -backupSharepointList -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateO365 -backupSharepointList${nl}${nl}" @"
    Take on-demand snapshot for SharePoint list.
    GraphQL operation: backupO365SharepointList(input: BackupO365SharePointListInput!):CreateOnDemandJobReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -backupSharePointSite
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -backupSharePointSite -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateO365 -backupSharePointSite${nl}${nl}" @"
    Take on-demand snapshot for a SharePoint site.
    GraphQL operation: backupO365SharePointSite(input: BackupO365SharePointSiteInput!):CreateOnDemandJobReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -backupTeam
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -backupTeam -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateO365 -backupTeam${nl}${nl}" @"
    Take on-demand snapshot for Teams.
    GraphQL operation: backupO365Team(input: BackupO365TeamInput!):BatchAsyncJobStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -restoreTeamsFile
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -restoreTeamsFile -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateO365 -restoreTeamsFile${nl}${nl}" @"
    Restore Team files.
    GraphQL operation: restoreO365TeamsFiles(input: RestoreO365TeamsFilesInput!):CreateOnDemandJobReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -restoreTeamsConversation
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -restoreTeamsConversation -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateO365 -restoreTeamsConversation${nl}${nl}" @"
    Restore Team conversations.
    GraphQL operation: restoreO365TeamsConversations(input: RestoreO365TeamsConversationsInput!):CreateOnDemandJobReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -restoreSnappable
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -restoreSnappable -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateO365 -restoreSnappable${nl}${nl}" @"
    Restores an O365 snappable.
    GraphQL operation: restoreO365Snappable(input: RestoreO365SnappableInput!):CreateOnDemandJobReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -refreshOrg
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -refreshOrg -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateO365 -refreshOrg${nl}${nl}" @"
    Refreshes an O365 org.
    GraphQL operation: refreshO365Org(orgId: UUID!):CreateOnDemandJobReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -deleteOrg
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -deleteOrg -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateO365 -deleteOrg${nl}${nl}" @"
    Deletes an O365 org from the account.
    GraphQL operation: deleteO365Org(orgId: UUID!):CreateOnDemandJobReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -restoreMailbox
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -restoreMailbox -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateO365 -restoreMailbox${nl}${nl}" @"
    Restores an Exchange mailbox.
    GraphQL operation: restoreO365Mailbox(restoreConfig: RestoreO365MailboxInput!):CreateOnDemandJobReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -exportMailbox
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -exportMailbox -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateO365 -exportMailbox${nl}${nl}" @"
    Exports an Exchange mailbox.
    GraphQL operation: exportO365Mailbox(exportConfig: ExportO365MailboxInput!):CreateOnDemandJobReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -setServiceAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -setServiceAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateO365 -setServiceAccount${nl}${nl}" @"
    Sets the service account for the org.
    GraphQL operation: setO365ServiceAccount(username: String!, appPassword: String!, orgId: UUID!):RequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -enableSharePoint
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -enableSharePoint -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateO365 -enableSharePoint${nl}${nl}" @"
    Enables SharePoint protection in the exocompute cluster.
    GraphQL operation: enableO365SharePoint(input: EnableO365SharePointInput!):RequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -enableTeam
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -enableTeam -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateO365 -enableTeam${nl}${nl}" @"
    Enables Teams protection in the exocompute cluster.
    GraphQL operation: enableO365Teams(exocomputeClusterId: String!):RequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -deleteServiceAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -deleteServiceAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateO365 -deleteServiceAccount${nl}${nl}" @"
    Deletes the service account for an org.
    GraphQL operation: deleteO365ServiceAccount(orgId: UUID!):RequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -updateOrgCustomName
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -updateOrgCustomName -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateO365 -updateOrgCustomName${nl}${nl}" @"
    Update the custom name for an O365 Organization.
    GraphQL operation: updateO365OrgCustomName(input: UpdateO365OrgCustomNameInput!):UpdateO365OrgCustomNameReply!
"@ "${nl}Field type: ${fieldTypeName}"



# -------------------------------------------------------------------
# Invoke-RscMutateOracle -bulkUpdateHost
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateOracle -bulkUpdateHost -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateOracle -bulkUpdateHost${nl}${nl}" @"
    Update Oracle Hosts

Supported in v5.2+
Update properties to Oracle Host objects.
    GraphQL operation: bulkUpdateOracleHosts(input: BulkUpdateOracleHostsInput!):BulkUpdateOracleHostsReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateOracle -refreshDatabase
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateOracle -refreshDatabase -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateOracle -refreshDatabase${nl}${nl}" @"
    Refresh an Oracle database

Supported in v6.0+
Starts an asynchronous job to refresh the Oracle database metadata by querying the database instances on all the underlying hosts.
    GraphQL operation: refreshOracleDatabase(input: RefreshOracleDatabaseInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateOracle -updateDataGuardGroup
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateOracle -updateDataGuardGroup -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateOracle -updateDataGuardGroup${nl}${nl}" @"
    Update an Oracle Data Guard group

Supported in v6.0+
Update properties of an Oracle Data Guard group object.
    GraphQL operation: updateOracleDataGuardGroup(input: UpdateOracleDataGuardGroupInput!):OracleDbDetail!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateOracle -deleteAllDatabaseSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateOracle -deleteAllDatabaseSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateOracle -deleteAllDatabaseSnapshot${nl}${nl}" @"
    Delete Oracle database snapshots

Supported in v5.0+
Delete all snapshots for a specified Oracle database object. For the operation to succeed the referenced database must not be assigned to an SLA Domain.
    GraphQL operation: deleteAllOracleDatabaseSnapshots(input: DeleteAllOracleDatabaseSnapshotsInput!):Void
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateOracle -takeOnDemandDatabaseSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateOracle -takeOnDemandDatabaseSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateOracle -takeOnDemandDatabaseSnapshot${nl}${nl}" @"
    On-demand backup of an Oracle database

Supported in v5.0+
Create an asynchronous job for an on-demand snapshot of an Oracle database. The response includes an ID for the asynchronous job request. To see the status of the request, poll /oracle/request/{id}.
    GraphQL operation: takeOnDemandOracleDatabaseSnapshot(input: TakeOnDemandOracleDatabaseSnapshotInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateOracle -takeOnDemandLogSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateOracle -takeOnDemandLogSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateOracle -takeOnDemandLogSnapshot${nl}${nl}" @"
    On-demand log backup for an Oracle database log

Supported in v5.0+
Create an asynchronous job for an on-demand backup of an Oracle database log. The response includes an ID for the asynchronous job request.  To see the status of the request, poll /oracle/request/{id}.
    GraphQL operation: takeOnDemandOracleLogSnapshot(input: TakeOnDemandOracleLogSnapshotInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateOracle -bulkUpdateRac
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateOracle -bulkUpdateRac -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateOracle -bulkUpdateRac${nl}${nl}" @"
    Update Oracle RACs

Supported in v5.2+
Update the properties of the objects that represent the specified Oracle RAC.
    GraphQL operation: bulkUpdateOracleRacs(input: BulkUpdateOracleRacsInput!):BulkUpdateOracleRacsReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateOracle -exportTablespace
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateOracle -exportTablespace -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateOracle -exportTablespace${nl}${nl}" @"
    Export an Oracle tablespace

Supported in v5.0+
Request an asynchronous job to export an Oracle tablespace from a specified snapshot or timestamp.
    GraphQL operation: exportOracleTablespace(input: ExportOracleTablespaceInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateOracle -validateAcoFile
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateOracle -validateAcoFile -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateOracle -validateAcoFile${nl}${nl}" @"
    Validate Oracle ACO file

Supported in v6.0+
Validate the provided Oracle ACO (Advanced Cloning Options) file.
    GraphQL operation: validateOracleAcoFile(input: ValidateOracleAcoFileInput!):ValidateOracleAcoFileReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateOracle -validateDatabaseBackup
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateOracle -validateDatabaseBackup -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateOracle -validateDatabaseBackup${nl}${nl}" @"
    Validate Oracle database backups

Supported in v5.3+
Queue a job to validate Oracle backups for a database snapshot or a specified timestamp.
    GraphQL operation: validateOracleDatabaseBackups(input: ValidateOracleDatabaseBackupsInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateOracle -bulkUpdateDatabase
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateOracle -bulkUpdateDatabase -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateOracle -bulkUpdateDatabase${nl}${nl}" @"
    Update Oracle Databases

Supported in v5.2+
Update the properties of the objects that represent the specified Oracle Databases.
    GraphQL operation: bulkUpdateOracleDatabases(input: BulkUpdateOracleDatabasesInput!):BulkUpdateOracleDatabasesReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateOracle -instantRecoverSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateOracle -instantRecoverSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateOracle -instantRecoverSnapshot${nl}${nl}" @"
    Instant recovery of a database

Supported in v5.0+
Creates an instant recover request that restores a target database from the given snapshot.
    GraphQL operation: instantRecoverOracleSnapshot(input: InstantRecoverOracleSnapshotInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateOracle -mountDatabase
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateOracle -mountDatabase -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateOracle -mountDatabase${nl}${nl}" @"
    Live Mount an Oracle database snapshot

Supported in v5.0+
Create an asynchronous job to Live Mount an Oracle database from a snapshot.
    GraphQL operation: mountOracleDatabase(input: MountOracleDatabaseInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateOracle -exportDatabase
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateOracle -exportDatabase -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateOracle -exportDatabase${nl}${nl}" @"
    Export an Oracle database

Supported in v5.0+
Request an asynchronous job to export an Oracle database from a specified snapshot or timestamp.
    GraphQL operation: exportOracleDatabase(input: ExportOracleDatabaseInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateOracle -createPdbRestore
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateOracle -createPdbRestore -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateOracle -createPdbRestore${nl}${nl}" @"
    Restore PDBs on an Oracle database

Supported in v8.0+
Initiates an asynchronous request to restore PDBs on an Oracle database from a specified snapshot or timestamp.
    GraphQL operation: createOraclePdbRestore(input: CreateOraclePdbRestoreInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateOracle -downloadDatabaseSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateOracle -downloadDatabaseSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateOracle -downloadDatabaseSnapshot${nl}${nl}" @"
    Download Oracle snapshot from cloud

Supported in v5.0+
Create an asynchronous job to download an Oracle database snapshot and associated logs using the snapshot ID. The response includes the ID of the asynchronous job request. To see the status of the request, poll /oracle/request/{id}.
    GraphQL operation: downloadOracleDatabaseSnapshot(input: DownloadOracleDatabaseSnapshotInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateOracle -deleteMount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateOracle -deleteMount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateOracle -deleteMount${nl}${nl}" @"
    Delete an Oracle database Live Mount

Supported in v5.0+
Request an asynchronous job to delete a specified Live Mount of an Oracle database snapshot. Poll the job status by using /oracle/request/{id}.
    GraphQL operation: deleteOracleMount(input: DeleteOracleMountInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateOracle -restoreLog
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateOracle -restoreLog -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateOracle -restoreLog${nl}${nl}" @"
    Restore archive logs of an Oracle database

Supported in v6.0+
v6.0: Create an asynchronous job to restore archive logs of an Oracle database.
v7.0+: Starts an asynchronous job to restore archive logs of an Oracle database.
    GraphQL operation: restoreOracleLogs(input: RestoreOracleLogsInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"



# -------------------------------------------------------------------
# Invoke-RscMutateSla -createGlobal
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateSla -createGlobal -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateSla -createGlobal${nl}${nl}" @"
    Create SLA Domain.
    GraphQL operation: createGlobalSla(input: CreateGlobalSlaInput!):GlobalSlaReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateSla -editGlobal
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateSla -editGlobal -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateSla -editGlobal${nl}${nl}" @"
    
    GraphQL operation: editGlobalSla(globalSlaEditRequest: GlobalSlaEditRequest!):GlobalSlaReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateSla -updateGlobal
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateSla -updateGlobal -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateSla -updateGlobal${nl}${nl}" @"
    Update SLA Domain.
    GraphQL operation: updateGlobalSla(input: UpdateGlobalSlaInput!):GlobalSlaReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateSla -deleteGlobal
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateSla -deleteGlobal -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateSla -deleteGlobal${nl}${nl}" @"
    
    GraphQL operation: deleteGlobalSla(id: UUID!, userNote: String):SlaResult!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateSla -assign
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateSla -assign -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateSla -assign${nl}${nl}" @"
    Endpoint to assign SLA Domain.
    GraphQL operation: assignSla(input: AssignSlaInput!):SlaAssignResult!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateSla -assignsForSnappableHierarchie
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateSla -assignsForSnappableHierarchie -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateSla -assignsForSnappableHierarchie${nl}${nl}" @"
    
    GraphQL operation: assignSlasForSnappableHierarchies(,   globalSlaOptionalFid: UUID,   globalSlaAssignType: SlaAssignTypeEnum!,   objectIds: [UUID!]!,   applicableSnappableTypes: [WorkloadLevelHierarchy!],   shouldApplyToExistingSnapshots: Boolean,   shouldApplyToNonPolicySnapshots: Boolean,   globalExistingSnapshotRetention: GlobalExistingSnapshotRetention,   userNote: String, ):[SlaAssignResult!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateSla -assignRetentionToSnappable
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateSla -assignRetentionToSnappable -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateSla -assignRetentionToSnappable${nl}${nl}" @"
    
    GraphQL operation: assignRetentionSLAToSnappables(,   globalSlaOptionalFid: UUID,   globalSlaAssignType: SlaAssignTypeEnum!,   objectIds: [UUID!]!,   applicableSnappableType: WorkloadLevelHierarchy,   shouldApplyToNonPolicySnapshots: Boolean,   userNote: String, ):SlaAssignResult!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateSla -assignRetentionToSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateSla -assignRetentionToSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateSla -assignRetentionToSnapshot${nl}${nl}" @"
    
    GraphQL operation: assignRetentionSLAToSnapshots(,   globalSlaOptionalFid: UUID,   globalSlaAssignType: SlaAssignTypeEnum!,   snapshotFids: [UUID!]!,   userNote: String, ):SlaAssignResult!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateSla -pause
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateSla -pause -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateSla -pause${nl}${nl}" @"
    Pause/Resume Global SLA on the given clusters.
    GraphQL operation: pauseSla(input: PauseSlaRequest!):SlaResult!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateSla -upgrade
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateSla -upgrade -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateSla -upgrade${nl}${nl}" @"
    Upgrade SLA Domains from the Rubrik clusters.
    GraphQL operation: upgradeSlas(input: UpgradeSlasInput!):UpgradeSlasReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateSla -getPendingAssignment
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateSla -getPendingAssignment -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateSla -getPendingAssignment${nl}${nl}" @"
    Get pending SLA Domain assignments on selected managed objects

Supported in v5.2+
Retrieve the details of pending SLA Domain assignments on the given managed objects. For objects with pending assignments, return the SLA Domain that is pending. For objects without pending assignments, return the current SLA Domain information. Explicitly list invalid object IDs.
    GraphQL operation: getPendingSlaAssignments(input: GetPendingSlaAssignmentsInput!):PendingSlaOperations!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateSla -exportManagedVolumeSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateSla -exportManagedVolumeSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateSla -exportManagedVolumeSnapshot${nl}${nl}" @"
    Create a request to export a snapshot and mount it on a host

Supported in v5.3+
Export a managed volume snapshot as a share and mount it on a given host.
    GraphQL operation: exportSlaManagedVolumeSnapshot(input: ExportSlaManagedVolumeSnapshotInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"



# -------------------------------------------------------------------
# Invoke-RscMutateVcenter -Create
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVcenter -Create -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVcenter -Create${nl}${nl}" @"
    
    GraphQL operation: vsphereCreateVCenter(,   clusterUuid: UUID!,   hostname: String!,   username: String!,   password: String!,   conflictResolutionAuthz: ConflictResolutionAuthzEnum!,   caCert: String, ):VsphereAsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateVcenter -Delete
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVcenter -Delete -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVcenter -Delete${nl}${nl}" @"
    Remove vCenter Server

Supported in v5.0+
Initiates an asynchronous job to remove a vCenter Server object. The vCenter Server cannot have VMs mounted through the Rubrik cluster.
    GraphQL operation: vsphereDeleteVcenter(input: VsphereDeleteVcenterInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateVcenter -Edit
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVcenter -Edit -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVcenter -Edit${nl}${nl}" @"
    
    GraphQL operation: vsphereEditVCenter(,   vcenterId: UUID!,   hostname: String!,   username: String!,   password: String!,   conflictResolutionAuthz: ConflictResolutionAuthzEnum!,   caCert: String, ):RequestSuccess!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateVcenter -Refresh
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVcenter -Refresh -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVcenter -Refresh${nl}${nl}" @"
    
    GraphQL operation: vsphereRefreshVCenter(vcenterId: UUID!):VsphereAsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateVcenter -update
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVcenter -update -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVcenter -update${nl}${nl}" @"
    Update vCenter Server

Supported in v5.0+
Update the address, username and password of the specified vCenter Server object.
    GraphQL operation: updateVcenter(input: UpdateVcenterInput!):UpdateVcenterReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateVcenter -updateHotAddNetwork
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVcenter -updateHotAddNetwork -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVcenter -updateHotAddNetwork${nl}${nl}" @"
    Set the user-configured network for HotAdd backup and recovery

Supported in v5.3+
Set the user-configured network for HotAdd backup and recovery operations on VMware on AWS.
    GraphQL operation: updateVcenterHotAddNetwork(input: UpdateVcenterHotAddNetworkInput!):RequestSuccess!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateVcenter -updateHotAddBandwidth
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVcenter -updateHotAddBandwidth -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVcenter -updateHotAddBandwidth${nl}${nl}" @"
    Set the ingest and export bandwidth limits for HotAdd with the vCenter

Supported in v5.3+
Set the ingest and export bandwidth limits in Mbps when using HotAdd with the vCenter. These limits are shared across all HotAdd proxies for the Center.
    GraphQL operation: updateVcenterHotAddBandwidth(input: UpdateVcenterHotAddBandwidthInput!):RequestSuccess!
"@ "${nl}Field type: ${fieldTypeName}"



# -------------------------------------------------------------------
# Invoke-RscMutateVsphere -OnDemandSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphere -OnDemandSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVsphere -OnDemandSnapshot${nl}${nl}" @"
    
    GraphQL operation: vsphereOnDemandSnapshot(input: VsphereOnDemandSnapshotInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphere -BulkOnDemandSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphere -BulkOnDemandSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVsphere -BulkOnDemandSnapshot${nl}${nl}" @"
    Trigger a bulk on demand snapshot.
    GraphQL operation: vsphereBulkOnDemandSnapshot(input: VsphereBulkOnDemandSnapshotInput!):BatchAsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphere -deleteLiveMount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphere -deleteLiveMount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVsphere -deleteLiveMount${nl}${nl}" @"
    Delete a Live Mount VM

Supported in v5.0+
Create a request to delete a Live Mount virtual machine.
    GraphQL operation: deleteVsphereLiveMount(input: DeleteVsphereLiveMountInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphere -ExportSnapshotToStandaloneHostV2
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphere -ExportSnapshotToStandaloneHostV2 -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVsphere -ExportSnapshotToStandaloneHostV2${nl}${nl}" @"
    Export snapshot of a virtual machine to standalone ESXi server.
    GraphQL operation: vsphereExportSnapshotToStandaloneHostV2(input: VsphereExportSnapshotToStandaloneHostV2Input!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphere -ExportSnapshotToStandaloneHost
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphere -ExportSnapshotToStandaloneHost -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVsphere -ExportSnapshotToStandaloneHost${nl}${nl}" @"
    
    GraphQL operation: vsphereExportSnapshotToStandaloneHost(,   snapshotFid: UUID!,   vmName: String,   disableNetwork: Boolean,   removeNetworkDevices: Boolean,   powerOn: Boolean,   keepMacAddresses: Boolean,   hostIpAddress: String!,   datastoreName: String!,   hostUsername: String!,   hostPassword: String!, ):VsphereAsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphere -downloadVirtualMachineFile
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphere -downloadVirtualMachineFile -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVsphere -downloadVirtualMachineFile${nl}${nl}" @"
    Download Virtual Machine files from a snapshot

Supported in v9.0
Start an asynchronous job to download multiple Virtual Machine files, such as .vmdk, .vmx, and .nvram files, from the specified Virtual Machine snapshot.
    GraphQL operation: downloadVsphereVirtualMachineFiles(input: DownloadVsphereVirtualMachineFilesInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphere -createAdvancedTag
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphere -createAdvancedTag -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVsphere -createAdvancedTag${nl}${nl}" @"
    Create a multi-tag filter for vSphere tags

Supported in v7.0+
Create a filter consisting of vSphere tags joined with logical operators.
    GraphQL operation: createVsphereAdvancedTag(input: CreateVsphereAdvancedTagInput!):CreateVsphereAdvancedTagReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphere -deleteAdvancedTag
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphere -deleteAdvancedTag -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVsphere -deleteAdvancedTag${nl}${nl}" @"
    Remove the multi-tag filter

Supported in v7.0+
Remove the multi-tag filter.
    GraphQL operation: deleteVsphereAdvancedTag(input: DeleteVsphereAdvancedTagInput!):RequestSuccess!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphere -updateAdvancedTag
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphere -updateAdvancedTag -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVsphere -updateAdvancedTag${nl}${nl}" @"
    Update the multi-tag filter

Supported in v7.0+
Updates the name, condition, and description of the specified multi-tag filter.
    GraphQL operation: updateVsphereAdvancedTag(input: UpdateVsphereAdvancedTagInput!):UpdateVsphereAdvancedTagReply!
"@ "${nl}Field type: ${fieldTypeName}"



# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -RecoverFile
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -RecoverFile -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVsphereVm -RecoverFile${nl}${nl}" @"
    Restores multiple files/directories from snapshot.
    GraphQL operation: vsphereVmRecoverFiles(input: VsphereVmRecoverFilesInput!):VsphereAsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -RecoverFilesNew
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -RecoverFilesNew -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVsphereVm -RecoverFilesNew${nl}${nl}" @"
    Restores multiple files/directories from snapshot.
    GraphQL operation: vsphereVmRecoverFilesNew(input: VsphereVmRecoverFilesNewInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -RegisterAgent
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -RegisterAgent -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVsphereVm -RegisterAgent${nl}${nl}" @"
    Register Rubrik Backup Service

Supported in v5.0+
Register the Rubrik Backup Service that is running on a specified host with the specified Rubrik cluster.
    GraphQL operation: vsphereVmRegisterAgent(input: VsphereVmRegisterAgentInput!):RequestSuccess!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -DownloadSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -DownloadSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVsphereVm -DownloadSnapshot${nl}${nl}" @"
    Download snapshot from archive

Supported in v5.0+
Provides a method for retrieving a snapshot, that is not available locally, from an archival location.
    GraphQL operation: vsphereVmDownloadSnapshot(input: VsphereVmDownloadSnapshotInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -ExportSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -ExportSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVsphereVm -ExportSnapshot${nl}${nl}" @"
    
    GraphQL operation: vsphereVMExportSnapshot(,   snapshotFid: UUID!,   vmName: String,   disableNetwork: Boolean,   removeNetworkDevices: Boolean,   powerOn: Boolean,   keepMacAddresses: Boolean,   hostID: String,   datastoreId: UUID!,   unregsiterVm: Boolean,   shouldRecoverTags: Boolean, ):VsphereAsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -ExportSnapshotV2
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -ExportSnapshotV2 -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVsphereVm -ExportSnapshotV2${nl}${nl}" @"
    Create a vSphere Export from a snapshot or a point-in-time.
    GraphQL operation: vsphereVmExportSnapshotV2(input: VsphereVmExportSnapshotV2Input!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -ExportSnapshotV3
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -ExportSnapshotV3 -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVsphereVm -ExportSnapshotV3${nl}${nl}" @"
    Create a vSphere Export from a snapshot or a point-in-time with datastore cluster and virtual disk mapping support.
    GraphQL operation: vsphereVmExportSnapshotV3(input: VsphereVmExportSnapshotV3Input!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -BatchExport
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -BatchExport -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVsphereVm -BatchExport${nl}${nl}" @"
    Create a mass export for a group of virtual machines.
    GraphQL operation: vsphereVmBatchExport(input: VsphereVmBatchExportInput!):BatchAsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -BatchExportV3
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -BatchExportV3 -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVsphereVm -BatchExportV3${nl}${nl}" @"
    Create a batch export for a group of virtual machines with datastore cluster support.
    GraphQL operation: vsphereVmBatchExportV3(input: VsphereVmBatchExportV3Input!):BatchAsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -InitiateInPlaceRecovery
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -InitiateInPlaceRecovery -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVsphereVm -InitiateInPlaceRecovery${nl}${nl}" @"
    Trigger an in-place recovery from a snapshot or point-in-time.
    GraphQL operation: vsphereVmInitiateInPlaceRecovery(input: VsphereVmInitiateInPlaceRecoveryInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -ExportSnapshotWithDownloadFromCloud
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -ExportSnapshotWithDownloadFromCloud -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVsphereVm -ExportSnapshotWithDownloadFromCloud${nl}${nl}" @"
    Download a snapshot from an archival location, then export a virtual machine using the downloaded snapshot

Supported in v5.3+
Download a snapshot from an archival location and then export a virtual machine using the downloaded snapshot.
    GraphQL operation: vsphereVmExportSnapshotWithDownloadFromCloud(input: VsphereVmExportSnapshotWithDownloadFromCloudInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -BatchInPlaceRecovery
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -BatchInPlaceRecovery -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVsphereVm -BatchInPlaceRecovery${nl}${nl}" @"
    Supported in v6.0+. Export a snapshot each from a set of virtual machines.
    GraphQL operation: vsphereVmBatchInPlaceRecovery(input: VsphereVmBatchInPlaceRecoveryInput!):BatchAsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -DeleteSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -DeleteSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVsphereVm -DeleteSnapshot${nl}${nl}" @"
    Designate a snapshot as expired and available for garbage collection. The snapshot must be an on-demand snapshot or a snapshot from a virtual machine that is not assigned to an SLA Domain.
    GraphQL operation: vsphereVmDeleteSnapshot(input: VsphereVmDeleteSnapshotInput!):Void
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -Update
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -Update -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVsphereVm -Update${nl}${nl}" @"
    
    GraphQL operation: vsphereVMUpdate(,   snappableFid: UUID!,   snapshotConsistencyMandate: String,   preBackupScript: PreBackupScriptInputType,   postBackupScript: PostBackupScriptInputType,   postSnapScript: PostSnapScriptInputType,   isArrayIntegrationEnabled: Boolean, ):RequestSuccess!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -InitiateInstantRecovery
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -InitiateInstantRecovery -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVsphereVm -InitiateInstantRecovery${nl}${nl}" @"
    
    GraphQL operation: vsphereVMInitiateInstantRecovery(,   snapshotFid: UUID!,   vmName: String,   disableNetwork: Boolean,   removeNetworkDevices: Boolean,   powerOn: Boolean,   keepMacAddresses: Boolean,   hostID: String,   preserveMOID: Boolean,   vlan: Int,   shouldRecoverTags: Boolean, ):VsphereAsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -InitiateInstantRecoveryV2
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -InitiateInstantRecoveryV2 -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVsphereVm -InitiateInstantRecoveryV2${nl}${nl}" @"
    Instantly recover a vSphere virtual machine from a snapshot or point-in-time.
    GraphQL operation: vsphereVmInitiateInstantRecoveryV2(input: VsphereVmInitiateInstantRecoveryV2Input!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -InitiateBatchInstantRecovery
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -InitiateBatchInstantRecovery -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVsphereVm -InitiateBatchInstantRecovery${nl}${nl}" @"
    Initiate a mass instant recovery for a group of VMs.
    GraphQL operation: vsphereVmInitiateBatchInstantRecovery(input: VsphereVmInitiateBatchInstantRecoveryInput!):BatchAsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -InitiateDiskMount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -InitiateDiskMount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVsphereVm -InitiateDiskMount${nl}${nl}" @"
    Attaching disks from a snapshot to an existing virtual machine

Supported in v5.0+
Requests a snapshot mount to attach disks to an existing virtual machine.
    GraphQL operation: vsphereVmInitiateDiskMount(input: VsphereVmInitiateDiskMountInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -InitiateLiveMount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -InitiateLiveMount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVsphereVm -InitiateLiveMount${nl}${nl}" @"
    
    GraphQL operation: vsphereVMInitiateLiveMount(,   snapshotFid: UUID!,   vmName: String,   disableNetwork: Boolean,   removeNetworkDevices: Boolean,   powerOn: Boolean,   keepMacAddresses: Boolean,   hostID: String,   datastoreName: String,   createDatastoreOnly: Boolean,   vlan: Int,   shouldRecoverTags: Boolean, ):VsphereAsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -InitiateLiveMountV2
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -InitiateLiveMountV2 -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVsphereVm -InitiateLiveMountV2${nl}${nl}" @"
    Create a vSphere Live Mount from a snapshot or point-in-time.
    GraphQL operation: vsphereVmInitiateLiveMountV2(input: VsphereVmInitiateLiveMountV2Input!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -BatchLiveMount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -BatchLiveMount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVsphereVm -BatchLiveMount${nl}${nl}" @"
    
    GraphQL operation: vSphereVMBatchLiveMount(clusterUuid: UUID!, config: BatchMountSnapshotJobConfigInput!):BatchAsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -InitiateBatchLiveMountV2
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -InitiateBatchLiveMountV2 -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVsphereVm -InitiateBatchLiveMountV2${nl}${nl}" @"
    Initiate a mass live mount for a group of VMs.
    GraphQL operation: vsphereVmInitiateBatchLiveMountV2(input: VsphereVmInitiateBatchLiveMountV2Input!):BatchAsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -PowerOnOffLiveMount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -PowerOnOffLiveMount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVsphereVm -PowerOnOffLiveMount${nl}${nl}" @"
    Power a Live Mount on and off

Supported in v5.0+
Power a specified Live Mount virtual machine on or off. Pass **_true_** to power the virtual machine on and pass **_false_** to power the virtual machine off.
    GraphQL operation: vsphereVmPowerOnOffLiveMount(input: VsphereVmPowerOnOffLiveMountInput!):VsphereVmPowerOnOffLiveMountReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -DeleteLiveMount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -DeleteLiveMount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVsphereVm -DeleteLiveMount${nl}${nl}" @"
    
    GraphQL operation: vsphereVMDeleteLiveMount(livemountId: UUID!, force: Boolean):VsphereAsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -ListEsxiDatastore
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -ListEsxiDatastore -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVsphereVm -ListEsxiDatastore${nl}${nl}" @"
    List ESXi datastores

Supported in v5.0+
Retrieve a list of the datastores for a specified ESXi host.
    GraphQL operation: vsphereVmListEsxiDatastores(input: VsphereVmListEsxiDatastoresInput!):VsphereVmListEsxiDatastoresReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -ListEsXiDatastore
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -ListEsXiDatastore -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVsphereVm -ListEsXiDatastore${nl}${nl}" @"
    Retrieve a list of the datastores for a specified ESXi host
    GraphQL operation: vsphereVMListESXiDatastores(,   clusterUuid: UUID!,   ipAddress: String!,   username: String!,   password: String!, ):DatastoresListResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -MountRelocate
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -MountRelocate -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVsphereVm -MountRelocate${nl}${nl}" @"
    Relocate a virtual machine to another datastore

Supported in v5.0+
Run storage VMotion to relocate a specified Live Mount into another data store.
    GraphQL operation: vsphereVmMountRelocate(input: VsphereVmMountRelocateInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -MountRelocateV2
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -MountRelocateV2 -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVsphereVm -MountRelocateV2${nl}${nl}" @"
    Create a Live Mount migration to a datastore or datastore cluster with virtual disk mapping support.
    GraphQL operation: vsphereVmMountRelocateV2(input: VsphereVmMountRelocateV2Input!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -ExcludeVmDisk
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -ExcludeVmDisk -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVsphereVm -ExcludeVmDisk${nl}${nl}" @"
    Exclude or include virtual disks during snapshot.
    GraphQL operation: vsphereExcludeVmDisks(input: [VsphereExcludeVmDisksInput!]!):RequestSuccess!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -DownloadSnapshotFile
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -DownloadSnapshotFile -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscMutateVsphereVm -DownloadSnapshotFile${nl}${nl}" @"
    Download files from snapshot.
    GraphQL operation: vsphereVmDownloadSnapshotFiles(input: VsphereVmDownloadSnapshotFilesInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"



# -------------------------------------------------------------------
# Invoke-RscQueryAccount -Setting
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAccount -Setting -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAccount -Setting${nl}${nl}" @"
    This endpoint is deprecated.
    GraphQL operation: accountSettings:AccountSetting!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAccount -sWithExocomputeMapping
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAccount -sWithExocomputeMapping -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAccount -sWithExocomputeMapping${nl}${nl}" @"
    Retrieves the list of all accounts with their Exocompute account mapping, if exists.
    GraphQL operation: allAccountsWithExocomputeMappings(cloudVendor: CloudVendor!, features: [CloudAccountFeature!]! = [], exocomputeAccountIdsFilter: [UUID!]! = []):[CloudAccountWithExocomputeMapping!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAccount -Product
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAccount -Product -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAccount -Product${nl}${nl}" @"
    
    GraphQL operation: allAccountProducts(,   nameFilter: [ProductName!]!,   typeFilter: [ProductType!]!,   stateFilter: [ProductState!]!,   startDateArg: DateTime,   endDateArg: DateTime, ):[AccountProduct!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAccount -Id
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAccount -Id -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAccount -Id${nl}${nl}" @"
    Account ID.
    GraphQL operation: accountId:String!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAccount -Owner
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAccount -Owner -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAccount -Owner${nl}${nl}" @"
    List of account owners.
    GraphQL operation: allAccountOwners:[User!]!
"@ "${nl}Field type: ${fieldTypeName}"



# -------------------------------------------------------------------
# Invoke-RscQueryActivitySeries -ActivitySeries
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryActivitySeries -ActivitySeries -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryActivitySeries -ActivitySeries${nl}${nl}" @"
    Retrieve an activity series.
    GraphQL operation: activitySeries(input: ActivitySeriesInput!):ActivitySeries!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryActivitySeries -List
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryActivitySeries -List -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryActivitySeries -List${nl}${nl}" @"
    
    GraphQL operation: activitySeriesConnection(,   first: Int,   after: String,   last: Int,   before: String,   sortOrder: SortOrder,   sortBy: ActivitySeriesSortField,   filters: ActivitySeriesFilter, ):ActivitySeriesConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryActivitySeries -GroupByList
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryActivitySeries -GroupByList -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryActivitySeries -GroupByList${nl}${nl}" @"
    
    GraphQL operation: activitySeriesGroupByConnection(,   first: Int,   after: String,   last: Int,   before: String,   groupBy: ActivitySeriesGroupByEnum!,   filters: ActivitySeriesFilterInput,   timezoneOffset: Float = 0.0, ):ActivitySeriesGroupByConnection!
"@ "${nl}Field type: ${fieldTypeName}"



# -------------------------------------------------------------------
# Invoke-RscQueryAws -NativeRoot
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -NativeRoot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAws -NativeRoot${nl}${nl}" @"
    Root of AWS native hierarchy.
    GraphQL operation: awsNativeRoot:AwsNativeRoot!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -NativeAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -NativeAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAws -NativeAccount${nl}${nl}" @"
    Refers to the AWS Native account that serves as a container for all your AWS resources. The AWS Native account contains information about the metadata related to the AWS Native resources.
    GraphQL operation: awsNativeAccount(awsNativeAccountRubrikId: UUID!, awsNativeProtectionFeature: AwsNativeProtectionFeature!):AwsNativeAccount!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -NativeEc2Instance
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -NativeEc2Instance -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAws -NativeEc2Instance${nl}${nl}" @"
    Refers to Amazon Elastic Compute Cloud (EC2) Instance represented by a specific ID. For more information, see https://aws.amazon.com/ec2/.
    GraphQL operation: awsNativeEc2Instance(ec2InstanceRubrikId: UUID!):AwsNativeEc2Instance!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -NativeEbsVolume
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -NativeEbsVolume -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAws -NativeEbsVolume${nl}${nl}" @"
    Refers to the Amazon Elastic Block Store (EBS) Volume represented by a specific ID. For more information, see https://aws.amazon.com/ebs/.
    GraphQL operation: awsNativeEbsVolume(ebsVolumeRubrikId: UUID!):AwsNativeEbsVolume!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -NativeS3Bucket
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -NativeS3Bucket -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAws -NativeS3Bucket${nl}${nl}" @"
    Represents the Amazon S3 Bucket with a specific ID. For more information, see https://aws.amazon.com/s3/.
    GraphQL operation: awsNativeS3Bucket(s3BucketRubrikId: UUID!):AwsNativeS3Bucket!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -NativeEc2InstancesByName
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -NativeEc2InstancesByName -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAws -NativeEc2InstancesByName${nl}${nl}" @"
    Paginated list of all AWS EC2 Instances by name or substring of name.
    GraphQL operation: awsNativeEc2InstancesByName(,   first: Int,   after: String,   last: Int,   before: String,   sortBy: AwsNativeEc2InstanceSortFields,   sortOrder: SortOrder,   ec2InstanceName: String!, ):AwsNativeEc2InstanceConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -NativeEbsVolumesByName
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -NativeEbsVolumesByName -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAws -NativeEbsVolumesByName${nl}${nl}" @"
    Paginated list of all AWS EBS Volumes by name or substring of name.
    GraphQL operation: awsNativeEbsVolumesByName(,   first: Int,   after: String,   last: Int,   before: String,   sortBy: AwsNativeEbsVolumeSortFields,   sortOrder: SortOrder,   ebsVolumeName: String!, ):AwsNativeEbsVolumeConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -allVpcsByRegion
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -allVpcsByRegion -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAws -allVpcsByRegion${nl}${nl}" @"
    List of all Virtual Private Clouds (VPCs) in the AWS Native account, classified by region.
    GraphQL operation: allVpcsByRegionFromAws(awsAccountRubrikId: UUID!, region: AwsNativeRegion!):[AwsVpc!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -allVpc
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -allVpc -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAws -allVpc${nl}${nl}" @"
    List of all Virtual Private Clouds (VPCs) in the AWS Native account.
    GraphQL operation: allVpcsFromAws(awsAccountRubrikId: UUID):[AwsVpc!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -isNativeEbsVolumeSnapshotRestorable
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -isNativeEbsVolumeSnapshotRestorable -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAws -isNativeEbsVolumeSnapshotRestorable${nl}${nl}" @"
    Specified whether an EBS volume is restorable. For an EBS Volume to be restorable, the volume should be able to replace where attached.
    GraphQL operation: isAwsNativeEbsVolumeSnapshotRestorable(snapshotId: String!):IsVolumeSnapshotRestorableReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -allAvailabilityZonesByRegion
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -allAvailabilityZonesByRegion -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAws -allAvailabilityZonesByRegion${nl}${nl}" @"
    List of Availability Zones (AZs) in the specified region on the specified AWS Native account.
    GraphQL operation: allAvailabilityZonesByRegionFromAws(awsAccountRubrikId: UUID!, region: AwsNativeRegion!):[String!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -allKmsEncryptionKeysByRegion
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -allKmsEncryptionKeysByRegion -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAws -allKmsEncryptionKeysByRegion${nl}${nl}" @"
    List of encryption keys in the specified region on the specified AWS Native account. All the encrytion keys listed are managed by AWS Key Management System (KMS). For more information, see https://aws.amazon.com/kms/.
    GraphQL operation: allKmsEncryptionKeysByRegionFromAws(awsAccountRubrikId: UUID!, region: AwsNativeRegion!):[KmsEncryptionKey!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -isS3BucketNameAvailable
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -isS3BucketNameAvailable -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAws -isS3BucketNameAvailable${nl}${nl}" @"
    Specifies whether an S3 bucket name is available for use in AWS or not. When true, the bucket name is available for use.
    GraphQL operation: isAwsS3BucketNameAvailable(bucketName: String!, awsAccountRubrikId: UUID!):Boolean!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -allS3Bucket
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -allS3Bucket -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAws -allS3Bucket${nl}${nl}" @"
    List of all S3 bucket names across regions for the AWS Native account.
    GraphQL operation: allS3BucketsFromAws(awsAccountRubrikId: UUID!):[String!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -allS3BucketsDetail
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -allS3BucketsDetail -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAws -allS3BucketsDetail${nl}${nl}" @"
    List of all S3 bucket details across regions for the AWS Native account.
    GraphQL operation: allS3BucketsDetailsFromAws(awsAccountRubrikId: UUID!):[S3BucketDetails!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -NativeRdsInstance
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -NativeRdsInstance -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAws -NativeRdsInstance${nl}${nl}" @"
    Refers to AWS Relational Database Service (RDS) represented by a specific ID. For more information, see https://aws.amazon.com/rds/.
    GraphQL operation: awsNativeRdsInstance(rdsInstanceRubrikId: UUID!):AwsNativeRdsInstance!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -NativeRdsPointInTimeRestoreWindow
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -NativeRdsPointInTimeRestoreWindow -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAws -NativeRdsPointInTimeRestoreWindow${nl}${nl}" @"
    Point-in-Time (PiT) restore window of the RDS Instance in the AWS Native account. Refers to the range of time within which the database is available to be restored to a particular point in time. For more information,see https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIT.html.
    GraphQL operation: awsNativeRdsPointInTimeRestoreWindow(,   awsAccountRubrikId: UUID!,   region: AwsNativeRegion!,   rdsInstanceName: String!,   rdsDatabaseRubrikId: UUID, ):AwsNativeRdsPointInTimeRestoreWindow!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -rdsInstanceDetail
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -rdsInstanceDetail -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAws -rdsInstanceDetail${nl}${nl}" @"
    Details of the RDS Instance in the AWS Native account.
    GraphQL operation: rdsInstanceDetailsFromAws(,   awsAccountRubrikId: UUID!,   region: AwsNativeRegion!,   rdsInstanceName: String!,   rdsDatabaseRubrikId: UUID, ):RdsInstanceDetailsFromAws!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -isNativeRdsInstanceLaunchConfigurationValid
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -isNativeRdsInstanceLaunchConfigurationValid -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAws -isNativeRdsInstanceLaunchConfigurationValid${nl}${nl}" @"
    Specifies whether the given DbInstance class, storage type, multi-az capability, encryption capability, iops value are supported for the given dbEngine, dbEngineVersion in the specified availability zone. When true, the specification is valid for a RDS Instance and can be used to create a new Instance.
    GraphQL operation: isAwsNativeRdsInstanceLaunchConfigurationValid(,   awsAccountRubrikId: UUID!,   region: AwsNativeRegion!,   dbEngine: AwsNativeRdsDbEngine!,   dbEngineVersion: String!,   dbClass: AwsNativeRdsDbInstanceClass!,   primaryAz: String,   storageType: AwsNativeRdsStorageType,   isMultiAz: Boolean!,   kmsKeyId: String,   iops: Int, ):Boolean!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -allOptionGroupsByRegion
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -allOptionGroupsByRegion -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAws -allOptionGroupsByRegion${nl}${nl}" @"
    List of all RDS option groups in a given region. Refers to settings of how a particular option works for an RDS Instance. For more information, see https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithOptionGroups.html.
    GraphQL operation: allOptionGroupsByRegionFromAws(,   awsAccountRubrikId: UUID!,   region: AwsNativeRegion!,   dbEngine: AwsNativeRdsDbEngine!,   dbEngineVersion: String!,   majorEngineVersion: String!, ):[OptionGroup!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -allDbParameterGroupsByRegion
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -allDbParameterGroupsByRegion -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAws -allDbParameterGroupsByRegion${nl}${nl}" @"
    List of all DB parameter groups in a given region. Refers to container for engine configuration that applies to one or more DB Instances. For more information, see https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithOptionGroups.html.
    GraphQL operation: allDbParameterGroupsByRegionFromAws(,   awsAccountRubrikId: UUID!,   region: AwsNativeRegion!,   dbEngine: AwsNativeRdsDbEngine!,   dbEngineVersion: String!,   rdsType: AwsNativeRdsType, ):[DbParameterGroup!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -allDbSubnetGroupsByRegion
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -allDbSubnetGroupsByRegion -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAws -allDbSubnetGroupsByRegion${nl}${nl}" @"
    All DB subnet groups in a given region. Refers to logical isolation of RDS on a network. For more information, see https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html.
    GraphQL operation: allDbSubnetGroupsByRegionFromAws(awsAccountRubrikId: UUID!, region: AwsNativeRegion!):[SubnetGroup!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -validateNativeRdsInstanceNameForExport
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -validateNativeRdsInstanceNameForExport -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAws -validateNativeRdsInstanceNameForExport${nl}${nl}" @"
    Validates the name used for an RDS Instance during an export operation. Returns true if the RDS Instance name is valid. Returns false, with an error message, if the RDS Instance name validation fails. Returns false, without an error message for all other failures.
    GraphQL operation: validateAwsNativeRdsInstanceNameForExport(awsAccountRubrikId: UUID!, region: AwsNativeRegion!, rdsInstanceName: String!):ValidateAwsNativeRdsInstanceNameForExportReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -validateNativeRdsClusterNameForExport
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -validateNativeRdsClusterNameForExport -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAws -validateNativeRdsClusterNameForExport${nl}${nl}" @"
    Validates the name used for an RDS cluster during an export operation. Returns true if the RDS cluster name is valid. Returns false, with an error message, if the RDS cluster name validation fails. Returns false, without an error message for all other failures.
    GraphQL operation: validateAwsNativeRdsClusterNameForExport(awsAccountRubrikId: UUID!, region: AwsNativeRegion!, rdsClusterName: String!):ValidateAwsNativeRdsClusterNameForExportReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -NativeRdsExportDefault
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -NativeRdsExportDefault -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAws -NativeRdsExportDefault${nl}${nl}" @"
    Refers to the default values for the export operation of the RDS DB Instance in the AWS Native account.
    GraphQL operation: awsNativeRdsExportDefaults(rdsInstanceRubrikId: UUID!, snapshotId: String, isPointInTime: Boolean!):RdsInstanceExportDefaults!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -allEc2KeyPairsByRegion
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -allEc2KeyPairsByRegion -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAws -allEc2KeyPairsByRegion${nl}${nl}" @"
    List of all key pairs for a given region. A key pair, consisting of a public key and a private key, is a set of security credentials that you use to prove your identity when connecting to an EC2 instance. For more information, see https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html.
    GraphQL operation: allEc2KeyPairsByRegionFromAws(awsAccountRubrikId: UUID!, region: AwsNativeRegion!):[String!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -amiTypeForNativeArchivedSnapshotExport
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -amiTypeForNativeArchivedSnapshotExport -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAws -amiTypeForNativeArchivedSnapshotExport${nl}${nl}" @"
    Amazon Machine Image (AMI) type for export of an archived EC2 Instance snapshot. For more information, see https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instances-and-amis.html.
    GraphQL operation: amiTypeForAwsNativeArchivedSnapshotExport(input: AmiTypeForAwsNativeArchivedSnapshotExportInput!):AmiTypeForAwsNativeArchivedSnapshotExportReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -allRdsAuroraInstanceClass
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -allRdsAuroraInstanceClass -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAws -allRdsAuroraInstanceClass${nl}${nl}" @"
    List of all the database instance classes supported by AWS RDS Aurora databases.
    GraphQL operation: allAwsRdsAuroraInstanceClasses:AwsNativeRdsAuroraInstanceClassesReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -ComputeSetting
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -ComputeSetting -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAws -ComputeSetting${nl}${nl}" @"
    Retrieve aws compute settings.
    GraphQL operation: awsComputeSettings(computeSettingId: UUID!):AwsComputeSettings!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -allComputeSetting
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -allComputeSetting -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAws -allComputeSetting${nl}${nl}" @"
    List all aws compute settings.
    GraphQL operation: allAwsComputeSettings(,   sortBy: AwsCloudComputeSettingQuerySortByField,   sortOrder: SortOrder,   filter: [AwsCloudComputeSettingFilterInput!],   contextFilter: ContextFilterTypeEnum, ):[AwsComputeSettings!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -allCloudAccountsWithFeature
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -allCloudAccountsWithFeature -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAws -allCloudAccountsWithFeature${nl}${nl}" @"
    List of active AWS cloud accounts and the features for the accounts. A cloud account is an AWS account added to the Rubrik platform.
    GraphQL operation: allAwsCloudAccountsWithFeatures(awsCloudAccountsArg: AwsCloudAccountsWithFeaturesInput!):[AwsCloudAccountWithFeatures!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -CloudAccountWithFeature
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -CloudAccountWithFeature -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAws -CloudAccountWithFeature${nl}${nl}" @"
    List of AWS cloud accounts and the features for each account, classified by ID.
    GraphQL operation: awsCloudAccountWithFeatures(cloudAccountId: UUID!, awsCloudAccountArg: AwsCloudAccountWithFeaturesInput!):AwsCloudAccountWithFeatures!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -CloudAccountListVpc
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -CloudAccountListVpc -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAws -CloudAccountListVpc${nl}${nl}" @"
    Retrieves a list of virtual private clouds (VPCs) in the specific cloud account.
    GraphQL operation: awsCloudAccountListVpcs(cloudAccountUuid: UUID!, feature: CloudAccountFeature!, region: AwsRegion!):AwsCloudAccountListVpcResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -CloudAccountListSubnet
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -CloudAccountListSubnet -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAws -CloudAccountListSubnet${nl}${nl}" @"
    Retrieves a list of subnets in the specified cloud account and virtual private cloud (VPC).
    GraphQL operation: awsCloudAccountListSubnets(,   cloudAccountUuid: UUID!,   feature: CloudAccountFeature!,   region: AwsRegion!,   vpcID: String!, ):AwsCloudAccountListSubnetsResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -CloudAccountListSecurityGroup
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -CloudAccountListSecurityGroup -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAws -CloudAccountListSecurityGroup${nl}${nl}" @"
    Retrieves a list of security groups in the specified cloud account and virtual private cloud (VPC).
    GraphQL operation: awsCloudAccountListSecurityGroups(,   cloudAccountUuid: UUID!,   feature: CloudAccountFeature!,   region: AwsRegion!,   vpcID: String!, ):AwsCloudAccountListSecurityGroupsResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -CloudAccountListKMSKey
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -CloudAccountListKMSKey -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAws -CloudAccountListKMSKey${nl}${nl}" @"
    
    GraphQL operation: AwsCloudAccountListKMSKeys(cloudAccountUuid: UUID!, feature: CloudAccountFeature!, region: AwsRegion!):AwsCloudAccountListKMSKeysResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -allExocomputeConfig
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -allExocomputeConfig -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAws -allExocomputeConfig${nl}${nl}" @"
    List of all AWS exocompute configurations filtered by a cloud account ID or a cloud account name prefix.
    GraphQL operation: allAwsExocomputeConfigs(awsNativeAccountIdOrNamePrefix: String!):[AwsExocomputeConfig!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -allCloudAccountConfig
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -allCloudAccountConfig -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAws -allCloudAccountConfig${nl}${nl}" @"
    List of all AWS cloud account configurations with the given search query.
    GraphQL operation: allAwsCloudAccountConfigs(awsCloudAccountsArg: AwsCloudAccountConfigsInput!):[AwsFeatureConfig!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -allRegion
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -allRegion -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAws -allRegion${nl}${nl}" @"
    All valid AWS regions for this cloud account.
    GraphQL operation: allAwsRegions(cloudAccountId: String!):[AwsCloudAccountRegion!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -allCdmVersion
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -allCdmVersion -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAws -allCdmVersion${nl}${nl}" @"
    Get all Rubrik CDM versions in the AWS marketplace.
    GraphQL operation: allAwsCdmVersions(input: AwsCdmVersionRequest!):[AwsCdmVersion!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -allInstanceProfileName
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -allInstanceProfileName -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAws -allInstanceProfileName${nl}${nl}" @"
    All Rubrik CC-ES instance profiles in the AWS account.
    GraphQL operation: allAwsInstanceProfileNames(cloudAccountId: String!, region: String!):[String!]!
"@ "${nl}Field type: ${fieldTypeName}"



# -------------------------------------------------------------------
# Invoke-RscQueryAzure -NativeRoot
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -NativeRoot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -NativeRoot${nl}${nl}" @"
    Root of Azure native hierarchy.
    GraphQL operation: azureNativeRoot:AzureNativeRoot!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -NativeSubscription
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -NativeSubscription -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -NativeSubscription${nl}${nl}" @"
    Retrieves an Azure Native Subscription. Refers to the logical entity that provides entitlement to deploy and consume Azure resources.
    GraphQL operation: azureNativeSubscription(azureSubscriptionRubrikId: UUID!):AzureNativeSubscription!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -NativeResourceGroup
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -NativeResourceGroup -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -NativeResourceGroup${nl}${nl}" @"
    Retrieves an Azure Native Resource Group. Refers to a collection of resources in which multiple Azure services can reside.
    GraphQL operation: azureNativeResourceGroup(resourceGroupId: UUID!):AzureNativeResourceGroup!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -NativeVirtualMachine
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -NativeVirtualMachine -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -NativeVirtualMachine${nl}${nl}" @"
    Retrieves an Azure Virtual Machine that refers to the Azure infrastructure as a service (IaaS) used to deploy persistent VMs. For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/.
    GraphQL operation: azureNativeVirtualMachine(azureVirtualMachineRubrikId: UUID!):AzureNativeVirtualMachine!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -NativeManagedDisk
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -NativeManagedDisk -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -NativeManagedDisk${nl}${nl}" @"
    Retrieves an Azure Native Managed Disk that refers to the block storage designed to be used with Azure Virtual Machines. Some examples are: ultra disks, premium solid-state drives (SSD), standard SSDs, and standard hard disk drives (HDD). For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/managed-disks-overview.
    GraphQL operation: azureNativeManagedDisk(azureManagedDiskRubrikId: UUID!):AzureNativeManagedDisk!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -allNativeVirtualNetwork
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -allNativeVirtualNetwork -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -allNativeVirtualNetwork${nl}${nl}" @"
    Retrieves all virtual networks (VNets) in the protected subscriptions. VNet enables secure communication with other VNets, the internet, and on-premise networks. For more information, see https://docs.microsoft.com/en-us/azure/virtual-network/virtual-networks-overview.
    GraphQL operation: allAzureNativeVirtualNetworks(azureSubscriptionRubrikId: UUID):[AzureNativeVirtualNetwork!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -allNativeSubnetsByRegionFromAzure
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -allNativeSubnetsByRegionFromAzure -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -allNativeSubnetsByRegionFromAzure${nl}${nl}" @"
    Retrieves all subnets in the specified region and subscription. Subnets allow you to choose IP address range of your choice. For more information, see https://docs.microsoft.com/en-us/azure/virtual-network/network-overview#virtual-network-and-subnets.
    GraphQL operation: allAzureNativeSubnetsByRegionFromAzure(azureSubscriptionRubrikId: UUID!, region: AzureNativeRegion!):[AzureNativeSubnet!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -allNativeSecurityGroupsByRegionFromAzure
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -allNativeSecurityGroupsByRegionFromAzure -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -allNativeSecurityGroupsByRegionFromAzure${nl}${nl}" @"
    Retrieves all security groups in the specified region and subscription. Security groups enable you to configure network security as a natural extension of an application's structure, allowing you to group virtual machines and define network security policies based on those groups. For more information, see https://docs.microsoft.com/en-us/azure/virtual-network/application-security-groups.
    GraphQL operation: allAzureNativeSecurityGroupsByRegionFromAzure(azureSubscriptionRubrikId: UUID!, region: AzureNativeRegion!):[AzureNativeSecurityGroup!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -allDiskEncryptionSetsByRegion
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -allDiskEncryptionSetsByRegion -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -allDiskEncryptionSetsByRegion${nl}${nl}" @"
    List of all Azure Disk Encryption Sets in a region.
    GraphQL operation: allAzureDiskEncryptionSetsByRegion(azureSubscriptionRubrikId: UUID!, region: AzureNativeRegion!):[AzureNativeDiskEncryptionSet!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -allNativeAvailabilitySetsByRegionFromAzure
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -allNativeAvailabilitySetsByRegionFromAzure -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -allNativeAvailabilitySetsByRegionFromAzure${nl}${nl}" @"
    Retrieves all availability sets in the specified region, resource group, and subscription. An availability set is a logical grouping of VMs to facilitate redundancy and availability. For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/availability-set-overview.
    GraphQL operation: allAzureNativeAvailabilitySetsByRegionFromAzure(azureSubscriptionRubrikId: UUID!, resourceGroupName: String!, region: AzureNativeRegion!):[AzureNativeAvailabilitySet!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -allNativeExportCompatibleVmSizesByRegionFromAzure
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -allNativeExportCompatibleVmSizesByRegionFromAzure -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -allNativeExportCompatibleVmSizesByRegionFromAzure${nl}${nl}" @"
    Retrieves all supported virtual machine (VM) sizes when exporting a particular snapshot. Not all VM sizes are supported in all the regions. For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/sizes.
    GraphQL operation: allAzureNativeExportCompatibleVmSizesByRegionFromAzure(azureSubscriptionRubrikId: UUID!, region: AzureNativeRegion!, vmSnapshotId: UUID!):[AzureNativeExportCompatibleVmSizes!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -allNativeExportCompatibleDiskTypesByRegionFromAzure
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -allNativeExportCompatibleDiskTypesByRegionFromAzure -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -allNativeExportCompatibleDiskTypesByRegionFromAzure${nl}${nl}" @"
    Retrieves all supported disk types when exporting a specific snapshot. Not all disk types are supported in all the regions. For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/disks-types.
    GraphQL operation: allAzureNativeExportCompatibleDiskTypesByRegionFromAzure(azureSubscriptionRubrikId: UUID!, region: AzureNativeRegion!):[AzureNativeExportCompatibleDiskTypes!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -allNativeVirtualMachineSize
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -allNativeVirtualMachineSize -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -allNativeVirtualMachineSize${nl}${nl}" @"
    Retrieves all virtual machine (VM) sizes in the subscriptions protected by Rubrik that have been configured for protection. For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/sizes.
    GraphQL operation: allAzureNativeVirtualMachineSizes(azureSubscriptionRubrikId: UUID):[String!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -isNativeManagedDiskSnapshotRestorable
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -isNativeManagedDiskSnapshotRestorable -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -isNativeManagedDiskSnapshotRestorable${nl}${nl}" @"
    Specifies whether the Managed Disk snapshot is restorable or not. A managed disk is restorable when the restore settings of the Managed Disk are configured on the Azure portal and on the Rubrik platform. When the value is true, the managed disk snapshot is restorable.
    GraphQL operation: isAzureNativeManagedDiskSnapshotRestorable(azureSubscriptionRubrikId: UUID!, diskSnapshotId: UUID!):Boolean!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -isStorageAccountNameAvailable
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -isStorageAccountNameAvailable -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -isStorageAccountNameAvailable${nl}${nl}" @"
    Specifies whether the given storage account name is valid and available in Azure to be assigned to a new storage account. When the value is true, the specified account name is available in Azure.
    GraphQL operation: isAzureStorageAccountNameAvailable(azureSubscriptionRubrikId: UUID!, storageAccountName: String!):Boolean!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -allNativeStorageAccountsFromAzure
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -allNativeStorageAccountsFromAzure -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -allNativeStorageAccountsFromAzure${nl}${nl}" @"
    Retrieves list of all storage Accounts in a subscription.
    GraphQL operation: allAzureNativeStorageAccountsFromAzure(azureSubscriptionRubrikId: UUID!):[AzureNativeStorageAccount!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -SqlDatabase
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -SqlDatabase -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -SqlDatabase${nl}${nl}" @"
    Retrieves an Azure SQL Database. Refers to the fully managed SQL database built for the cloud. For more information, see https://azure.microsoft.com/en-us/products/azure-sql/database/.
    GraphQL operation: azureSqlDatabase(azureSqlDatabaseRubrikId: UUID!):AzureSqlDatabaseDb!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -SqlDatabaseServer
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -SqlDatabaseServer -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -SqlDatabaseServer${nl}${nl}" @"
    Retrieves an Azure SQL Database Server. Refers to the server that contains the Azure SQL Databases. For more information, see https://docs.microsoft.com/en-us/azure/azure-sql/database/logical-servers.
    GraphQL operation: azureSqlDatabaseServer(azureSqlDatabaseServerRubrikId: UUID!):AzureSqlDatabaseServer!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -SqlManagedInstanceDatabase
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -SqlManagedInstanceDatabase -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -SqlManagedInstanceDatabase${nl}${nl}" @"
    Retrieves an Azure SQL Managed Instance Database. Refers to the database engine compatible with the latest SQL Server (Enterprise Edition) database engine. For more information, see https://docs.microsoft.com/en-us/azure/azure-sql/managed-instance/sql-managed-instance-paas-overview.
    GraphQL operation: azureSqlManagedInstanceDatabase(azureSqlManagedInstanceDatabaseRubrikId: UUID!):AzureSqlManagedInstanceDatabase!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -SqlManagedInstanceServer
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -SqlManagedInstanceServer -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -SqlManagedInstanceServer${nl}${nl}" @"
    Retrieves an Azure SQL Managed Instance Server. Refers to the server the Azure SQL Managed Instance Database is a part of.
    GraphQL operation: azureSqlManagedInstanceServer(azureSqlManagedInstanceServerRubrikId: UUID!):AzureSqlManagedInstanceServer!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -SqlDatabaseDbPointInTimeRestoreWindowFromAzure
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -SqlDatabaseDbPointInTimeRestoreWindowFromAzure -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -SqlDatabaseDbPointInTimeRestoreWindowFromAzure${nl}${nl}" @"
    Point-in-Time (PiT) restore window of the Azure SQL Database instance in the Azure native account. Refers to the range of time within which the database is available to be restored to a particular point in time. For more information, see https://azure.microsoft.com/en-in/blog/azure-sql-database-point-in-time-restore/.
    GraphQL operation: azureSqlDatabaseDbPointInTimeRestoreWindowFromAzure(,   subscriptionId: UUID!,   resourceGroupName: String!,   azureSqlDatabaseServerName: String!,   azureSqlDatabaseName: String!, ):AzureNativeSqlDatabasePointInTimeRestoreWindow!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -SqlManagedInstanceDbPointInTimeRestoreWindowFromAzure
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -SqlManagedInstanceDbPointInTimeRestoreWindowFromAzure -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -SqlManagedInstanceDbPointInTimeRestoreWindowFromAzure${nl}${nl}" @"
    Point-in-Time (PiT) restore window of the Azure SQL Managed Instance database in the Azure native account. Refers to the range of time within which the database is available to be restored to a particular point in time. For more information, see https://docs.microsoft.com/en-us/azure/azure-sql/managed-instance/point-in-time-restore?tabs=azure-portal.
    GraphQL operation: azureSqlManagedInstanceDbPointInTimeRestoreWindowFromAzure(,   subscriptionId: UUID!,   resourceGroupName: String!,   azureSqlManagedInstanceName: String!,   azureSqlDatabaseName: String!, ):AzureNativeSqlDatabasePointInTimeRestoreWindow!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -validateNativeSqlDatabaseDbNameForExport
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -validateNativeSqlDatabaseDbNameForExport -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -validateNativeSqlDatabaseDbNameForExport${nl}${nl}" @"
    Validates the name used for an Sql Database during an export operation. Returns true if the database name is valid. Returns false, with an error message, if the database name validation fails. Returns false, without an error message for all other failures.
    GraphQL operation: validateAzureNativeSqlDatabaseDbNameForExport(azureSqlDatabaseName: String!, azureSqlDatabaseServerRubrikId: UUID!):ValidateAzureNativeSqlDatabaseDbNameForExportReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -validateNativeSqlManagedInstanceDbNameForExport
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -validateNativeSqlManagedInstanceDbNameForExport -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -validateNativeSqlManagedInstanceDbNameForExport${nl}${nl}" @"
    Validates the name used for an Managed Instance Database during an export operation. Returns true if the database name is valid. Returns false, with an error message, if the database name validation fails. Returns false, without an error message for all other failures.
    GraphQL operation: validateAzureNativeSqlManagedInstanceDbNameForExport(azureSqlDatabaseName: String!, azureSqlManagedInstanceServerRubrikId: UUID!):ValidateAzureNativeSqlManagedInstanceDbNameForExportReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -allSqlDatabaseServerElasticPool
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -allSqlDatabaseServerElasticPool -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -allSqlDatabaseServerElasticPool${nl}${nl}" @"
    Retrieves the list of elastic pools available for a SQL Database Server.For more information, see https://docs.microsoft.com/en-us/azure/azure-sql/database/elastic-pool-overview.
    GraphQL operation: allAzureSqlDatabaseServerElasticPools(,   subscriptionId: UUID!,   resourceGroupName: String!,   azureSqlDatabaseServerName: String!,   azureSqlDatabaseServerRubrikId: UUID!, ):[AzureSqlDatabaseServerElasticPool!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -isNativeSqlDatabaseSnapshotPersistent
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -isNativeSqlDatabaseSnapshotPersistent -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -isNativeSqlDatabaseSnapshotPersistent${nl}${nl}" @"
    Checks if an Azure SQL Database Snapshot or an Azure SQL Managed Instance Database Snapshot is a persistent snapshot.
    GraphQL operation: isAzureNativeSqlDatabaseSnapshotPersistent(snapshotId: UUID!):Boolean!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -allKeyVaultsByRegion
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -allKeyVaultsByRegion -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -allKeyVaultsByRegion${nl}${nl}" @"
    List of all Azure Key Vaults in a region.
    GraphQL operation: allAzureKeyVaultsByRegion(azureKeyVaultsInput: AzureKeyVaultsInput!):[AzureKeyVault!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -allEncryptionKey
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -allEncryptionKey -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -allEncryptionKey${nl}${nl}" @"
    List of all Encryption Keys in an Azure Key Vault.
    GraphQL operation: allAzureEncryptionKeys(azureEncryptionKeysInput: AzureEncryptionKeysInput!):[AzureEncryptionKey!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -CloudAccountTenant
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -CloudAccountTenant -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -CloudAccountTenant${nl}${nl}" @"
    Retrieves the details of the Azure tenant and all the subscriptions of the tenant, for a feature.
    GraphQL operation: azureCloudAccountTenant(,   tenantId: UUID!,   feature: CloudAccountFeature!,   subscriptionStatusFilters: [CloudAccountStatus!]!,   subscriptionSearchText: String!,   subscriptionIdsFilter: [UUID!], ):AzureCloudAccountTenant!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -CloudAccountTenantWithExoConfig
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -CloudAccountTenantWithExoConfig -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -CloudAccountTenantWithExoConfig${nl}${nl}" @"
    Retrieves details about the Azure cloud account tenant including the Exocompute configurations for the tenant subscriptions, for a specified feature.
    GraphQL operation: azureCloudAccountTenantWithExoConfigs(,   tenantId: UUID!,   feature: CloudAccountFeature!,   subscriptionStatusFilters: [CloudAccountStatus!]!,   subscriptionSearchText: String!,   subscriptionIdsFilter: [UUID!], ):AzureCloudAccountTenantWithExoConfigs!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -allCloudAccountTenant
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -allCloudAccountTenant -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -allCloudAccountTenant${nl}${nl}" @"
    Retrieves a list of all the Azure tenants and tenant subscriptions for features. The list can be filtered by feature status, subscription native ID, and subscription name.
    GraphQL operation: allAzureCloudAccountTenants(features: [CloudAccountFeature!], feature: CloudAccountFeature!, includeSubscriptionDetails: Boolean!):[AzureCloudAccountTenant!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -CloudAccountSubscriptionWithFeature
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -CloudAccountSubscriptionWithFeature -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -CloudAccountSubscriptionWithFeature${nl}${nl}" @"
    Retrieves the details of the Azure cloud account.
    GraphQL operation: azureCloudAccountSubscriptionWithFeatures(cloudAccountId: UUID!):AzureCloudAccountSubscriptionWithFeatures!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -allCloudAccountSubscriptionsByFeature
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -allCloudAccountSubscriptionsByFeature -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -allCloudAccountSubscriptionsByFeature${nl}${nl}" @"
    Retrieves a list of all Azure Subscriptions with feature details such as feature, status, and regions.
    GraphQL operation: allAzureCloudAccountSubscriptionsByFeature(feature: CloudAccountFeature!, subscriptionStatusFilters: [CloudAccountStatus!]!):[AzureSubscriptionWithFeaturesType!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -allSubscriptionWithExocomputeMapping
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -allSubscriptionWithExocomputeMapping -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -allSubscriptionWithExocomputeMapping${nl}${nl}" @"
    Retrieves a list of all Azure subscriptions with Exocompute subscription mapping.
    GraphQL operation: allAzureSubscriptionWithExocomputeMappings(features: [CloudAccountFeature!], exocomputeSubscriptionIdsFilter: [UUID!]):[AzureSubscriptionWithExocomputeMapping!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -allResourceGroupsFrom
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -allResourceGroupsFrom -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -allResourceGroupsFrom${nl}${nl}" @"
    Retrieves a list og all resource groups in the specified account.
    GraphQL operation: allResourceGroupsFromAzure(cloudAccountId: UUID!, azureSubscriptionNativeId: UUID!, feature: CloudAccountFeature!):[AzureResourceGroup!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -doesNativeResourceGroupExist
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -doesNativeResourceGroupExist -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -doesNativeResourceGroupExist${nl}${nl}" @"
    Checks if a resource group with the specified name exists in the specified account.
    GraphQL operation: doesAzureNativeResourceGroupExist(,   cloudAccountId: UUID!,   azureSubscriptionNativeId: UUID!,   resourceGroupName: String!,   feature: CloudAccountFeature!, ):Boolean!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -allNativeResourceGroupsInfoIfExist
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -allNativeResourceGroupsInfoIfExist -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -allNativeResourceGroupsInfoIfExist${nl}${nl}" @"
    Retrieves a list of resource groups with the specified names which exist in the specified account.
    GraphQL operation: allAzureNativeResourceGroupsInfoIfExist(input: AzureGetResourceGroupsInfoIfExistInput!):[AzureResourceGroupInfo!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -allCloudAccountMissingPermission
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -allCloudAccountMissingPermission -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -allCloudAccountMissingPermission${nl}${nl}" @"
    Retrieves a list of all the missing permissions on Azure subscriptions that are a part of the Azure Cloud Account.
    GraphQL operation: allAzureCloudAccountMissingPermissions(sessionId: String!, subscriptionIds: [UUID!]!, cloudAccountAction: CloudAccountAction!):[AzureSubscriptionMissingPermissions!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -CloudAccountPermissionConfig
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -CloudAccountPermissionConfig -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -CloudAccountPermissionConfig${nl}${nl}" @"
    Retrieves the configuration consisting of role permissions and feature policy version required for Azure subscription setup. Features refer to the Polaris features that the customer wants to be enabled on the cloud account.
    GraphQL operation: azureCloudAccountPermissionConfig(feature: CloudAccountFeature!):AzureCloudAccountPermissionConfigResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -allExocomputeConfigsInAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -allExocomputeConfigsInAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -allExocomputeConfigsInAccount${nl}${nl}" @"
    Retrieves a list of Azure Exocompute configurations filtered by a cloud account ID or a search query.
    GraphQL operation: allAzureExocomputeConfigsInAccount(azureExocomputeSearchQuery: String, cloudAccountIDs: [UUID!]):[AzureExocomputeConfigsInAccount!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -allCloudAccountSubnetsByRegion
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -allCloudAccountSubnetsByRegion -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -allCloudAccountSubnetsByRegion${nl}${nl}" @"
    Retrieves all subnets in the specified region and subscription. Subnets allow you to choose IP address range of your choice. For more information, see https://docs.microsoft.com/en-us/azure/virtual-network/network-overview#virtual-network-and-subnets.
    GraphQL operation: allAzureCloudAccountSubnetsByRegion(cloudAccountId: UUID!, region: AzureCloudAccountRegion!):[AzureNativeSubnet!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -validateCloudAccountExocomputeConfiguration
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -validateCloudAccountExocomputeConfiguration -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -validateCloudAccountExocomputeConfiguration${nl}${nl}" @"
    Validates if Azure subnets are correctly configured for running Azure Kubernetes Service (AKS) Clusters. When correctly configured, the Azure subnets allow the required region-specific outbound connectivity and do not overlap with Azure restricted IP Address Space.
    GraphQL operation: validateAzureCloudAccountExocomputeConfigurations(input: ValidateAzureCloudAccountExocomputeConfigurationsInput!):ValidateAzureSubnetsForCloudAccountExocomputeReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -allArmTemplatesByFeature
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -allArmTemplatesByFeature -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -allArmTemplatesByFeature${nl}${nl}" @"
    Retrieve ARM templates for role definition and role assignment.
    GraphQL operation: allAzureArmTemplatesByFeature(input: AzureArmTemplatesByFeatureInput!):[AzureArmTemplateByFeature!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -Subscription
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -Subscription -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -Subscription${nl}${nl}" @"
    Gets the subscriptions for the given Azure tenant.
    GraphQL operation: azureSubscriptions(tenantId: String!):AzureSubscriptionConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -Region
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -Region -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -Region${nl}${nl}" @"
    Gets the Azure regions for the given subscription.
    GraphQL operation: azureRegions(tenantId: String!, subscriptionId: UUID!):RegionConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -ResourceGroup
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -ResourceGroup -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -ResourceGroup${nl}${nl}" @"
    Gets the Azure resource groups for the given subscription.
    GraphQL operation: azureResourceGroups(tenantId: String!, subscriptionId: UUID!):ResourceGroupConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -VNet
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -VNet -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -VNet${nl}${nl}" @"
    Gets the VNets for the given subscription.
    GraphQL operation: azureVNets(tenantId: String!, subscriptionId: UUID!, regionName: String!):VnetConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -Subnet
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -Subnet -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -Subnet${nl}${nl}" @"
    Gets the subnets for the given subscription.
    GraphQL operation: azureSubnets(tenantId: String!, subscriptionId: UUID!, vNetId: String!):SubnetConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -StorageAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -StorageAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -StorageAccount${nl}${nl}" @"
    Gets the storage accounts for the given subscription.
    GraphQL operation: azureStorageAccounts(tenantId: String!, subscriptionId: UUID!, regionName: String!):StorageAccountConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -allHostedRegion
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -allHostedRegion -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -allHostedRegion${nl}${nl}" @"
    Lists all Azure regions supported by the Rubrik-Hosted SaaS protection.
    GraphQL operation: allHostedAzureRegions:AzureRegionsResp!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -allResourceGroup
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -allResourceGroup -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -allResourceGroup${nl}${nl}" @"
    Get resource groups for a service principal in Azure.
    GraphQL operation: allAzureResourceGroups(cloudAccountId: String!, azureRegion: String!):[String!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -allVnet
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -allVnet -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -allVnet${nl}${nl}" @"
    Get VNets for a given account in Azure.
    GraphQL operation: allAzureVnets(vnetRequest: AzureVnetReq!):[String!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -allSubnet
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -allSubnet -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -allSubnet${nl}${nl}" @"
    Get subnets for a given account in Azure.
    GraphQL operation: allAzureSubnets(subnetRequest: AzureSubnetReq!):[String!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -allCdmVersion
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -allCdmVersion -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -allCdmVersion${nl}${nl}" @"
    Get all Rubrik CDM versions in the Azure marketplace.
    GraphQL operation: allAzureCdmVersions(cdmVersionRequest: AzureCdmVersionReq!):[AzureCdmVersion!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -allRegion
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -allRegion -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -allRegion${nl}${nl}" @"
    Get all available regions for Azure.
    GraphQL operation: allAzureRegions(cloudAccountId: String!):[AzureCloudAccountRegion!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -allNsg
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -allNsg -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -allNsg${nl}${nl}" @"
    Get all available network security groups for Azure.
    GraphQL operation: allAzureNsgs(nsgRequest: AzureNsgRequest!):[String!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -allStorageAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -allStorageAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -allStorageAccount${nl}${nl}" @"
    List all storage accounts from Azure.
    GraphQL operation: allAzureStorageAccounts(storageAccountsRequest: AzureStorageAccountsReq!):[String!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -AdDirectorie
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -AdDirectorie -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -AdDirectorie${nl}${nl}" @"
    All Azure AD directories for the account.
    GraphQL operation: azureAdDirectories(,   first: Int,   after: String,   sortBy: HierarchySortByField,   sortOrder: SortOrder,   filter: [Filter!], ):AzureAdDirectoryConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -AdDirectory
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -AdDirectory -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzure -AdDirectory${nl}${nl}" @"
    Details of the Azure AD corresponds to the workload ID.
    GraphQL operation: azureAdDirectory(workloadFid: UUID!):AzureAdDirectory!
"@ "${nl}Field type: ${fieldTypeName}"



# -------------------------------------------------------------------
# Invoke-RscQueryAzureO365 -Exocompute
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzureO365 -Exocompute -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzureO365 -Exocompute${nl}${nl}" @"
    Gets the exocompute details of the given cluster.
    GraphQL operation: azureO365Exocompute(orgId: UUID!, exocomputeClusterId: String!):GetAzureO365ExocomputeResp!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzureO365 -CheckStorageAccountName
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzureO365 -CheckStorageAccountName -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzureO365 -CheckStorageAccountName${nl}${nl}" @"
    Checks the storage account name.
    GraphQL operation: azureO365CheckStorageAccountName(tenantId: String!, subscriptionId: UUID!, storage_account_name: String!):AzureResourceAvailabilityResp!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzureO365 -CheckStorageAccountAccessibility
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzureO365 -CheckStorageAccountAccessibility -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzureO365 -CheckStorageAccountAccessibility${nl}${nl}" @"
    Checks the accessibility of the storage account.
    GraphQL operation: azureO365CheckStorageAccountAccessibility(,   tenantId: String!,   subscriptionId: UUID!,   storage_account_name: String!,   groupName: String!, ):AzureResourceAvailabilityResp!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzureO365 -CheckSubscriptionQuota
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzureO365 -CheckSubscriptionQuota -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzureO365 -CheckSubscriptionQuota${nl}${nl}" @"
    Checks the Azure subscription quota.
    GraphQL operation: azureO365CheckSubscriptionQuota(tenantId: String!, subscriptionId: UUID!, regionName: String!):AzureResourceAvailabilityResp!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzureO365 -CheckResourceGroupName
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzureO365 -CheckResourceGroupName -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzureO365 -CheckResourceGroupName${nl}${nl}" @"
    Checks the resource group name.
    GraphQL operation: azureO365CheckResourceGroupName(tenantId: String!, subscriptionId: UUID!, groupName: String!):AzureResourceAvailabilityResp!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzureO365 -CheckVirtualNetworkName
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzureO365 -CheckVirtualNetworkName -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzureO365 -CheckVirtualNetworkName${nl}${nl}" @"
    Checks the virtual network name.
    GraphQL operation: azureO365CheckVirtualNetworkName(,   tenantId: String!,   subscriptionId: UUID!,   groupName: String!,   vnet_name: String!, ):AzureResourceAvailabilityResp!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzureO365 -ValidateUserRole
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzureO365 -ValidateUserRole -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzureO365 -ValidateUserRole${nl}${nl}" @"
    Validates the user roles in the subscription.
    GraphQL operation: azureO365ValidateUserRoles(tenantId: String!, subscriptionId: UUID!):AzureUserRoleResp!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzureO365 -CheckNSGOutboundRule
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzureO365 -CheckNSGOutboundRule -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzureO365 -CheckNSGOutboundRule${nl}${nl}" @"
    Checks the NSG Outbound rules of the Azure resources.
    GraphQL operation: azureO365CheckNSGOutboundRules(,   tenantId: String!,   subscriptionId: UUID!,   resourceGroupName: String!,   vnet_name: String!,   subnet_name: String!, ):AzureNetworkSecurityGroupResp!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzureO365 -CheckNetworkSubnet
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzureO365 -CheckNetworkSubnet -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzureO365 -CheckNetworkSubnet${nl}${nl}" @"
    Checks the network subnet of the Azure resources.
    GraphQL operation: azureO365CheckNetworkSubnet(,   tenantId: String!,   subscriptionId: UUID!,   resourceGroupName: String!,   vnet_name: String!,   subnet_name: String!,   strict_addr_check: Boolean!, ):AzureNetworkSubnetResp!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzureO365 -GetNetworkSubnetUnusedAddr
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzureO365 -GetNetworkSubnetUnusedAddr -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzureO365 -GetNetworkSubnetUnusedAddr${nl}${nl}" @"
    Retrieves the unused addresses available in a subnet.
    GraphQL operation: azureO365GetNetworkSubnetUnusedAddr(,   tenantId: String!,   subscriptionId: UUID!,   resourceGroupName: String!,   vnet_name: String!,   subnet_name: String!,   strict_addr_check: Boolean!, ):AzureNetworkSubnetUnusedAddrResp!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryAzureO365 -GetAzureHostType
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzureO365 -GetAzureHostType -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryAzureO365 -GetAzureHostType${nl}${nl}" @"
    Retrieves the AzureHostType of the account.
    GraphQL operation: azureO365GetAzureHostType:GetAzureHostTypeResp!
"@ "${nl}Field type: ${fieldTypeName}"



# -------------------------------------------------------------------
# Invoke-RscQueryCassandra -Source
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCassandra -Source -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryCassandra -Source${nl}${nl}" @"
    Paginated list of cassandra sources.
    GraphQL operation: cassandraSources(,   first: Int,   after: String,   sortBy: HierarchySortByField,   sortOrder: SortOrder,   filter: [Filter!], ):CassandraSourceConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryCassandra -Keyspace
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCassandra -Keyspace -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryCassandra -Keyspace${nl}${nl}" @"
    Paginated list of cassandra keyspaces.
    GraphQL operation: cassandraKeyspaces(,   first: Int,   after: String,   sortBy: HierarchySortByField,   sortOrder: SortOrder,   filter: [Filter!], ):CassandraKeyspaceConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryCassandra -ColumnFamily
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCassandra -ColumnFamily -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryCassandra -ColumnFamily${nl}${nl}" @"
    Paginated list of cassandra column families.
    GraphQL operation: cassandraColumnFamilies(,   first: Int,   after: String,   sortBy: HierarchySortByField,   sortOrder: SortOrder,   filter: [Filter!], ):CassandraColumnFamilyConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryCassandra -ColumnFamilyRecoverableRange
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCassandra -ColumnFamilyRecoverableRange -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryCassandra -ColumnFamilyRecoverableRange${nl}${nl}" @"
    Get Recoverable Range of a Cassandra Column Family.
    GraphQL operation: cassandraColumnFamilyRecoverableRange(input: GetMosaicRecoverableRangeInput!):GetMosaicRecoverableRangeResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryCassandra -ColumnFamilySchema
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCassandra -ColumnFamilySchema -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryCassandra -ColumnFamilySchema${nl}${nl}" @"
    Get Schema of a Cassandra Column Family.
    GraphQL operation: cassandraColumnFamilySchema(input: GetMosaicTableSchemaInput!):GetSchemaResponse!
"@ "${nl}Field type: ${fieldTypeName}"



# -------------------------------------------------------------------
# Invoke-RscQueryCluster -Cloud
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -Cloud -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryCluster -Cloud${nl}${nl}" @"
    List of Cloud Clusters with cloud information.
    GraphQL operation: allCloudClusters(cloudVendorType: CcpVendorType!):[CcWithCloudInfo!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -Node
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -Node -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryCluster -Node${nl}${nl}" @"
    Get list of nodes in this Rubrik cluster

Supported in v5.0+
Returns the list of all Rubrik nodes.
    GraphQL operation: clusterNodes(input: GetNodesInput!):NodeStatusListResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -List
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -List -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryCluster -List${nl}${nl}" @"
    List of the available cluster objects.
    GraphQL operation: clusterConnection(,   first: Int,   after: String,   last: Int,   before: String,   filter: ClusterFilterInput,   sortOrder: SortOrder = DESC,   sortBy: ClusterSortByEnum = ClusterType, ):ClusterConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -Cluster
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -Cluster -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryCluster -Cluster${nl}${nl}" @"
    A cluster object.
    GraphQL operation: cluster(clusterUuid: UUID!):Cluster!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -WithUpgradesInfo
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -WithUpgradesInfo -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryCluster -WithUpgradesInfo${nl}${nl}" @"
    
    GraphQL operation: clusterWithUpgradesInfo(,   first: Int,   after: String,   last: Int,   before: String,   upgradeFilter: CdmUpgradeInfoFilterInput,   sortOrder: SortOrder = DESC,   sortBy: UpgradeInfoSortByEnum = ClusterType, ):ClusterConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -Dns
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -Dns -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryCluster -Dns${nl}${nl}" @"
    Rubrik cluster DNS information.
    GraphQL operation: clusterDns(clusterUuid: UUID!):ClusterDnsReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -Proxy
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -Proxy -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryCluster -Proxy${nl}${nl}" @"
    Rubrik cluster proxy information.
    GraphQL operation: clusterProxy(clusterUuid: UUID!):ClusterProxyReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -NtpServer
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -NtpServer -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryCluster -NtpServer${nl}${nl}" @"
    Get NTP Servers

Supported in v5.0+
Retrieve a list of the NTP servers assigned to the Rubrik cluster. Encryption keys are not reported.
    GraphQL operation: clusterNtpServers(input: GetClusterNtpServersInput!):NtpServerConfigurationListResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -NetworkInterface
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -NetworkInterface -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryCluster -NetworkInterface${nl}${nl}" @"
    Get network interfaces for a Rubrik Cluster cluster

Supported in v5.0+
Retrieves network interfaces(including VLANs) on bond0/bond1.
    GraphQL operation: clusterNetworkInterfaces(input: GetNetworkInterfaceInput!):NetworkInterfaceListResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -FloatingIp
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -FloatingIp -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryCluster -FloatingIp${nl}${nl}" @"
    Get a list of a cluster's always-available Ips

Supported in v5.0+
Get a list of a cluster's always-available Ips.
    GraphQL operation: clusterFloatingIps(input: GetClusterIpsInput!):InternalGetClusterIpsResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -Vlan
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -Vlan -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryCluster -Vlan${nl}${nl}" @"
    Rubrik cluster VLAN information.
    GraphQL operation: clusterVlans(input: GetVlanInput!):VlanConfigListResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -DefaultGateway
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -DefaultGateway -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryCluster -DefaultGateway${nl}${nl}" @"
    Get current default gateway

Supported in v5.0+
Get current default gateway.
    GraphQL operation: clusterDefaultGateway(input: GetDefaultGatewayInput!):InternalGetDefaultGatewayResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -WebSignedCertificate
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -WebSignedCertificate -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryCluster -WebSignedCertificate${nl}${nl}" @"
    Get the signed certificate for Web server

Supported in v5.2+
If the web server uses a signed certificate, fetch it.
    GraphQL operation: clusterWebSignedCertificate(input: ClusterWebSignedCertificateInput!):ClusterWebSignedCertificateReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -Ipmi
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -Ipmi -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryCluster -Ipmi${nl}${nl}" @"
    Get IPMI details

Supported in v5.0+
get IPMI details of availability and enabled access in the cluster.
    GraphQL operation: clusterIpmi(input: GetIpmiInput!):ModifyIpmiReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -Certificate
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -Certificate -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryCluster -Certificate${nl}${nl}" @"
    Get all certificates

Supported in v5.1+
Get all certificates.
    GraphQL operation: clusterCertificates(input: QueryCertificatesInput!):CertificateSummaryListResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -WebCertsAndIpmi
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -WebCertsAndIpmi -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryCluster -WebCertsAndIpmi${nl}${nl}" @"
    Get web server certificate and IPMI details for multiple clusters.
    GraphQL operation: allClusterWebCertsAndIpmis(input: BulkClusterWebCertAndIpmiInput!):[ClusterWebCertAndIpmi!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -OperationJobProgress
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -OperationJobProgress -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryCluster -OperationJobProgress${nl}${nl}" @"
    Get updates on the job progress of the Rubrik cluster operation.
    GraphQL operation: clusterOperationJobProgress(input: ClusterOperationJobProgressInput!):ClusterOperationJobProgress!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -Ipv6Mode
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -Ipv6Mode -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryCluster -Ipv6Mode${nl}${nl}" @"
    Rubrik cluster IPv6 mode.
    GraphQL operation: clusterIpv6Mode(input: ClusterIpv6ModeInput!):ClusterIpv6ModeReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -Csr
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -Csr -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryCluster -Csr${nl}${nl}" @"
    Get the cluster certificate signing request

Supported in v7.0+
Returns the certificate signing request generated from the private key of the Rubrik cluster.
    GraphQL operation: clusterCsr(input: GetClusterCsrInput!):ClusterCsr!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -TypeList
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -TypeList -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryCluster -TypeList${nl}${nl}" @"
    
    GraphQL operation: clusterTypeList:[GroupCount!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -GroupByList
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -GroupByList -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryCluster -GroupByList${nl}${nl}" @"
    
    GraphQL operation: clusterGroupByConnection(,   first: Int,   after: String,   last: Int,   before: String,   groupBy: ClusterGroupByEnum!,   filter: ClusterFilterInput,   timezoneOffset: Float = 0.0, ):ClusterGroupByConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -WithConfigProtectionInfo
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -WithConfigProtectionInfo -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryCluster -WithConfigProtectionInfo${nl}${nl}" @"
    A cluster object with config protection information.
    GraphQL operation: clusterWithConfigProtectionInfo(,   first: Int,   after: String,   last: Int,   before: String,   configProtectionFilter: ConfigProtectionInfoFilterInput,   sortOrder: SortOrder = DESC,   sortBy: ConfigProtectionInfoSortBy = CLUSTER_NAME, ):ClusterConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -RcvLocation
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -RcvLocation -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryCluster -RcvLocation${nl}${nl}" @"
    List Rubrik Cloud Vault locations of the cluster.
    GraphQL operation: clusterRcvLocations(,   first: Int,   after: String,   last: Int,   before: String,   sortOrder: SortOrder,   cdmClusterUUID: UUID!, ):RcvLocationBasicInfoConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -Connected
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -Connected -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryCluster -Connected${nl}${nl}" @"
    List all connected clusters.
    GraphQL operation: allConnectedClusters(clusterFilterArg: ClusterTypeEnum):[DataLocationSupportedCluster!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -ReplicationTarget
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -ReplicationTarget -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryCluster -ReplicationTarget${nl}${nl}" @"
    All replication targets for a cluster.
    GraphQL operation: allClusterReplicationTargets(clusterUuid: UUID!):[ClusterReplicationTarget!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -EncryptionInfo
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -EncryptionInfo -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryCluster -EncryptionInfo${nl}${nl}" @"
    Filter clusters by encryption information.
    GraphQL operation: clusterEncryptionInfo(,   first: Int,   after: String,   last: Int,   before: String,   sortOrder: SortOrder,   clusterName: String,   encryptionStatusFilter: [ClusterEncryptionStatusFilter!]! = [],   keyProtection: [ClusterKeyProtection!]! = [],   clusters: [UUID!]! = [],   encryptionTypes: [ClusterEncryptionType!]! = [], ):ClusterEncryptionInfoConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -HostFailover
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -HostFailover -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryCluster -HostFailover${nl}${nl}" @"
    Get details of the given host failover cluster.
    GraphQL operation: hostFailoverCluster(fid: UUID!):HostFailoverCluster!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -GlobalFileSearchMultiple
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -GlobalFileSearchMultiple -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryCluster -GlobalFileSearchMultiple${nl}${nl}" @"
    All files and folders matching input filters.
    GraphQL operation: allGlobalFileSearchMultipleClusters(clusters: [UUID!]! = [], regex: String!):GlobalFileSearchReplyType!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -K8s
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -K8s -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryCluster -K8s${nl}${nl}" @"
    
    GraphQL operation: k8sClusters(,   first: Int,   after: String,   sortBy: HierarchySortByField,   sortOrder: SortOrder,   filter: [Filter!], ):K8sClusterConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -Window
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -Window -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryCluster -Window${nl}${nl}" @"
    A Windows Cluster.
    GraphQL operation: windowsCluster(fid: UUID!):WindowsCluster!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -laDomainList
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -laDomainList -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryCluster -laDomainList${nl}${nl}" @"
    
    GraphQL operation: clusterSlaDomainConnection(,   first: Int,   after: String,   last: Int,   before: String, ):ClusterSlaDomainConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -laDomainFilterList
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -laDomainFilterList -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryCluster -laDomainFilterList${nl}${nl}" @"
    
    GraphQL operation: clusterSlaDomainFilterConnection(,   first: Int,   after: String,   last: Int,   before: String, ):ClusterSlaDomainForFilterConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -VerifySlaWithReplicationTo
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -VerifySlaWithReplicationTo -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryCluster -VerifySlaWithReplicationTo${nl}${nl}" @"
    
    GraphQL operation: verifySLAWithReplicationToCluster(cdmClusterUUID: UUID!, includeArchived: Boolean!):VerifySLAWithReplicationToClusterResp!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -GlobalSla
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -GlobalSla -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryCluster -GlobalSla${nl}${nl}" @"
    Global SLA Domains protecting at least one object on the specified Rubrik cluster.
    GraphQL operation: allClusterGlobalSlas(cdmClusterUUID: UUID!):[SlaInfo!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -RegistrationProductInfo
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -RegistrationProductInfo -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryCluster -RegistrationProductInfo${nl}${nl}" @"
    Info about the cluster product types the user is entitled to.
    GraphQL operation: clusterRegistrationProductInfo:ClusterRegistrationProductInfoType!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -Vcd
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -Vcd -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryCluster -Vcd${nl}${nl}" @"
    List of vCloud Director clusters.
    GraphQL operation: vcdClusters(input: QueryVcdClusterInput!):VcdClusterSummaryListResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -isTotpAckNecessary
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -isTotpAckNecessary -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryCluster -isTotpAckNecessary${nl}${nl}" @"
    Checks whether acknowledgement of the Time-based, One-Time Password (TOTP) mandate is required for upgrading the Rubrik cluster version.
    GraphQL operation: isTotpAckNecessaryForCluster(clusterUuid: UUID!):Boolean!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -TotpAckStatus
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -TotpAckStatus -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryCluster -TotpAckStatus${nl}${nl}" @"
    Checks whether acknowledgement of the Time-based, One-Time Password (TOTP) mandate is required for upgrading the Rubrik cluster version.
    GraphQL operation: allClustersTotpAckStatus(listClusterUuid: [UUID!]!):[Boolean!]!
"@ "${nl}Field type: ${fieldTypeName}"



# -------------------------------------------------------------------
# Invoke-RscQueryHyperv -TopLevelDescendant
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryHyperv -TopLevelDescendant -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryHyperv -TopLevelDescendant${nl}${nl}" @"
    Paginated list of the highest-level HyperV Objects accessible by the current user.
    GraphQL operation: hypervTopLevelDescendants(,   first: Int,   after: String,   sortBy: HierarchySortByField,   sortOrder: SortOrder,   typeFilter: [HierarchyObjectTypeEnum!],   filter: [Filter!], ):HypervTopLevelDescendantTypeConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryHyperv -VirtualMachine
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryHyperv -VirtualMachine -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryHyperv -VirtualMachine${nl}${nl}" @"
    Paginated list of HyperV Virtual Machines.
    GraphQL operation: hypervVirtualMachines(,   first: Int,   after: String,   sortBy: HierarchySortByField,   sortOrder: SortOrder,   filter: [Filter!], ):HyperVVirtualMachineConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryHyperv -Scvmm
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryHyperv -Scvmm -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryHyperv -Scvmm${nl}${nl}" @"
    Details of the given Hyper-V SCVMM.
    GraphQL operation: hypervScvmm(fid: UUID!):HyperVSCVMM!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryHyperv -Cluster
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryHyperv -Cluster -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryHyperv -Cluster${nl}${nl}" @"
    Details of the given Hyper-V Cluster.
    GraphQL operation: hypervCluster(fid: UUID!):HyperVCluster!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryHyperv -Server
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryHyperv -Server -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryHyperv -Server${nl}${nl}" @"
    Details of the given Hyper-V Server.
    GraphQL operation: hypervServer(fid: UUID!):HypervServer!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryHyperv -uniqueServersCount
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryHyperv -uniqueServersCount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryHyperv -uniqueServersCount${nl}${nl}" @"
    Count of unique HyperV Servers.
    GraphQL operation: uniqueHypervServersCount(filter: [Filter!]):Int!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryHyperv -Mount
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryHyperv -Mount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryHyperv -Mount${nl}${nl}" @"
    HyperV Live Mount Connection.
    GraphQL operation: hypervMounts(,   first: Int,   after: String,   filters: [HypervLiveMountFilterInput!],   sortBy: HypervLiveMountSortByInput, ):HyperVLiveMountConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryHyperv -VmDetail
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryHyperv -VmDetail -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryHyperv -VmDetail${nl}${nl}" @"
    HyperV Virtual Machine detail from CDM.
    GraphQL operation: hypervVmDetail(input: GetHypervVirtualMachineInput!):HypervVirtualMachineDetail!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryHyperv -HostAsyncRequestStatus
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryHyperv -HostAsyncRequestStatus -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryHyperv -HostAsyncRequestStatus${nl}${nl}" @"
    Get Hyper-V host async request

Supported in v5.0+
Get details about a Hyper-V host related async request.
    GraphQL operation: hypervHostAsyncRequestStatus(input: GetHypervHostAsyncRequestStatusInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryHyperv -ScvmmAsyncRequestStatus
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryHyperv -ScvmmAsyncRequestStatus -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryHyperv -ScvmmAsyncRequestStatus${nl}${nl}" @"
    Get Hyper-V SCVMM async request

Supported in v5.0+
Get details about a Hyper-V SCVMM related async request.
    GraphQL operation: hypervScvmmAsyncRequestStatus(input: GetHypervScvmmAsyncRequestStatusInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryHyperv -VirtualMachineAsyncRequestStatus
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryHyperv -VirtualMachineAsyncRequestStatus -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryHyperv -VirtualMachineAsyncRequestStatus${nl}${nl}" @"
    Get VM async request details

Supported in v5.0+
Get details about a Hyper-V vm related async request.
    GraphQL operation: hypervVirtualMachineAsyncRequestStatus(input: GetHypervVirtualMachineAsyncRequestStatusInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"



# -------------------------------------------------------------------
# Invoke-RscQueryLdap -IntegrationList
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryLdap -IntegrationList -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryLdap -IntegrationList${nl}${nl}" @"
    Browse LDAP integrations.
    GraphQL operation: ldapIntegrationConnection(,   first: Int,   after: String,   last: Int,   before: String,   sortOrder: SortOrder,   sortBy: LdapIntegrationFieldEnum = Name, ):LdapIntegrationConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryLdap -PrincipalList
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryLdap -PrincipalList -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryLdap -PrincipalList${nl}${nl}" @"
    Search LDAP Principals.
    GraphQL operation: ldapPrincipalConnection(,   first: Int,   after: String,   last: Int,   before: String,   sortOrder: SortOrder,   sortBy: LdapPrincipalFieldEnum = Name,   id: UUID!,   searchText: String!, ):PrincipalConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryLdap -AuthorizedPrincipalList
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryLdap -AuthorizedPrincipalList -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryLdap -AuthorizedPrincipalList${nl}${nl}" @"
    Browse LDAP-authorized principals.
    GraphQL operation: ldapAuthorizedPrincipalConnection(,   first: Int,   after: String,   last: Int,   before: String,   sortOrder: SortOrder,   sortBy: LdapAuthorizedPrincipalFieldEnum = Name,   searchText: String!,   roleIds: [UUID!], ):AuthorizedPrincipalConnection!
"@ "${nl}Field type: ${fieldTypeName}"



# -------------------------------------------------------------------
# Invoke-RscQueryMongo -Source
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMongo -Source -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryMongo -Source${nl}${nl}" @"
    Paginated list of MongoDB sources.
    GraphQL operation: mongoSources(,   first: Int,   after: String,   sortBy: HierarchySortByField,   sortOrder: SortOrder,   filter: [Filter!], ):MongoSourceConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryMongo -Database
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMongo -Database -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryMongo -Database${nl}${nl}" @"
    Paginated list of MongoDB databases.
    GraphQL operation: mongoDatabases(,   first: Int,   after: String,   sortBy: HierarchySortByField,   sortOrder: SortOrder,   filter: [Filter!], ):MongoDatabaseConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryMongo -Collection
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMongo -Collection -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryMongo -Collection${nl}${nl}" @"
    Paginated list of MongoDB collections.
    GraphQL operation: mongoCollections(,   first: Int,   after: String,   sortBy: HierarchySortByField,   sortOrder: SortOrder,   filter: [Filter!], ):MongoCollectionConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryMongo -RecoverableRange
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMongo -RecoverableRange -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryMongo -RecoverableRange${nl}${nl}" @"
    Provides the range for recovery of MongoDB objects.
    GraphQL operation: mongoRecoverableRanges(input: RecoverableRangeInput!):MongoRecoverableRanges!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryMongo -dbSource
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMongo -dbSource -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryMongo -dbSource${nl}${nl}" @"
    Paginated list of MongoDB sources on NoSQL cluster.
    GraphQL operation: mongodbSources(,   first: Int,   after: String,   sortBy: HierarchySortByField,   sortOrder: SortOrder,   filter: [Filter!], ):MongodbSourceConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryMongo -dbDatabase
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMongo -dbDatabase -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryMongo -dbDatabase${nl}${nl}" @"
    Paginated list of MongoDB databases on NoSQL cluster.
    GraphQL operation: mongodbDatabases(,   first: Int,   after: String,   sortBy: HierarchySortByField,   sortOrder: SortOrder,   filter: [Filter!], ):MongodbDatabaseConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryMongo -dbCollection
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMongo -dbCollection -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryMongo -dbCollection${nl}${nl}" @"
    Paginated list of MongoDB collections on NoSQL cluster.
    GraphQL operation: mongodbCollections(,   first: Int,   after: String,   sortBy: HierarchySortByField,   sortOrder: SortOrder,   filter: [Filter!], ):MongodbCollectionConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryMongo -dbCollectionRecoverableRange
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMongo -dbCollectionRecoverableRange -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryMongo -dbCollectionRecoverableRange${nl}${nl}" @"
    Recoverable Range of a MongoDB collection on NoSQL cluster.
    GraphQL operation: mongodbCollectionRecoverableRange(input: GetMosaicRecoverableRangeInput!):GetMosaicRecoverableRangeResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryMongo -dbBulkRecoverableRange
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMongo -dbBulkRecoverableRange -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryMongo -dbBulkRecoverableRange${nl}${nl}" @"
    Recoverable range for multiple Management Objects on NoSQL cluster.
    GraphQL operation: mongodbBulkRecoverableRange(input: MosaicBulkRecoveryRangeInput!):MosaicRecoveryRangeResponse!
"@ "${nl}Field type: ${fieldTypeName}"



# -------------------------------------------------------------------
# Invoke-RscQueryMssql -TopLevelDescendant
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMssql -TopLevelDescendant -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryMssql -TopLevelDescendant${nl}${nl}" @"
    Paginated list of the highest-level Microsoft SQL Objects accessible by the current user.
    GraphQL operation: mssqlTopLevelDescendants(,   first: Int,   after: String,   sortBy: HierarchySortByField,   sortOrder: SortOrder,   typeFilter: [HierarchyObjectTypeEnum!],   filter: [Filter!], ):MssqlTopLevelDescendantTypeConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryMssql -Database
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMssql -Database -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryMssql -Database${nl}${nl}" @"
    Paginated list of Microsoft SQL Databases.
    GraphQL operation: mssqlDatabases(,   first: Int,   after: String,   sortBy: HierarchySortByField,   sortOrder: SortOrder,   filter: [Filter!], ):MssqlDatabaseConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryMssql -AvailabilityGroup
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMssql -AvailabilityGroup -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryMssql -AvailabilityGroup${nl}${nl}" @"
    A Microsoft SQL Availability Group.
    GraphQL operation: mssqlAvailabilityGroup(fid: UUID!):MssqlAvailabilityGroup!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryMssql -Instance
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMssql -Instance -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryMssql -Instance${nl}${nl}" @"
    A Microsoft SQL Instance.
    GraphQL operation: mssqlInstance(fid: UUID!):MssqlInstance!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryMssql -RecoverableRange
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMssql -RecoverableRange -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryMssql -RecoverableRange${nl}${nl}" @"
    List of recoverable ranges for a Microsoft SQL Database.
    GraphQL operation: mssqlRecoverableRanges(input: GetMssqlDbRecoverableRangesInput!):MssqlRecoverableRangeListResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryMssql -DatabaseMissedSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMssql -DatabaseMissedSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryMssql -DatabaseMissedSnapshot${nl}${nl}" @"
    List of missed snapshots for a Microsoft SQL Database.
    GraphQL operation: mssqlDatabaseMissedSnapshots(input: GetMissedMssqlDbSnapshotsInput!):MissedSnapshotListResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryMssql -CompatibleInstance
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMssql -CompatibleInstance -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryMssql -CompatibleInstance${nl}${nl}" @"
    Returns all compatible instances for export for the specified recovery time.
    GraphQL operation: mssqlCompatibleInstances(input: GetCompatibleMssqlInstancesV1Input!):MssqlInstanceSummaryListResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryMssql -DatabaseMissedRecoverableRange
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMssql -DatabaseMissedRecoverableRange -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryMssql -DatabaseMissedRecoverableRange${nl}${nl}" @"
    List of missed recoverable ranges for a Microsoft SQL Database.
    GraphQL operation: mssqlDatabaseMissedRecoverableRanges(input: GetMssqlDbMissedRecoverableRangesInput!):MssqlMissedRecoverableRangeListResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryMssql -allDatabaseRestoreFile
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMssql -allDatabaseRestoreFile -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryMssql -allDatabaseRestoreFile${nl}${nl}" @"
    Provides a list of database files to be restored for the specified restore or export operation.
    GraphQL operation: allMssqlDatabaseRestoreFiles(input: MssqlGetRestoreFilesV1Input!):V1MssqlGetRestoreFilesV1Response!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryMssql -DatabaseLiveMount
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMssql -DatabaseLiveMount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryMssql -DatabaseLiveMount${nl}${nl}" @"
    Paginated list of Microsoft SQL Database live mounts.
    GraphQL operation: mssqlDatabaseLiveMounts(,   first: Int,   after: String,   sortBy: MssqlDatabaseLiveMountSortByInput,   filters: [MssqlDatabaseLiveMountFilterInput!], ):MssqlDatabaseLiveMountConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryMssql -DefaultPropertie
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMssql -DefaultPropertie -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryMssql -DefaultPropertie${nl}${nl}" @"
    The current default properties for Microsoft SQL databases.
    GraphQL operation: mssqlDefaultProperties(input: GetDefaultDbPropertiesV1Input!):UpdateMssqlDefaultPropertiesReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryMssql -DatabaseRestoreEstimate
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMssql -DatabaseRestoreEstimate -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryMssql -DatabaseRestoreEstimate${nl}${nl}" @"
    Returns a size estimate for a restore, export, or mount.
    GraphQL operation: mssqlDatabaseRestoreEstimate(input: MssqlRestoreEstimateV1Input!):MssqlRestoreEstimateResult!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryMssql -cdmLogShippingTarget
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMssql -cdmLogShippingTarget -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryMssql -cdmLogShippingTarget${nl}${nl}" @"
    Paginated list of Microsoft SQL log shipping target.
    GraphQL operation: cdmMssqlLogShippingTargets(,   first: Int,   after: String,   sortBy: MssqlLogShippingTargetSortByInput,   filters: [MssqlLogShippingTargetFilterInput!], ):MssqlLogShippingTargetConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryMssql -LogShippingTarget
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMssql -LogShippingTarget -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryMssql -LogShippingTarget${nl}${nl}" @"
    List of filtered Microsoft SQL log shipping targets.
    GraphQL operation: mssqlLogShippingTargets(input: QueryLogShippingConfigurationsV2Input!):MssqlLogShippingSummaryV2ListResponse
"@ "${nl}Field type: ${fieldTypeName}"



# -------------------------------------------------------------------
# Invoke-RscQueryNutanix -TopLevelDescendant
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryNutanix -TopLevelDescendant -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryNutanix -TopLevelDescendant${nl}${nl}" @"
    Paginated list of the highest-level Nutanix Objects accessible by the current user.
    GraphQL operation: nutanixTopLevelDescendants(,   first: Int,   after: String,   sortBy: HierarchySortByField,   sortOrder: SortOrder,   typeFilter: [HierarchyObjectTypeEnum!],   filter: [Filter!], ):CdmHierarchyObjectConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryNutanix -TopLevelDescendantsV2
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryNutanix -TopLevelDescendantsV2 -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryNutanix -TopLevelDescendantsV2${nl}${nl}" @"
    Paginated list of the highest-level Nutanix Objects accessible by the current user.
    GraphQL operation: nutanixTopLevelDescendantsV2(,   first: Int,   after: String,   sortBy: HierarchySortByField,   sortOrder: SortOrder,   typeFilter: [HierarchyObjectTypeEnum!],   filter: [Filter!], ):NutanixTopLevelDescendantTypeConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryNutanix -Cluster
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryNutanix -Cluster -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryNutanix -Cluster${nl}${nl}" @"
    A Nutanix Cluster.
    GraphQL operation: nutanixCluster(fid: UUID!):NutanixCluster!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryNutanix -PrismCentral
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryNutanix -PrismCentral -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryNutanix -PrismCentral${nl}${nl}" @"
    Paginated list of Nutanix Prism Central objects.
    GraphQL operation: nutanixPrismCentrals(,   first: Int,   after: String,   sortBy: HierarchySortByField,   sortOrder: SortOrder,   filter: [Filter!], ):NutanixPrismCentralConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryNutanix -Categorie
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryNutanix -Categorie -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryNutanix -Categorie${nl}${nl}" @"
    Paginated list of Nutanix Category objects.
    GraphQL operation: nutanixCategories(,   first: Int,   after: String,   sortBy: HierarchySortByField,   sortOrder: SortOrder,   filter: [Filter!], ):NutanixCategoryConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryNutanix -CategoryValue
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryNutanix -CategoryValue -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryNutanix -CategoryValue${nl}${nl}" @"
    Paginated list of Nutanix Category Value objects.
    GraphQL operation: nutanixCategoryValues(fid: UUID!):NutanixCategoryValueConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryNutanix -CategoryValueVm
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryNutanix -CategoryValueVm -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryNutanix -CategoryValueVm${nl}${nl}" @"
    Paginated list of Nutanix Virtual Machines in a Category Value.
    GraphQL operation: nutanixCategoryValueVms(,   first: Int,   after: String,   sortBy: HierarchySortByField,   sortOrder: SortOrder,   filter: [Filter!], ):NutanixVmConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryNutanix -Vm
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryNutanix -Vm -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryNutanix -Vm${nl}${nl}" @"
    A Nutanix Virtual Machine.
    GraphQL operation: nutanixVm(fid: UUID!):NutanixVm!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryNutanix -Mount
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryNutanix -Mount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryNutanix -Mount${nl}${nl}" @"
    Nutanix Live Mount Connection.
    GraphQL operation: nutanixMounts(,   first: Int,   after: String,   filters: [NutanixLiveMountFilterInput!],   sortBy: NutanixLiveMountSortByInput, ):NutanixLiveMountConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryNutanix -ClusterContainer
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryNutanix -ClusterContainer -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryNutanix -ClusterContainer${nl}${nl}" @"
    Get list of containers on this cluster

Supported in v5.0+
Query the nutanix cluster to get the list of containers, used for export purposes.
    GraphQL operation: nutanixClusterContainers(input: GetContainersInput!):NutanixContainerListResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryNutanix -ClusterNetwork
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryNutanix -ClusterNetwork -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryNutanix -ClusterNetwork${nl}${nl}" @"
    Get list of networks on this cluster

Supported in v8.1+
Retrieves the list of networks by querying the Nutanix cluster. The list of networks is used for restore purposes.
    GraphQL operation: nutanixClusterNetworks(input: GetNutanixNetworksInput!):NutanixNetworkListResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryNutanix -ClusterAsyncRequestStatus
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryNutanix -ClusterAsyncRequestStatus -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryNutanix -ClusterAsyncRequestStatus${nl}${nl}" @"
    Get Nutanix cluster async request

Supported in v5.0+
Get details about a Nutanix cluster-related async request.
    GraphQL operation: nutanixClusterAsyncRequestStatus(input: GetNutanixClusterAsyncRequestStatusInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryNutanix -VmAsyncRequestStatus
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryNutanix -VmAsyncRequestStatus -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryNutanix -VmAsyncRequestStatus${nl}${nl}" @"
    v5.0-v8.0: Get VM async request details
v8.1+: Get virtual machine async request details

Supported in v5.0+
v5.0-v8.0: Get details about a Nutanix VM-related async request.
v8.1+: Get details about a Nutanix virtual machine-related async request.
    GraphQL operation: nutanixVmAsyncRequestStatus(input: GetNutanixVmAsyncRequestStatusInput!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryNutanix -searchVm
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryNutanix -searchVm -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryNutanix -searchVm${nl}${nl}" @"
    v5.0-v8.0: Search for file in Nutanix VM
v8.1+: Search for file in Nutanix virtual machine

Supported in v5.0+
Search for a file within the Nutanix Virtual Machine. Search via full path prefix or filename prefix.
    GraphQL operation: searchNutanixVm(input: SearchNutanixVmInput!):SearchResponseListResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryNutanix -VmMissedSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryNutanix -VmMissedSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryNutanix -VmMissedSnapshot${nl}${nl}" @"
    v5.0-v8.0: Get details about missed snapshots for a VM
v8.1+: Get details about missed snapshots for a virtual machine

Supported in v5.0+
v5.0-v8.0: Retrieve the time of the day when the snapshots were missed specific to a vm.
v8.1+: Retrieve the time of the day when the snapshots were missed specific to a virtual machine.
    GraphQL operation: nutanixVmMissedSnapshots(input: NutanixMissedSnapshotsInput!):MissedSnapshotListResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryNutanix -BrowseSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryNutanix -BrowseSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryNutanix -BrowseSnapshot${nl}${nl}" @"
    v5.0-v8.0: Lists all files in VM snapshot
v8.1+: Lists all files in virtual machine snapshot

Supported in v5.0+
Lists all files and directories in a given path.
    GraphQL operation: nutanixBrowseSnapshot(input: BrowseNutanixSnapshotInput!):BrowseResponseListResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryNutanix -SnapshotDetail
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryNutanix -SnapshotDetail -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryNutanix -SnapshotDetail${nl}${nl}" @"
    Supported in v5.0+. Get Nutanix virtual machine snapshot details.
 Retrieve detailed information about a snapshot.
    GraphQL operation: nutanixSnapshotDetail(input: GetNutanixSnapshotDetailInput!):NutanixVmSnapshotDetail!
"@ "${nl}Field type: ${fieldTypeName}"



# -------------------------------------------------------------------
# Invoke-RscQueryO365 -Org
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -Org -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryO365 -Org${nl}${nl}" @"
    Details of the O365Org.
    GraphQL operation: o365Org(fid: UUID!):O365Org!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -OrgAtSnappableLevel
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -OrgAtSnappableLevel -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryO365 -OrgAtSnappableLevel${nl}${nl}" @"
    Details of the O365Org at snappable level, given the snappable type.
    GraphQL operation: o365OrgAtSnappableLevel(fid: UUID!, snappableType: SnappableType!):O365Org!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -allAdGroup
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -allAdGroup -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryO365 -allAdGroup${nl}${nl}" @"
    All AD Groups belonging to the O365 organization.
    GraphQL operation: allO365AdGroups(orgId: UUID!, adGroupSearchFilter: String!):[AdGroup!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -User
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -User -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryO365 -User${nl}${nl}" @"
    Details for the O365 user corresponding to the ID.
    GraphQL operation: o365User(fid: UUID!):O365User!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -Mailbox
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -Mailbox -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryO365 -Mailbox${nl}${nl}" @"
    Details for the Exchange mailbox corresponding to the snappable ID.
    GraphQL operation: o365Mailbox(snappableFid: UUID!):O365Mailbox!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -Group
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -Group -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryO365 -Group${nl}${nl}" @"
    List of O365 Groups in the O365Org.
    GraphQL operation: o365Groups(,   first: Int,   after: String,   sortBy: HierarchySortByField,   sortOrder: SortOrder,   filter: [Filter!],   o365OrgId: UUID!,   snappableType: SnappableType!, ):O365GroupConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -Mailboxe
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -Mailboxe -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryO365 -Mailboxe${nl}${nl}" @"
    List of Mailboxes in the O365Org.
    GraphQL operation: o365Mailboxes(,   first: Int,   after: String,   sortBy: HierarchySortByField,   sortOrder: SortOrder,   filter: [Filter!],   o365OrgId: UUID!, ):O365MailboxConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -Onedrive
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -Onedrive -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryO365 -Onedrive${nl}${nl}" @"
    Details for the OneDrive corresponding to the snappable ID.
    GraphQL operation: o365Onedrive(snappableFid: UUID!):O365Onedrive!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -Site
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -Site -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryO365 -Site${nl}${nl}" @"
    Details for the SharePoint site corresponding to the snappable ID.
    GraphQL operation: o365Site(snappableFid: UUID!):O365Site!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -SharepointDrive
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -SharepointDrive -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryO365 -SharepointDrive${nl}${nl}" @"
    Details for the SharePoint drive corresponding to the snappable ID.
    GraphQL operation: o365SharepointDrive(snappableFid: UUID!):O365SharepointDrive!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -SharepointList
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -SharepointList -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryO365 -SharepointList${nl}${nl}" @"
    Details for the SharePoint list corresponding to the snappable ID.
    GraphQL operation: o365SharepointList(snappableFid: UUID!):O365SharepointList!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -SharepointSite
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -SharepointSite -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryO365 -SharepointSite${nl}${nl}" @"
    Details for the SharePoint site corresponding to the site ID.
    GraphQL operation: o365SharepointSite(siteFid: UUID!):O365Site!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -Team
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -Team -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryO365 -Team${nl}${nl}" @"
    Details for the team corresponding to the snappable ID.
    GraphQL operation: o365Team(snappableFid: UUID!):O365Teams!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -TeamChannel
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -TeamChannel -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryO365 -TeamChannel${nl}${nl}" @"
    List of Channels for the O365Team.
    GraphQL operation: o365TeamChannels(,   first: Int,   after: String,   snappableFid: UUID!,   excludeArchived: Boolean!,   channelMembershipTypeFilter: ChannelMembershipType!,   nameFilter: String, ):O365TeamsChannelConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -TeamConversationsFolderID
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -TeamConversationsFolderID -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryO365 -TeamConversationsFolderID${nl}${nl}" @"
    ID for the conversations folder in the Team's Group Mailbox.
    GraphQL operation: o365TeamConversationsFolderID(snappableFid: UUID!, snapshotFid: UUID!, o365OrgId: UUID!):String!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -TeamPostedBy
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -TeamPostedBy -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryO365 -TeamPostedBy${nl}${nl}" @"
    Users who have posted in a team.
    GraphQL operation: o365TeamPostedBy(,   first: Int,   after: String,   snappableFid: UUID!,   o365OrgId: UUID!,   nameFilter: String, ):O365TeamConversationsSenderConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -Calendar
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -Calendar -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryO365 -Calendar${nl}${nl}" @"
    Details of the Exchange calendar pertaining to the snappable ID.
    GraphQL operation: o365Calendar(snappableFid: UUID!):O365Calendar!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -SharepointObjectList
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -SharepointObjectList -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryO365 -SharepointObjectList${nl}${nl}" @"
    Returns the sharepoint objects after filtering on the object types and includeEntireHierarchy.
    GraphQL operation: o365SharepointObjectList(,   first: Int,   after: String,   sortBy: HierarchySortByField,   sortOrder: SortOrder,   filter: [Filter!],   objectTypeFilter: [String!],   includeEntireHierarchy: Boolean!,   fid: UUID!, ):O365SharepointObjectConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -SharepointObject
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -SharepointObject -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryO365 -SharepointObject${nl}${nl}" @"
    
    GraphQL operation: o365SharepointObjects(,   first: Int,   after: String,   sortBy: HierarchySortByField,   sortOrder: SortOrder,   filter: [Filter!],   fid: UUID!, ):O365SharepointObjectConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -UserObject
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -UserObject -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryO365 -UserObject${nl}${nl}" @"
    Name, id, object type, and mail address of user descendant object.
    GraphQL operation: o365UserObjects(,   first: Int,   after: String,   sortBy: HierarchySortByField,   sortOrder: SortOrder,   filter: [Filter!],   fid: UUID!, ):O365UserDescendantMetadataConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -OrgSummarie
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -OrgSummarie -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryO365 -OrgSummarie${nl}${nl}" @"
    
    GraphQL operation: o365OrgSummaries:GetImplicitlyAuthorizedObjectSummariesResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -ObjectAncestor
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -ObjectAncestor -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryO365 -ObjectAncestor${nl}${nl}" @"
    
    GraphQL operation: o365ObjectAncestors(snappableFid: UUID!):GetImplicitlyAuthorizedAncestorSummariesResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -browseTeamConvChannel
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -browseTeamConvChannel -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryO365 -browseTeamConvChannel${nl}${nl}" @"
    Browse channels in a Teams conversations snapshot.
    GraphQL operation: browseO365TeamConvChannels(,   first: Int,   after: String,   snappableFid: UUID!,   snapshotFidOpt: UUID,   excludeArchived: Boolean!,   orgId: UUID!,   channelMembershipTypeFilter: ChannelMembershipType!,   nameFilter: String, ):O365TeamConvChannelConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -ServiceAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -ServiceAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryO365 -ServiceAccount${nl}${nl}" @"
    Gets the service account for the given org.
    GraphQL operation: o365ServiceAccount(orgId: UUID!):O365ServiceAccountStatusResp!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -allOrgStatus
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -allOrgStatus -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryO365 -allOrgStatus${nl}${nl}" @"
    Gets the status of each org in the account.
    GraphQL operation: allO365OrgStatuses:[O365OrgInfo!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -License
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -License -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryO365 -License${nl}${nl}" @"
    Retrieve o365 licence details.
    GraphQL operation: o365License:O365License!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -listApp
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -listApp -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryO365 -listApp${nl}${nl}" @"
    Lists the O365 apps.
    GraphQL operation: listO365Apps(,   first: Int,   after: String,   o365AppFilters: [AppFilter!]!,   o365AppSortByParam: AppSortByParam, ):O365AppConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -allSubscriptionsAppTypeCount
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -allSubscriptionsAppTypeCount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryO365 -allSubscriptionsAppTypeCount${nl}${nl}" @"
    Returns the total number of apps of each type, for each O365 org.
    GraphQL operation: allO365SubscriptionsAppTypeCounts:[O365SubscriptionAppTypeCounts!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -StorageStat
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -StorageStat -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryO365 -StorageStat${nl}${nl}" @"
    Returns the storage stats of an O365 org.
    GraphQL operation: o365StorageStats(orgID: UUID):GetO365StorageStatsResp!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -ServiceStatus
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -ServiceStatus -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryO365 -ServiceStatus${nl}${nl}" @"
    Returns the service status of the O365 service running on MSFT server.
    GraphQL operation: o365ServiceStatus(orgID: UUID):GetO365ServiceStatusResp!
"@ "${nl}Field type: ${fieldTypeName}"



# -------------------------------------------------------------------
# Invoke-RscQueryOracle -TopLevelDescendant
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryOracle -TopLevelDescendant -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryOracle -TopLevelDescendant${nl}${nl}" @"
    Paginated list of the highest-level Oracle Objects accessible by the current user.
    GraphQL operation: oracleTopLevelDescendants(,   first: Int,   after: String,   sortBy: HierarchySortByField,   sortOrder: SortOrder,   typeFilter: [HierarchyObjectTypeEnum!],   filter: [Filter!], ):OracleTopLevelDescendantTypeConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryOracle -Database
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryOracle -Database -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryOracle -Database${nl}${nl}" @"
    Paginated list of Oracle Databases.
    GraphQL operation: oracleDatabases(,   first: Int,   after: String,   sortBy: HierarchySortByField,   sortOrder: SortOrder,   filter: [Filter!], ):OracleDatabaseConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryOracle -Host
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryOracle -Host -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryOracle -Host${nl}${nl}" @"
    An Oracle Host.
    GraphQL operation: oracleHost(fid: UUID!):OracleHost!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryOracle -Rac
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryOracle -Rac -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryOracle -Rac${nl}${nl}" @"
    An Oracle Real Application Cluster.
    GraphQL operation: oracleRac(fid: UUID!):OracleRac!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryOracle -DataGuardGroup
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryOracle -DataGuardGroup -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryOracle -DataGuardGroup${nl}${nl}" @"
    An Oracle Data Guard Group.
    GraphQL operation: oracleDataGuardGroup(fid: UUID!):OracleDataGuardGroup!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryOracle -LiveMount
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryOracle -LiveMount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryOracle -LiveMount${nl}${nl}" @"
    Paginated list of Oracle Live Mounts.
    GraphQL operation: oracleLiveMounts(,   first: Int,   after: String,   filters: [OracleLiveMountFilterInput!],   sortBy: OracleLiveMountSortBy, ):OracleLiveMountConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryOracle -AcoParameter
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryOracle -AcoParameter -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryOracle -AcoParameter${nl}${nl}" @"
    List of supported Advanced Cloning Options

Supported in v6.0+
Get the list of supported Advanced Cloning Options (ACO) parameters.
    GraphQL operation: oracleAcoParameters(input: ClusterUuidWithDbIdInput!):OracleAcoParameterList!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryOracle -RecoverableRange
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryOracle -RecoverableRange -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryOracle -RecoverableRange${nl}${nl}" @"
    Get recoverable ranges of a Oracle database

Supported in v5.0+
Retrieve the recoverable ranges for a specified Oracle database. A begin and/or end timestamp can be provided to retrieve only the ranges that fall within the window.
    GraphQL operation: oracleRecoverableRanges(input: GetOracleDbRecoverableRangesInput!):OracleRecoverableRangeListResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryOracle -MissedRecoverableRange
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryOracle -MissedRecoverableRange -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryOracle -MissedRecoverableRange${nl}${nl}" @"
    Get missed recoverable ranges of a Oracle database

Supported in v5.0+
Retrieve a list of missed recoverable ranges for a Oracle database. For each run of one type of error, the first and last occurrence of the error are given.
    GraphQL operation: oracleMissedRecoverableRanges(input: GetOracleDbMissedRecoverableRangesInput!):OracleMissedRecoverableRangeListResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryOracle -MissedSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryOracle -MissedSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryOracle -MissedSnapshot${nl}${nl}" @"
    Get missed snapshots for an Oracle database

Supported in v5.0+
Retrieve summary information about the missed snapshots of an Oracle database.
    GraphQL operation: oracleMissedSnapshots(input: GetMissedOracleDbSnapshotsInput!):MissedSnapshotListResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryOracle -AcoExampleDownloadLink
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryOracle -AcoExampleDownloadLink -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryOracle -AcoExampleDownloadLink${nl}${nl}" @"
    Link to download the Advanced Recovery Options example file

Supported in v5.3+
Link to download the Advanced Recovery Options example file which can be used to customize Oracle recoveries.
    GraphQL operation: oracleAcoExampleDownloadLink(input: ClusterUuidWithDbIdInput!):OracleFileDownloadLink!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryOracle -PdbDetail
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryOracle -PdbDetail -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryOracle -PdbDetail${nl}${nl}" @"
    Get PDB details

Supported in v8.0+
Retrieves information about available pluggable databases (PDBs) for a given recovery point.
    GraphQL operation: oraclePdbDetails(input: OraclePdbDetailsInput!):OraclePdbDetails!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryOracle -HostLogBackupConfig
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryOracle -HostLogBackupConfig -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryOracle -HostLogBackupConfig${nl}${nl}" @"
    Oracle Log backup configuration for Oracle Host.
    GraphQL operation: oracleHostLogBackupConfig(input: OracleHostInput!):OracleLogBackupConfig!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryOracle -DatabaseLogBackupConfig
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryOracle -DatabaseLogBackupConfig -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryOracle -DatabaseLogBackupConfig${nl}${nl}" @"
    Oracle log backup configuration for an Oracle Database.
    GraphQL operation: oracleDatabaseLogBackupConfig(input: OracleDbInput!):OracleLogBackupConfig!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryOracle -RacLogBackupConfig
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryOracle -RacLogBackupConfig -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryOracle -RacLogBackupConfig${nl}${nl}" @"
    Oracle log backup configuration for an Oracle RAC.
    GraphQL operation: oracleRacLogBackupConfig(input: OracleRacInput!):OracleLogBackupConfig!
"@ "${nl}Field type: ${fieldTypeName}"



# -------------------------------------------------------------------
# Invoke-RscQuerySla -allIofilterStatus
# -------------------------------------------------------------------

$inputs = Invoke-RscQuerySla -allIofilterStatus -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQuerySla -allIofilterStatus${nl}${nl}" @"
    The iofilter installation status of the compute clusters related to this SLA Domain.
    GraphQL operation: allSlaIofilterStatuses(fid: UUID!):[ComputeClusterIofilterStatus!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQuerySla -allCdpVmName
# -------------------------------------------------------------------

$inputs = Invoke-RscQuerySla -allCdpVmName -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQuerySla -allCdpVmName${nl}${nl}" @"
    Names of the virtual machines in compute cluster with Continuous Data Protection (CDP) SLA Domain.
    GraphQL operation: allCdpSlaVmNames(fid: UUID!):[String!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQuerySla -Domain
# -------------------------------------------------------------------

$inputs = Invoke-RscQuerySla -Domain -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQuerySla -Domain${nl}${nl}" @"
    Retrieves a list of SLA Domains.
    GraphQL operation: slaDomains(,   first: Int,   after: String,   last: Int,   before: String,   sortBy: SlaQuerySortByField,   sortOrder: SortOrder,   filter: [GlobalSlaFilterInput!],   contextFilter: ContextFilterTypeEnum,   contextFilterInput: [ContextFilterInputField!],   shouldShowSyncStatus: Boolean = false,   shouldShowProtectedObjectCount: Boolean = false,   shouldShowUpgradeInfo: Boolean = false,   showRemoteSlas: Boolean,   shouldShowPausedClusters: Boolean = false, ):SlaDomainConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQuerySla -DomainWithWarningsList
# -------------------------------------------------------------------

$inputs = Invoke-RscQuerySla -DomainWithWarningsList -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQuerySla -DomainWithWarningsList${nl}${nl}" @"
    Query sla list with warnings
    GraphQL operation: slaDomainWithWarningsList(,   first: Int,   after: String,   last: Int,   before: String,   sortBy: SlaQuerySortByField,   sortOrder: SortOrder,   filter: [GlobalSlaFilterInput!],   contextFilter: ContextFilterTypeEnum,   objectIds: [UUID!],   applicableSnappableTypes: [WorkloadLevelHierarchy!],   snapshotIds: [UUID!],   operation: SlaWarningsOperation, ):[SlaDomainWithWarnings!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQuerySla -globalFilterList
# -------------------------------------------------------------------

$inputs = Invoke-RscQuerySla -globalFilterList -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQuerySla -globalFilterList${nl}${nl}" @"
    
    GraphQL operation: globalSlaFilterConnection(,   first: Int,   after: String,   last: Int,   before: String,   sortBy: SlaQuerySortByField,   sortOrder: SortOrder,   filter: [GlobalSlaFilterInput!],   contextFilter: ContextFilterTypeEnum,   contextFilterInput: [ContextFilterInputField!],   shouldShowSyncStatus: Boolean = false,   shouldShowProtectedObjectCount: Boolean = false,   shouldShowUpgradeInfo: Boolean = false,   showRemoteSlas: Boolean,   shouldShowPausedClusters: Boolean = false, ):GlobalSlaForFilterConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQuerySla -DomainWithWarning
# -------------------------------------------------------------------

$inputs = Invoke-RscQuerySla -DomainWithWarning -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQuerySla -DomainWithWarning${nl}${nl}" @"
    
    GraphQL operation: slaDomainWithWarnings(id: UUID!, objectIds: [UUID!]!, applicableSnappableTypes: [WorkloadLevelHierarchy!]):SlaDomainWithWarnings!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQuerySla -ArchivalValidationWarning
# -------------------------------------------------------------------

$inputs = Invoke-RscQuerySla -ArchivalValidationWarning -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQuerySla -ArchivalValidationWarning${nl}${nl}" @"
    SLA Domain warnings related to non-compliant archival retention duration in the archival policy.
    GraphQL operation: slaArchivalValidationWarnings(input: SlaArchivalWarningsInput!):SlaArchivalValidationWithWarnings!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQuerySla -countOfObjectsProtected
# -------------------------------------------------------------------

$inputs = Invoke-RscQuerySla -countOfObjectsProtected -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQuerySla -countOfObjectsProtected${nl}${nl}" @"
    The number of objects protected by the SLA Domains.
    GraphQL operation: countOfObjectsProtectedBySlas(,   rootOptionalFid: UUID,   slaIds: [UUID!]!,   filter: [Filter!],   typeFilter: [HierarchyObjectTypeEnum!], ):CountOfObjectsProtectedBySLAsResult!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQuerySla -AuditDetail
# -------------------------------------------------------------------

$inputs = Invoke-RscQuerySla -AuditDetail -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQuerySla -AuditDetail${nl}${nl}" @"
    List of audit details for a given SLA Domain.
    GraphQL operation: slaAuditDetail(,   first: Int,   after: String,   last: Int,   before: String,   SlaId: UUID!,   filter: [SLAAuditDetailFilterInput!],   timezone: String, ):[SlaAuditDetail!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQuerySla -SummariesById
# -------------------------------------------------------------------

$inputs = Invoke-RscQuerySla -SummariesById -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQuerySla -SummariesById${nl}${nl}" @"
    List of SLA summaries for the given ids
    GraphQL operation: slaSummariesByIds(slaIds: [UUID!]!):[SlaDomain!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQuerySla -globalStatus
# -------------------------------------------------------------------

$inputs = Invoke-RscQuerySla -globalStatus -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQuerySla -globalStatus${nl}${nl}" @"
    Status on the clusters where global SLA is synced.
    GraphQL operation: globalSlaStatuses(,   first: Int,   after: String,   last: Int,   before: String,   filter: [SlaStatusFilterInput!],   SlaId: UUID!, ):PolarisSlaStatusConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQuerySla -protectedClustersForGlobal
# -------------------------------------------------------------------

$inputs = Invoke-RscQuerySla -protectedClustersForGlobal -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQuerySla -protectedClustersForGlobal${nl}${nl}" @"
    Clusters that have object(s) protected by global SLA.
    GraphQL operation: protectedClustersForGlobalSla(,   first: Int,   after: String,   last: Int,   before: String,   slaId: UUID!, ):ClusterConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQuerySla -ConflictObject
# -------------------------------------------------------------------

$inputs = Invoke-RscQuerySla -ConflictObject -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQuerySla -ConflictObject${nl}${nl}" @"
    
    GraphQL operation: slaConflictObjects(fids: [UUID!]!):[HierarchyObject!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQuerySla -ManagedVolume
# -------------------------------------------------------------------

$inputs = Invoke-RscQuerySla -ManagedVolume -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQuerySla -ManagedVolume${nl}${nl}" @"
    Paginated list of SLA Managed Volumes.
    GraphQL operation: slaManagedVolumes(,   first: Int,   after: String,   sortBy: HierarchySortByField,   sortOrder: SortOrder,   filter: [Filter!], ):ManagedVolumeConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQuerySla -clusterDomainList
# -------------------------------------------------------------------

$inputs = Invoke-RscQuerySla -clusterDomainList -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQuerySla -clusterDomainList${nl}${nl}" @"
    
    GraphQL operation: clusterSlaDomainConnection(,   first: Int,   after: String,   last: Int,   before: String, ):ClusterSlaDomainConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQuerySla -clusterDomainFilterList
# -------------------------------------------------------------------

$inputs = Invoke-RscQuerySla -clusterDomainFilterList -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQuerySla -clusterDomainFilterList${nl}${nl}" @"
    
    GraphQL operation: clusterSlaDomainFilterConnection(,   first: Int,   after: String,   last: Int,   before: String, ):ClusterSlaDomainForFilterConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQuerySla -verifyWithReplicationToCluster
# -------------------------------------------------------------------

$inputs = Invoke-RscQuerySla -verifyWithReplicationToCluster -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQuerySla -verifyWithReplicationToCluster${nl}${nl}" @"
    
    GraphQL operation: verifySLAWithReplicationToCluster(cdmClusterUUID: UUID!, includeArchived: Boolean!):VerifySLAWithReplicationToClusterResp!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQuerySla -downloadWithReplicationCsv
# -------------------------------------------------------------------

$inputs = Invoke-RscQuerySla -downloadWithReplicationCsv -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQuerySla -downloadWithReplicationCsv${nl}${nl}" @"
    Download list of Global SLA CSV that have Replication to the given Rubrik Cluster.
    GraphQL operation: downloadSlaWithReplicationCsv(cdmClusterUUID: UUID!, includeArchived: Boolean!):DownloadSlaWithReplicationCsvReply!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQuerySla -allClusterGlobal
# -------------------------------------------------------------------

$inputs = Invoke-RscQuerySla -allClusterGlobal -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQuerySla -allClusterGlobal${nl}${nl}" @"
    Global SLA Domains protecting at least one object on the specified Rubrik cluster.
    GraphQL operation: allClusterGlobalSlas(cdmClusterUUID: UUID!):[SlaInfo!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQuerySla -allObjecttestUserNoteAudit
# -------------------------------------------------------------------

$inputs = Invoke-RscQuerySla -allObjecttestUserNoteAudit -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQuerySla -allObjecttestUserNoteAudit${nl}${nl}" @"
    Latest audit with usernote for a list of objects.
    GraphQL operation: allObjectsLatestUserNoteAudit(objectIds: [String!]!):[LatestUserNote!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQuerySla -allNcdComplianceData
# -------------------------------------------------------------------

$inputs = Invoke-RscQuerySla -allNcdComplianceData -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQuerySla -allNcdComplianceData${nl}${nl}" @"
    NAS Cloud Direct SLA Domain compliance data for the requested clusters.
    GraphQL operation: allNcdSlaComplianceData(clusters: [UUID!]!):[NcdSlaComplianceData!]!
"@ "${nl}Field type: ${fieldTypeName}"



# -------------------------------------------------------------------
# Invoke-RscQueryVcenter -Vcenter
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVcenter -Vcenter -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryVcenter -Vcenter${nl}${nl}" @"
    
    GraphQL operation: vSphereVCenter(fid: UUID!):VsphereVcenter!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryVcenter -List
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVcenter -List -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryVcenter -List${nl}${nl}" @"
    
    GraphQL operation: vSphereVCenterConnection(,   first: Int,   after: String,   sortBy: HierarchySortByField,   sortOrder: SortOrder,   filter: [Filter!], ):VsphereVcenterConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryVcenter -uniqueCount
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVcenter -uniqueCount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryVcenter -uniqueCount${nl}${nl}" @"
    
    GraphQL operation: uniqueVSphereVCenterCount(filter: [Filter!]):Int!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryVcenter -PreAddInfo
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVcenter -PreAddInfo -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryVcenter -PreAddInfo${nl}${nl}" @"
    Get preAddInfo for a vcenter.
    GraphQL operation: vCenterPreAddInfo(input: PreAddVcenterInput!):VcenterPreAddInfo!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryVcenter -Network
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVcenter -Network -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryVcenter -Network${nl}${nl}" @"
    Get the user-configured networks in the vCenter

Supported in v5.3+
Get the names and IDs of the user configured networks in the vCenter. This information enables users to choose a desired network for backups to go through for VMware Cloud on AWS setups.
    GraphQL operation: vCenterNetworks(input: GetNetworksInput!):NetworkInfoListResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryVcenter -HotAddNetwork
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVcenter -HotAddNetwork -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryVcenter -HotAddNetwork${nl}${nl}" @"
    Retrieve the user-configured network for HotAdd operations

Supported in v5.3+
Retrieve the user-configured network for HotAdd backup and recovery operations on VMware on AWS.
    GraphQL operation: vCenterHotAddNetwork(input: GetHotAddNetworkInput!):HotAddNetworkConfigWithName!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryVcenter -NumProxiesNeeded
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVcenter -NumProxiesNeeded -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryVcenter -NumProxiesNeeded${nl}${nl}" @"
    Get the number of HotAdd proxies needed for the vCenter

Supported in v5.3+
Get the number of HotAdd proxies that need to be deployed to the vCenter to support the maximum number of ingest jobs.
    GraphQL operation: vCenterNumProxiesNeeded(input: GetNumProxiesNeededInput!):Int!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryVcenter -HotAddProxy
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVcenter -HotAddProxy -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryVcenter -HotAddProxy${nl}${nl}" @"
    Get a list of HotAdd proxy virtual machines

Supported in v5.3+
Retrieve summary information for all HotAdd proxy virtual machines.
    GraphQL operation: allVcenterHotAddProxyVms(clusterUuids: [UUID!]!):[VcenterHotAddProxyVmInfo!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryVcenter -HotAddBandwidth
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVcenter -HotAddBandwidth -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryVcenter -HotAddBandwidth${nl}${nl}" @"
    Get the ingest and export bandwidth limits for HotAdd with the vCenter

Supported in v5.3+
Get the ingest and export bandwidth limits in Mbps when using HotAdd with the vCenter. These limits are shared across all HotAdd proxies for the Center.
    GraphQL operation: vCenterHotAddBandwidth(input: GetHotAddBandwidthInput!):HotAddBandwidthInfo!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryVcenter -AdvancedTagPreview
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVcenter -AdvancedTagPreview -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryVcenter -AdvancedTagPreview${nl}${nl}" @"
    Preview list of virtual machines of a proposed filter condition

Supported in v7.0+
Preview list of virtual machines of a proposed filter condition. The result might not be accurate if new virtual machines were added after last vCenter refresh.
    GraphQL operation: vCenterAdvancedTagPreview(input: PreviewFilterInput!):VcenterAdvancedTagPreviewReply!
"@ "${nl}Field type: ${fieldTypeName}"



# -------------------------------------------------------------------
# Invoke-RscQueryVsphere -Blueprint
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphere -Blueprint -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryVsphere -Blueprint${nl}${nl}" @"
    
    GraphQL operation: vSphereBlueprint(fid: UUID!):VSphereBlueprint!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphere -Datacenter
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphere -Datacenter -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryVsphere -Datacenter${nl}${nl}" @"
    
    GraphQL operation: vSphereDatacenter(fid: UUID!):VsphereDatacenter!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphere -ComputeCluster
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphere -ComputeCluster -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryVsphere -ComputeCluster${nl}${nl}" @"
    
    GraphQL operation: vSphereComputeCluster(fid: UUID!):VsphereComputeCluster!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphere -ResourcePool
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphere -ResourcePool -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryVsphere -ResourcePool${nl}${nl}" @"
    
    GraphQL operation: vSphereResourcePool(fid: UUID!):VsphereResourcePool!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphere -Folder
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphere -Folder -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryVsphere -Folder${nl}${nl}" @"
    
    GraphQL operation: vSphereFolder(fid: UUID!):VsphereFolder!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphere -Host
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphere -Host -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryVsphere -Host${nl}${nl}" @"
    
    GraphQL operation: vSphereHost(fid: UUID!):VsphereHost!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphere -DatastoreCluster
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphere -DatastoreCluster -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryVsphere -DatastoreCluster${nl}${nl}" @"
    Vsphere datastore cluster based on id passed in.
    GraphQL operation: vSphereDatastoreCluster(fid: UUID!):VsphereDatastoreCluster!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphere -Datastore
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphere -Datastore -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryVsphere -Datastore${nl}${nl}" @"
    Vsphere datastore based on id passed in.
    GraphQL operation: vSphereDatastore(fid: UUID!):VsphereDatastore!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphere -HostsByFid
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphere -HostsByFid -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryVsphere -HostsByFid${nl}${nl}" @"
    All of the VSphere hosts based on fids passed in.
    GraphQL operation: vSphereHostsByFids(fids: [UUID!]!):[VsphereHost!]!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphere -Tag
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphere -Tag -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryVsphere -Tag${nl}${nl}" @"
    
    GraphQL operation: vSphereTag(fid: UUID!):VsphereTag!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphere -TagCategory
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphere -TagCategory -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryVsphere -TagCategory${nl}${nl}" @"
    
    GraphQL operation: vSphereTagCategory(fid: UUID!):VsphereTagCategory!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphere -Network
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphere -Network -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryVsphere -Network${nl}${nl}" @"
    
    GraphQL operation: vSphereNetwork(fid: UUID!):VsphereNetwork!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphere -TopLevelDescendantsList
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphere -TopLevelDescendantsList -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryVsphere -TopLevelDescendantsList${nl}${nl}" @"
    
    GraphQL operation: vSphereTopLevelDescendantsConnection(,   first: Int,   after: String,   sortBy: HierarchySortByField,   sortOrder: SortOrder,   typeFilter: [HierarchyObjectTypeEnum!],   filter: [Filter!], ):CdmHierarchyObjectConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphere -RootRecoveryHierarchy
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphere -RootRecoveryHierarchy -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryVsphere -RootRecoveryHierarchy${nl}${nl}" @"
    The root hierarchy for VMware export, which includes VMware compute clusters and standalone hosts.
    GraphQL operation: vSphereRootRecoveryHierarchy(,   first: Int,   after: String,   sortBy: HierarchySortByField,   sortOrder: SortOrder,   filter: [Filter!], ):CdmHierarchyObjectConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphere -HostList
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphere -HostList -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryVsphere -HostList${nl}${nl}" @"
    
    GraphQL operation: vSphereHostConnection(,   first: Int,   after: String,   sortBy: HierarchySortByField,   sortOrder: SortOrder,   filter: [Filter!], ):VsphereHostConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphere -DatastoreList
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphere -DatastoreList -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryVsphere -DatastoreList${nl}${nl}" @"
    
    GraphQL operation: vSphereDatastoreConnection(,   first: Int,   after: String,   sortBy: HierarchySortByField,   sortOrder: SortOrder,   filter: [Filter!], ):VsphereDatastoreConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphere -LiveMount
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphere -LiveMount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryVsphere -LiveMount${nl}${nl}" @"
    List of vSphere Live Mounts.
    GraphQL operation: vSphereLiveMounts(,   first: Int,   after: String,   filter: [VsphereLiveMountFilterInput!],   sortBy: VsphereLiveMountSortBy, ):VsphereLiveMountConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphere -MountList
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphere -MountList -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryVsphere -MountList${nl}${nl}" @"
    vSphere Live Mount Connection
    GraphQL operation: vSphereMountConnection(,   first: Int,   after: String,   filter: VSphereMountFilter,   sortBy: VsphereMountSortBy,   sortOrder: SortOrder, ):VsphereMountConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphere -Mount
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphere -Mount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryVsphere -Mount${nl}${nl}" @"
    Get a vSphere Live Mount by id
    GraphQL operation: vSphereMount(fid: UUID!):VsphereMount!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphere -HostDetail
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphere -HostDetail -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryVsphere -HostDetail${nl}${nl}" @"
    Get details of a ESXi hypervisor

Supported in v5.0+
Get details of a ESXi hypervisor.
    GraphQL operation: vSphereHostDetails(input: GetVmwareHostInput!):VmwareHostDetail!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphere -VmwareCdpLiveInfo
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphere -VmwareCdpLiveInfo -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryVsphere -VmwareCdpLiveInfo${nl}${nl}" @"
    
    GraphQL operation: vsphereVmwareCdpLiveInfo(ids: [String!]!):BatchVmwareCdpLiveInfo!
"@ "${nl}Field type: ${fieldTypeName}"



# -------------------------------------------------------------------
# Invoke-RscQueryVsphereVm -New
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphereVm -New -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryVsphereVm -New${nl}${nl}" @"
    
    GraphQL operation: vSphereVmNew(fid: UUID!):VsphereVm!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphereVm -NewList
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphereVm -NewList -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryVsphereVm -NewList${nl}${nl}" @"
    
    GraphQL operation: vSphereVmNewConnection(,   first: Int,   after: String,   sortBy: HierarchySortByField,   sortOrder: SortOrder,   filter: [Filter!], ):VsphereVmConnection!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphereVm -RecoverableRange
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphereVm -RecoverableRange -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryVsphereVm -RecoverableRange${nl}${nl}" @"
    
    GraphQL operation: vsphereVMRecoverableRange(snappableFid: UUID!, beforeTime: DateTime, afterTime: DateTime):RecoverableRangeResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphereVm -RecoverableRangeInBatch
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphereVm -RecoverableRangeInBatch -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryVsphereVm -RecoverableRangeInBatch${nl}${nl}" @"
    
    GraphQL operation: vsphereVMRecoverableRangeInBatch(requestInfo: BatchVmwareVmRecoverableRangesRequestInput!):BatchVmwareVmRecoverableRanges!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphereVm -MissedRecoverableRange
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphereVm -MissedRecoverableRange -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryVsphereVm -MissedRecoverableRange${nl}${nl}" @"
    
    GraphQL operation: vsphereVMMissedRecoverableRange(snappableFid: UUID!, beforeTime: DateTime, afterTime: DateTime):RecoverableRangeResponse!
"@ "${nl}Field type: ${fieldTypeName}"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphereVm -AsyncRequestStatus
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphereVm -AsyncRequestStatus -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
Write-Message "Invoke-RscQueryVsphereVm -AsyncRequestStatus${nl}${nl}" @"
    
    GraphQL operation: vSphereVMAsyncRequestStatus(clusterUuid: UUID!, id: String!):AsyncRequestStatus!
"@ "${nl}Field type: ${fieldTypeName}"


