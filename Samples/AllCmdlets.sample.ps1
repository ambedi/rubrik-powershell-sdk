# This file was generated by the Rubrik SDK for PowerShell
. "${PSScriptRoot}/../Utils/import.ps1"
. "${PSScriptRoot}/SampleUtils.ps1"

# -------------------------------------------------------------------
# Invoke-RscMutateActivitySeries -Cancel
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateActivitySeries -Cancel -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateActivitySeries -Cancel" @"
Cancel an activity series.
"@ "[GraphQL: cancelActivitySeries]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"



# -------------------------------------------------------------------
# Invoke-RscMutateAws -StartNativeEc2InstanceSnapshotsJob
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -StartNativeEc2InstanceSnapshotsJob -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -StartNativeEc2InstanceSnapshotsJob" @"
Start an on demand create snapshot job for AWS EC2 Instances.When completed, this will start taking an on-demand snapshot of the selected EC2 Instances  as per the SLA Policy assigned to the respective instances.
"@ "[GraphQL: startAwsNativeEc2InstanceSnapshotsJob]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -StartRestoreNativeEc2InstanceSnapshotJob
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -StartRestoreNativeEc2InstanceSnapshotJob -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -StartRestoreNativeEc2InstanceSnapshotJob" @"
Start an on demand restore snapshot job for AWS EC2 Instance. When completed, this will replace the original EC2 Instance with the selected snapshot.
"@ "[GraphQL: startRestoreAwsNativeEc2InstanceSnapshotJob]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -StartRefreshNativeAccountsJob
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -StartRefreshNativeAccountsJob -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -StartRefreshNativeAccountsJob" @"
Start an on demand job to refresh AWS accounts. The job updates the Rubrik platform with changes to the AWS Native accounts.
"@ "[GraphQL: startRefreshAwsNativeAccountsJob]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -StartCreateNativeEbsVolumeSnapshotsJob
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -StartCreateNativeEbsVolumeSnapshotsJob -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -StartCreateNativeEbsVolumeSnapshotsJob" @"
Start job to create snapshots of EBS Volumes with given IDs. When completed, this will start taking an on-demand snapshot of the selected EBS Volumes  as per the SLA Policy assigned to the respective volumes.
"@ "[GraphQL: startCreateAwsNativeEbsVolumeSnapshotsJob]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -StartNativeAccountDisableJob
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -StartNativeAccountDisableJob -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -StartNativeAccountDisableJob" @"
Starts a job to disable a specific AWS Native account. When complete, the job will disable protection for the specified AWS Native account.
"@ "[GraphQL: startAwsNativeAccountDisableJob]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -StartExportNativeEbsVolumeSnapshotJob
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -StartExportNativeEbsVolumeSnapshotJob -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -StartExportNativeEbsVolumeSnapshotJob" @"
Start a job to export EBS Volume. The job creates a new EBS Volume with the same properties as that of the snapshot that is exported.
"@ "[GraphQL: startExportAwsNativeEbsVolumeSnapshotJob]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -ExcludeNativeEbsVolumesFromSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -ExcludeNativeEbsVolumesFromSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -ExcludeNativeEbsVolumesFromSnapshot" @"
Mark AWS Native EBS Volumes to be excluded from EC2 Instance snapshot. By default, all EBS Volumes are marked as included.
"@ "[GraphQL: excludeAwsNativeEbsVolumesFromSnapshot]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -StartNativeRdsInstanceSnapshotsJob
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -StartNativeRdsInstanceSnapshotsJob -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -StartNativeRdsInstanceSnapshotsJob" @"
Start job to create snapshots of RDS Instance with given IDs. When completed, this will start taking an on-demand snapshot of the selected RDS Instances  as per the SLA Policy assigned to the respective instances.
"@ "[GraphQL: startAwsNativeRdsInstanceSnapshotsJob]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -CreateAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -CreateAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -CreateAccount" @"

"@ "[GraphQL: createAwsAccount]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -UpdateAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -UpdateAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -UpdateAccount" @"

"@ "[GraphQL: updateAwsAccount]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -CreateAutomaticTargetMapping
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -CreateAutomaticTargetMapping -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -CreateAutomaticTargetMapping" @"

"@ "[GraphQL: createAutomaticAwsTargetMapping]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -CreateCloudNativeStorageSetting
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -CreateCloudNativeStorageSetting -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -CreateCloudNativeStorageSetting" @"

"@ "[GraphQL: createCloudNativeAwsStorageSetting]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -UpdateAutomaticTargetMapping
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -UpdateAutomaticTargetMapping -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -UpdateAutomaticTargetMapping" @"

"@ "[GraphQL: updateAutomaticAwsTargetMapping]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -UpdateCloudNativeStorageSetting
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -UpdateCloudNativeStorageSetting -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -UpdateCloudNativeStorageSetting" @"

"@ "[GraphQL: updateCloudNativeAwsStorageSetting]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -CreateTarget
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -CreateTarget -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -CreateTarget" @"

"@ "[GraphQL: createAwsTarget]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -UpdateTarget
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -UpdateTarget -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -UpdateTarget" @"

"@ "[GraphQL: updateAwsTarget]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -CreateReaderTarget
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -CreateReaderTarget -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -CreateReaderTarget" @"
Create a reader type for AWS archival location on a Rubrik cluster.
"@ "[GraphQL: createAwsReaderTarget]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -CreateComputeSetting
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -CreateComputeSetting -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -CreateComputeSetting" @"

"@ "[GraphQL: createAwsComputeSetting]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -UpdateComputeSetting
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -UpdateComputeSetting -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -UpdateComputeSetting" @"

"@ "[GraphQL: updateAwsComputeSetting]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -DeleteComputeSetting
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -DeleteComputeSetting -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -DeleteComputeSetting" @"

"@ "[GraphQL: deleteAwsComputeSetting]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -CloudAccountValidate
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -CloudAccountValidate -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -CloudAccountValidate" @"
This endpoint is deprecated.
"@ "[GraphQL: awsCloudAccountValidate]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -CloudAccountInitiate
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -CloudAccountInitiate -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -CloudAccountInitiate" @"
This endpoint is deprecated.
"@ "[GraphQL: awsCloudAccountInitiate]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -NativeProtectionAccountAdd
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -NativeProtectionAccountAdd -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -NativeProtectionAccountAdd" @"
This endpoint is deprecated.
"@ "[GraphQL: awsNativeProtectionAccountAdd]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -ValidateAndCreateCloudAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -ValidateAndCreateCloudAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -ValidateAndCreateCloudAccount" @"
Validate and create AWS cloud account. If validation fails, no error is returned and the cause is present in the ""message"" field of return object or within admin/child accounts of return object. In case validation succeeds, it initiates creation of AWS cloud account. This is the first step to set up native protection.
"@ "[GraphQL: validateAndCreateAwsCloudAccount]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -FinalizeCloudAccountProtection
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -FinalizeCloudAccountProtection -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -FinalizeCloudAccountProtection" @"
Process cloud account. This is the second step after validate and create in addition of a feature for cloud account.The CloudFormation stack should be created after this step using the CloudFormation URL provided in the first step.
"@ "[GraphQL: finalizeAwsCloudAccountProtection]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -PrepareCloudAccountDeletion
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -PrepareCloudAccountDeletion -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -PrepareCloudAccountDeletion" @"
Prepare deletion of cloud account. This is the first step to delete AWS cloud account. It generated template for deletion of cloud account and does not change any state of account.
"@ "[GraphQL: prepareAwsCloudAccountDeletion]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -FinalizeCloudAccountDeletion
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -FinalizeCloudAccountDeletion -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -FinalizeCloudAccountDeletion" @"
Process and finalize deletion of cloud account is the last step in deletion of a feature from cloud account. This endpoint is a MUST for deletion of disconnected features.
"@ "[GraphQL: finalizeAwsCloudAccountDeletion]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -UpdateCloudAccountFeature
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -UpdateCloudAccountFeature -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -UpdateCloudAccountFeature" @"
Updates regions, stack ARN, and role ARN for a feature for a given cloud account.
"@ "[GraphQL: updateAwsCloudAccountFeature]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -UpdateCloudAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -UpdateCloudAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -UpdateCloudAccount" @"
Update properties for a given AWS cloud account.
"@ "[GraphQL: updateAwsCloudAccount]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -PrepareFeatureUpdateForCloudAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -PrepareFeatureUpdateForCloudAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -PrepareFeatureUpdateForCloudAccount" @"
Prepare manual update features to latest version.
"@ "[GraphQL: prepareFeatureUpdateForAwsCloudAccount]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -CloudAccountUpdateFeature
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -CloudAccountUpdateFeature -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -CloudAccountUpdateFeature" @"
This endpoint is deprecated.
"@ "[GraphQL: awsCloudAccountUpdateFeature]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -CreateExocomputeConfig
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -CreateExocomputeConfig -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -CreateExocomputeConfig" @"
Create AWS Exocompute configs.
"@ "[GraphQL: createAwsExocomputeConfigs]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -DeleteExocomputeConfig
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -DeleteExocomputeConfig -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -DeleteExocomputeConfig" @"
Deletes AWS Exocompute configs.
"@ "[GraphQL: deleteAwsExocomputeConfigs]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -UpdateExocomputeConfig
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -UpdateExocomputeConfig -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -UpdateExocomputeConfig" @"
Update AWS Exocompute configs.
"@ "[GraphQL: updateAwsExocomputeConfigs]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -StartExocomputeDisableJob
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -StartExocomputeDisableJob -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -StartExocomputeDisableJob" @"
Starts a job to disable AWS Exocompute feature. When complete, the job will disable exocompute feature for the specified AWS Native account.
"@ "[GraphQL: startAwsExocomputeDisableJob]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -AddIamUserBasedCloudAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -AddIamUserBasedCloudAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -AddIamUserBasedCloudAccount" @"
Adds an IAM user-based AWS cloud account and enables the features specified in the input after successful validation of the request.
"@ "[GraphQL: addAwsIamUserBasedCloudAccount]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -DeleteIamUserBasedCloudAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -DeleteIamUserBasedCloudAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -DeleteIamUserBasedCloudAccount" @"
Deletes IAM user-based AWS cloud account.
"@ "[GraphQL: deleteAwsIamUserBasedCloudAccount]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -DeleteCloudAccountWithoutCft
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -DeleteCloudAccountWithoutCft -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -DeleteCloudAccountWithoutCft" @"
Removes AWS cloud account without cleaning up the associated permissions from the AWS cloud account. Customer needs to clean up the permissions in the AWS account themselves. This mutation is supported only for IAM user-based and authentication server-based AWS cloud accounts.
"@ "[GraphQL: deleteAwsCloudAccountWithoutCft]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -UpgradeIamUserBasedCloudAccountPermission
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -UpgradeIamUserBasedCloudAccountPermission -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -UpgradeIamUserBasedCloudAccountPermission" @"
Set IAM user-based AWS account features status to Connected from Update Permissions state. It should be used by caution from cloud accounts only after latest required permissions are granted to authorized IAM user.
"@ "[GraphQL: upgradeAwsIamUserBasedCloudAccountPermissions]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -UpgradeCloudAccountFeaturesWithoutCft
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -UpgradeCloudAccountFeaturesWithoutCft -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -UpgradeCloudAccountFeaturesWithoutCft" @"
Updates status of AWS cloud account features to connected if they are in update permissions state. This mutation should be used with caution. It should be invoked only after the latest required permissions are granted to the AWS cloud account user used by Rubrik. This mutation does not verify if the required permissions are actually granted to the user or not. Its usage is restricted to only IAM user-based and authentication server-based AWS cloud accounts.
"@ "[GraphQL: upgradeAwsCloudAccountFeaturesWithoutCft]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -AddAuthenticationServerBasedCloudAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -AddAuthenticationServerBasedCloudAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -AddAuthenticationServerBasedCloudAccount" @"
Validates and adds an authentication server-based AWS cloud account. When validation succeeds, the AWS cloud account is added and the features specified in the request are enabled. When validation fails, an error is not returned, but the cause of the failure is specified in the ""message"" field of the response object.
"@ "[GraphQL: addAwsAuthenticationServerBasedCloudAccount]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -PatchAuthenticationServerBasedCloudAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -PatchAuthenticationServerBasedCloudAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -PatchAuthenticationServerBasedCloudAccount" @"
Updates authentication server-based AWS cloud account. Use this mutation to update account details related to role name, certificates, features. The mutation can update one or more certificates associated to an account in a single request. All input fields except account identifier are optional so that any combination of account attributes can be updated in a single call. If none of the optional fields are provided in the input then no updates are performed, and the response does not contain any error message.
"@ "[GraphQL: patchAwsAuthenticationServerBasedCloudAccount]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -PatchIamUserBasedCloudAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -PatchIamUserBasedCloudAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -PatchIamUserBasedCloudAccount" @"
Updates IAM user-based AWS cloud account. Use this mutation to update account details access/secret keys, role ARN and regions. All input fields except account ID are optional so that any combination of account attributes can be updated in a single call. If none of the optional fields are provided in the input then no updates are performed, and the response does not contain any error message.
"@ "[GraphQL: patchAwsIamUserBasedCloudAccount]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -CreateCluster
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -CreateCluster -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -CreateCluster" @"
Create a Rubrik Cloud Cluster on AWS.
"@ "[GraphQL: createAwsCluster]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAws -DeleteCluster
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAws -DeleteCluster -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAws -DeleteCluster" @"
Delete a Rubrik Cloud Cluster on AWS.
"@ "[GraphQL: deleteAwsCluster]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"



# -------------------------------------------------------------------
# Invoke-RscMutateAzure -StartRefreshNativeSubscriptionsJob
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -StartRefreshNativeSubscriptionsJob -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -StartRefreshNativeSubscriptionsJob" @"
Start a job to refresh Azure Native subscription for the given subscription IDs. When started, this job will update the Rubrik platform with any changes that have been done on Azure for the respective subscription.
"@ "[GraphQL: startRefreshAzureNativeSubscriptionsJob]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -StartRestoreNativeVirtualMachineJob
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -StartRestoreNativeVirtualMachineJob -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -StartRestoreNativeVirtualMachineJob" @"
Start a job to restore Azure Native virtual machine with the selected snapshot. When started, this will replace the original VM with the selected snapshot.
"@ "[GraphQL: startRestoreAzureNativeVirtualMachineJob]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -StartExportNativeVirtualMachineJob
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -StartExportNativeVirtualMachineJob -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -StartExportNativeVirtualMachineJob" @"
Start a job to export the Azure native virtual machine for a specified snapshot to a specified destination.
"@ "[GraphQL: startExportAzureNativeVirtualMachineJob]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -ExcludeNativeManagedDisksFromSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -ExcludeNativeManagedDisksFromSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -ExcludeNativeManagedDisksFromSnapshot" @"
Exclude the Managed Disks from snapshots, for the specified virtual machines.
"@ "[GraphQL: excludeAzureNativeManagedDisksFromSnapshot]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -StartCreateNativeVirtualMachineSnapshotsJob
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -StartCreateNativeVirtualMachineSnapshotsJob -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -StartCreateNativeVirtualMachineSnapshotsJob" @"
Start a job to create a snapshot for the Azure Native virtual machine identified by the IDs. When started, this will start taking an on-demand snapshot of the selected VMs as per the SLA Policy assigned to the respective VMs.
"@ "[GraphQL: startCreateAzureNativeVirtualMachineSnapshotsJob]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -StartDisableNativeSubscriptionProtectionJob
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -StartDisableNativeSubscriptionProtectionJob -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -StartDisableNativeSubscriptionProtectionJob" @"
Start a job to disable protection for a specified Azure subscription.
"@ "[GraphQL: startDisableAzureNativeSubscriptionProtectionJob]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -StartCreateNativeManagedDiskSnapshotsJob
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -StartCreateNativeManagedDiskSnapshotsJob -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -StartCreateNativeManagedDiskSnapshotsJob" @"
Start a job to create snapshots of the Azure Native Managed Disks identified by the given IDs. When started, this will start taking an on-demand snapshot of the selected disks as per the SLA Policy assigned to the respective disks.
"@ "[GraphQL: startCreateAzureNativeManagedDiskSnapshotsJob]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -StartExportNativeManagedDiskJob
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -StartExportNativeManagedDiskJob -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -StartExportNativeManagedDiskJob" @"
Start a job to export the specified Azure Native Managed Disks to the desired destination.
"@ "[GraphQL: startExportAzureNativeManagedDiskJob]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -StartExportSqlDatabaseDbJob
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -StartExportSqlDatabaseDbJob -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -StartExportSqlDatabaseDbJob" @"
Start a job to export Azure SQL Database. The job creates a new Azure SQL Database with the same properties as that of the instance that is exported.
"@ "[GraphQL: startExportAzureSqlDatabaseDbJob]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -StartExportSqlManagedInstanceDbJob
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -StartExportSqlManagedInstanceDbJob -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -StartExportSqlManagedInstanceDbJob" @"
Start a job to export Azure SQL Managed Instance database. The job creates a new Azure SQL Managed Instance database with the same properties as that of the instance that is exported.
"@ "[GraphQL: startExportAzureSqlManagedInstanceDbJob]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -CreateAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -CreateAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -CreateAccount" @"

"@ "[GraphQL: createAzureAccount]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -UpdateAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -UpdateAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -UpdateAccount" @"

"@ "[GraphQL: updateAzureAccount]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -CreateAutomaticTargetMapping
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -CreateAutomaticTargetMapping -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -CreateAutomaticTargetMapping" @"

"@ "[GraphQL: createAutomaticAzureTargetMapping]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -CreateCloudNativeStorageSetting
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -CreateCloudNativeStorageSetting -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -CreateCloudNativeStorageSetting" @"
Creates Storage Settings for the archival of azure cloud native protected objects
"@ "[GraphQL: createCloudNativeAzureStorageSetting]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -CreateCloudNativeRcvStorageSetting
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -CreateCloudNativeRcvStorageSetting -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -CreateCloudNativeRcvStorageSetting" @"
Create Rubrik Cloud Vault storage settings for archiving azure cloud native protected objects.
"@ "[GraphQL: createCloudNativeRcvAzureStorageSetting]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -UpdateAutomaticTargetMapping
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -UpdateAutomaticTargetMapping -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -UpdateAutomaticTargetMapping" @"

"@ "[GraphQL: updateAutomaticAzureTargetMapping]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -UpdateCloudNativeStorageSetting
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -UpdateCloudNativeStorageSetting -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -UpdateCloudNativeStorageSetting" @"

"@ "[GraphQL: updateCloudNativeAzureStorageSetting]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -UpdateCloudNativeRcvStorageSetting
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -UpdateCloudNativeRcvStorageSetting -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -UpdateCloudNativeRcvStorageSetting" @"
Updates an existing Rubrik Cloud Vault Storage Settings for the archival of azure cloud native protected objects.
"@ "[GraphQL: updateCloudNativeRcvAzureStorageSetting]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -CreateTarget
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -CreateTarget -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -CreateTarget" @"
Creates an Azure archival target on the Rubrik cluster.
"@ "[GraphQL: createAzureTarget]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -UpdateTarget
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -UpdateTarget -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -UpdateTarget" @"

"@ "[GraphQL: updateAzureTarget]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -CreateReaderTarget
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -CreateReaderTarget -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -CreateReaderTarget" @"
Creates reader type for Azure archival location on a CDM cluster.
"@ "[GraphQL: createAzureReaderTarget]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -StartCloudAccountOauth
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -StartCloudAccountOauth -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -StartCloudAccountOauth" @"
Initiates a session before doing Azure OAuth flow. If a custom app is configured for the tenant, the client ID of the custom app is returned. Otherwise, the client ID of the default app is returned.
"@ "[GraphQL: startAzureCloudAccountOauth]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -CompleteCloudAccountOauth
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -CompleteCloudAccountOauth -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -CompleteCloudAccountOauth" @"
Complete the Azure OAuth flow and pass the authorization code.
"@ "[GraphQL: completeAzureCloudAccountOauth]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -SetCloudAccountCustomerAppCredential
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -SetCloudAccountCustomerAppCredential -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -SetCloudAccountCustomerAppCredential" @"
Set credentials for the customer application, for the tenant domain name.
"@ "[GraphQL: setAzureCloudAccountCustomerAppCredentials]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -AddCloudAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -AddCloudAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -AddCloudAccount" @"
Add the Azure Subscriptions cloud account for the given feature.
"@ "[GraphQL: addAzureCloudAccount]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -AddCloudAccountWithoutOauth
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -AddCloudAccountWithoutOauth -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -AddCloudAccountWithoutOauth" @"
Add the Azure Subscription cloud account for the given feature without OAuth.
"@ "[GraphQL: addAzureCloudAccountWithoutOauth]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -DeleteCloudAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -DeleteCloudAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -DeleteCloudAccount" @"
Delete the Azure Subscriptions cloud account for the given feature.
"@ "[GraphQL: deleteAzureCloudAccount]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -DeleteCloudAccountWithoutOauth
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -DeleteCloudAccountWithoutOauth -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -DeleteCloudAccountWithoutOauth" @"
Delete the Azure Subscriptions cloud account for the given feature without OAuth.
"@ "[GraphQL: deleteAzureCloudAccountWithoutOauth]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -UpgradeCloudAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -UpgradeCloudAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -UpgradeCloudAccount" @"
Update permissions of the Azure Subscriptions cloud account for given feature.
"@ "[GraphQL: upgradeAzureCloudAccount]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -UpdateCustomerAppPermissionForSql
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -UpdateCustomerAppPermissionForSql -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -UpdateCustomerAppPermissionForSql" @"
Updates the Azure app for the specified account in an idempotent manner to support Azure SQL Database and  Managed Instance Database authentication.
"@ "[GraphQL: updateCustomerAppPermissionForAzureSql]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -StartDisableCloudAccountJob
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -StartDisableCloudAccountJob -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -StartDisableCloudAccountJob" @"
Start on-demand jobs to disable the feature for the given Azure Cloud Accounts. When completed, the status of cloud account feature will change to Disabled and the feature will become eligible to be deleted.
"@ "[GraphQL: startDisableAzureCloudAccountJob]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -UpdateCloudAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -UpdateCloudAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -UpdateCloudAccount" @"
Update names of the Azure Subscriptions cloud account and regions for the given feature.
"@ "[GraphQL: updateAzureCloudAccount]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -MapCloudAccountToPersistentStorageLocation
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -MapCloudAccountToPersistentStorageLocation -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -MapCloudAccountToPersistentStorageLocation" @"
Map Azure cloud accounts to a persistent storage location.
"@ "[GraphQL: mapAzureCloudAccountToPersistentStorageLocation]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -AddCloudAccountExocomputeConfiguration
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -AddCloudAccountExocomputeConfiguration -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -AddCloudAccountExocomputeConfiguration" @"
Add Exocompute configurations for an Azure Cloud Account.
"@ "[GraphQL: addAzureCloudAccountExocomputeConfigurations]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -DeleteCloudAccountExocomputeConfiguration
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -DeleteCloudAccountExocomputeConfiguration -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -DeleteCloudAccountExocomputeConfiguration" @"
Delete Exocompute configurations for an Azure Cloud Account.
"@ "[GraphQL: deleteAzureCloudAccountExocomputeConfigurations]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -MapCloudAccountExocomputeSubscription
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -MapCloudAccountExocomputeSubscription -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -MapCloudAccountExocomputeSubscription" @"
Map Azure cloud accounts to an Exocompute subscription.
"@ "[GraphQL: mapAzureCloudAccountExocomputeSubscription]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -UnmapCloudAccountExocomputeSubscription
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -UnmapCloudAccountExocomputeSubscription -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -UnmapCloudAccountExocomputeSubscription" @"
Unmap Azure cloud accounts from the mapped Exocompute subscription.
"@ "[GraphQL: unmapAzureCloudAccountExocomputeSubscription]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -UpgradeCloudAccountPermissionsWithoutOauth
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -UpgradeCloudAccountPermissionsWithoutOauth -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -UpgradeCloudAccountPermissionsWithoutOauth" @"
Set Azure Cloud Account feature status to Connected from Update Permissions state without any permission validation. It should be used by caution from cloud accounts which have been set up without using OAuth, only after adding the latest permissions that are required.
"@ "[GraphQL: upgradeAzureCloudAccountPermissionsWithoutOauth]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -OauthConsentKickoff
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -OauthConsentKickoff -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -OauthConsentKickoff" @"
Kicks off an OAuth consent flow for Azure resource access.
"@ "[GraphQL: azureOauthConsentKickoff]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -OauthConsentComplete
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -OauthConsentComplete -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -OauthConsentComplete" @"
Completes an OAuth consent flow for Azure resource access.
"@ "[GraphQL: azureOauthConsentComplete]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -CreateSaasAppAad
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -CreateSaasAppAad -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -CreateSaasAppAad" @"
Create or get an Azure AAD application.
"@ "[GraphQL: createAzureSaasAppAad]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -CreateCluster
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -CreateCluster -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -CreateCluster" @"
Create a Rubrik Cloud Cluster on Azure.
"@ "[GraphQL: createAzureCluster]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -DeleteCluster
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -DeleteCluster -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -DeleteCluster" @"
Delete a Rubrik Cloud Cluster on Azure.
"@ "[GraphQL: deleteAzureCluster]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -KickoffAdAppSetup
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -KickoffAdAppSetup -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -KickoffAdAppSetup" @"
Initiates the Azure AD app creation flow.
"@ "[GraphQL: kickoffAzureAdAppSetup]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -CompleteAdAppSetup
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -CompleteAdAppSetup -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -CompleteAdAppSetup" @"
Completes the creation flow for an Azure AD app.
"@ "[GraphQL: completeAzureAdAppSetup]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -DeleteAdDirectory
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -DeleteAdDirectory -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -DeleteAdDirectory" @"
Deletes an Azure AD directory.
"@ "[GraphQL: deleteAzureAdDirectory]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -BackupAdDirectory
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -BackupAdDirectory -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -BackupAdDirectory" @"
Backs up the Azure AD directory.
"@ "[GraphQL: backupAzureAdDirectory]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -InitiateAdAppUpdate
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -InitiateAdAppUpdate -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -InitiateAdAppUpdate" @"
Initiates an update to the Azure AD directory App.
"@ "[GraphQL: initiateAzureAdAppUpdate]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateAzure -CompleteAdAppUpdate
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzure -CompleteAdAppUpdate -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzure -CompleteAdAppUpdate" @"
Completes an update to the Azure AD directory App.
"@ "[GraphQL: completeAzureAdAppUpdate]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"



# -------------------------------------------------------------------
# Invoke-RscMutateAzureO365 -SetupExocompute
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateAzureO365 -SetupExocompute -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateAzureO365 -SetupExocompute" @"
Sets up Exocompute for an O365 subscription.
"@ "[GraphQL: setupAzureO365Exocompute]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"



# -------------------------------------------------------------------
# Invoke-RscMutateCassandra -RecoverSource
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateCassandra -RecoverSource -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateCassandra -RecoverSource" @"
Recover a cassandra source.
"@ "[GraphQL: recoverCassandraSource]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateCassandra -CreateSource
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateCassandra -CreateSource -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateCassandra -CreateSource" @"
Create a cassandra source.
"@ "[GraphQL: createCassandraSource]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateCassandra -UpdateSource
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateCassandra -UpdateSource -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateCassandra -UpdateSource" @"
Update a cassandra source.
"@ "[GraphQL: updateCassandraSource]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateCassandra -DeleteSource
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateCassandra -DeleteSource -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateCassandra -DeleteSource" @"
Delete a cassandra source.
"@ "[GraphQL: deleteCassandraSource]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateCassandra -BulkDeleteSource
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateCassandra -BulkDeleteSource -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateCassandra -BulkDeleteSource" @"
Bulk Delete cassandra sources.
"@ "[GraphQL: bulkDeleteCassandraSources]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"



# -------------------------------------------------------------------
# Invoke-RscMutateCluster -AddNodesToCloud
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateCluster -AddNodesToCloud -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateCluster -AddNodesToCloud" @"
Add nodes to cloud cluster.
"@ "[GraphQL: addNodesToCloudCluster]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateCluster -RegisterCloud
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateCluster -RegisterCloud -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateCluster -RegisterCloud" @"
Register a cloud cluster.
"@ "[GraphQL: registerCloudCluster]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateCluster -CreateFailover
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateCluster -CreateFailover -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateCluster -CreateFailover" @"
Create a failover cluster

Supported in v5.2+
Create a failover cluster.
"@ "[GraphQL: createFailoverCluster]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateCluster -UpdateFailover
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateCluster -UpdateFailover -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateCluster -UpdateFailover" @"
Update a failover cluster

Supported in v5.2+
Update failover cluster with specified properties.
"@ "[GraphQL: updateFailoverCluster]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateCluster -DeleteFailover
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateCluster -DeleteFailover -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateCluster -DeleteFailover" @"
Delete a failover cluster

Supported in v5.2+
Delete a failover cluster.
"@ "[GraphQL: deleteFailoverCluster]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateCluster -BulkDeleteFailover
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateCluster -BulkDeleteFailover -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateCluster -BulkDeleteFailover" @"
Delete the provided failover clusters

Supported in v5.3+
Delete the provided failover clusters.
"@ "[GraphQL: bulkDeleteFailoverCluster]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateCluster -CreateK8s
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateCluster -CreateK8s -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateCluster -CreateK8s" @"
Add a Kubernetes cluster.
"@ "[GraphQL: createK8sCluster]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateCluster -RefreshK8s
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateCluster -RefreshK8s -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateCluster -RefreshK8s" @"
Refresh resources of a Kubernetes cluster.
"@ "[GraphQL: refreshK8sCluster]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateCluster -ArchiveK8s
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateCluster -ArchiveK8s -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateCluster -ArchiveK8s" @"
Archive a Kubernetes cluster.
"@ "[GraphQL: archiveK8sCluster]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateCluster -RemoveCdm
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateCluster -RemoveCdm -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateCluster -RemoveCdm" @"

"@ "[GraphQL: removeCdmCluster]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateCluster -RecoverCloud
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateCluster -RecoverCloud -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateCluster -RecoverCloud" @"
Recover a Rubrik Cloud Cluster.
"@ "[GraphQL: recoverCloudCluster]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"



# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -RegisterScvmm
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -RegisterScvmm -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateHyperv -RegisterScvmm" @"
Register HyperV SCVMM to Rubrik Cluster.
"@ "[GraphQL: registerHypervScvmm]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -ScvmmUpdate
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -ScvmmUpdate -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateHyperv -ScvmmUpdate" @"
Update properties for a given HyperV SCVMM.
"@ "[GraphQL: hypervScvmmUpdate]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -ScvmmDelete
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -ScvmmDelete -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateHyperv -ScvmmDelete" @"
Delete a given HyperV SCVMM.
"@ "[GraphQL: hypervScvmmDelete]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -RefreshScvmm
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -RefreshScvmm -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateHyperv -RefreshScvmm" @"
Refresh a given HyperV SCVMM.
"@ "[GraphQL: refreshHypervScvmm]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -OnDemandSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -OnDemandSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateHyperv -OnDemandSnapshot" @"
Create on-demand VM snapshot

Supported in v5.0+
Create an on-demand snapshot for the given VM ID.
"@ "[GraphQL: hypervOnDemandSnapshot]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -DeleteAllSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -DeleteAllSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateHyperv -DeleteAllSnapshot" @"
Delete all snapshots of VM

Supported in v5.0+
Delete all snapshots of a virtual machine.
"@ "[GraphQL: hypervDeleteAllSnapshots]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -ExportVirtualMachine
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -ExportVirtualMachine -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateHyperv -ExportVirtualMachine" @"
Export VM snapshot

Supported in v5.0+
Export snapshot of a vm.
"@ "[GraphQL: exportHypervVirtualMachine]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -DownloadVirtualMachineSnapshotFile
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -DownloadVirtualMachineSnapshotFile -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateHyperv -DownloadVirtualMachineSnapshotFile" @"
Download files from a Hyper-V VM backup

Supported in v5.0+
Start an asynchronous job to download multiple files and folders from a specified Hyper-V VM backup. The response returns an asynchrounous request ID. Get the URL for downloading the ZIP file including the specific files/folders by sending a GET request to 'hyperv/vm/request/{id}'.
"@ "[GraphQL: downloadHypervVirtualMachineSnapshotFiles]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -InstantRecoverVirtualMachineSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -InstantRecoverVirtualMachineSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateHyperv -InstantRecoverVirtualMachineSnapshot" @"
Creates an instant recover request that restores a target VM from the given Rubrik-hosted-snapshot

Supported in v5.0+
The VM will be started with networking enabled. If the VM does not exist anymore, a new VM will be created.
"@ "[GraphQL: instantRecoverHypervVirtualMachineSnapshot]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -RestoreVirtualMachineSnapshotFile
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -RestoreVirtualMachineSnapshotFile -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateHyperv -RestoreVirtualMachineSnapshotFile" @"
Restore files from snapshot

Supported in v5.0+
Restore files from a snapshot to the original source location.
"@ "[GraphQL: restoreHypervVirtualMachineSnapshotFiles]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -RegisterAgentVirtualMachine
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -RegisterAgentVirtualMachine -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateHyperv -RegisterAgentVirtualMachine" @"
Register the agent installed in VM

Supported in v5.0+
Register the agent that installed in VM.
"@ "[GraphQL: registerAgentHypervVirtualMachine]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -DeleteVirtualMachineSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -DeleteVirtualMachineSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateHyperv -DeleteVirtualMachineSnapshot" @"
Delete VM snapshot

Supported in v5.0+
Delete a snapshot by expiring it. Snapshot is expired only if it is a manual snapshot or a snapshot of an unprotected vm.
"@ "[GraphQL: deleteHypervVirtualMachineSnapshot]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -DownloadVirtualMachineSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -DownloadVirtualMachineSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateHyperv -DownloadVirtualMachineSnapshot" @"
Creates a download from archival request

Supported in v5.0+
Download a snapshot from archival.
"@ "[GraphQL: downloadHypervVirtualMachineSnapshot]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -CreateVirtualMachineSnapshotMount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -CreateVirtualMachineSnapshotMount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateHyperv -CreateVirtualMachineSnapshotMount" @"
Create a live mount request

Supported in v5.0+
Create a live mount request with given configuration.
"@ "[GraphQL: createHypervVirtualMachineSnapshotMount]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -UpdateVirtualMachineSnapshotMount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -UpdateVirtualMachineSnapshotMount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateHyperv -UpdateVirtualMachineSnapshotMount" @"
Power a Live Mount on and off

Supported in v5.0+
Power a specified Live Mount virtual machine on or off. Pass **_true_** to power the virtual machine on and pass **_false_** to power the virtual machine off.
"@ "[GraphQL: updateHypervVirtualMachineSnapshotMount]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -DeleteVirtualMachineSnapshotMount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -DeleteVirtualMachineSnapshotMount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateHyperv -DeleteVirtualMachineSnapshotMount" @"
Requst to delete a live mount

Supported in v5.0+
Create a request to delete a live mount.
"@ "[GraphQL: deleteHypervVirtualMachineSnapshotMount]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -RefreshServer
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -RefreshServer -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateHyperv -RefreshServer" @"
Refresh Hyper-V host metadata

Supported in v5.0+
Create a job to refresh the metadata for the specified Hyper-V host.
"@ "[GraphQL: refreshHypervServer]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -BatchOnDemandBackupVm
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -BatchOnDemandBackupVm -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateHyperv -BatchOnDemandBackupVm" @"
Takes bulk on-demand backup of Hyper-V virtual machines

Supported in v9.0
Takes on-demand backup of multiple specified Hyper-V virtual machines.
"@ "[GraphQL: batchOnDemandBackupHypervVm]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -BatchExportVm
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -BatchExportVm -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateHyperv -BatchExportVm" @"
Exports a snapshot from each member of a set of virtual machines

Supported in v7.0+
Export a snapshot from each member of a set of virtual machines.
"@ "[GraphQL: batchExportHypervVm]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -BatchMountVm
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -BatchMountVm -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateHyperv -BatchMountVm" @"
Mount snapshots from multiple virtual machines

Supported in v7.0+
Mounts a batch of snapshots from a group of specified virtual machines.
"@ "[GraphQL: batchMountHypervVm]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -BatchInstantRecoverVm
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -BatchInstantRecoverVm -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateHyperv -BatchInstantRecoverVm" @"
Instantly recovers snapshots from multiple virtual machines

Supported in v7.0+
Instantly recovers a batch of snapshots from a group of specified virtual machines.
"@ "[GraphQL: batchInstantRecoverHypervVm]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -UpdateVirtualMachine
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -UpdateVirtualMachine -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateHyperv -UpdateVirtualMachine" @"
Update VM

Supported in v5.0+
Update VM with specified properties.
"@ "[GraphQL: updateHypervVirtualMachine]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateHyperv -DownloadSnapshotFromLocation
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateHyperv -DownloadSnapshotFromLocation -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateHyperv -DownloadSnapshotFromLocation" @"
Download a snapshot from a replication target

Supported in v7.0+
Initiates a job to download a snapshot from the specified location when the snapshot does not exist locally. The specified location has to be a replication target connected to this Rubrik cluster. If an SLA Domain is not provided, the snapshot will be retained forever.
"@ "[GraphQL: downloadHypervSnapshotFromLocation]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"



# -------------------------------------------------------------------
# Invoke-RscMutateLdap -UpdateIntegration
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateLdap -UpdateIntegration -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateLdap -UpdateIntegration" @"
Mutate LDAP integration.
"@ "[GraphQL: updateLdapIntegration]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateLdap -RemoveIntegration
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateLdap -RemoveIntegration -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateLdap -RemoveIntegration" @"
Remove LDAP integration.
"@ "[GraphQL: removeLdapIntegration]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateLdap -DeletePrincipal
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateLdap -DeletePrincipal -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateLdap -DeletePrincipal" @"

"@ "[GraphQL: deleteLdapPrincipals]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateLdap -SetMfaSetting
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateLdap -SetMfaSetting -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateLdap -SetMfaSetting" @"
Update the MFA settings for the given LDAP integration. Return true when the operation succeeds.
"@ "[GraphQL: setLdapMfaSetting]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"



# -------------------------------------------------------------------
# Invoke-RscMutateMongo -AddSource
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMongo -AddSource -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateMongo -AddSource" @"
Add a new MongoDB source

Supported in v8.1+
Adds a new MongoDB source to the Rubrik Cluster.
"@ "[GraphQL: addMongoSource]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateMongo -DeleteSource
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMongo -DeleteSource -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateMongo -DeleteSource" @"
Delete a MongoDB source

Supported in v8.1+
Deletes a specific MongoDB source.
"@ "[GraphQL: deleteMongoSource]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateMongo -DiscoverSource
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMongo -DiscoverSource -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateMongo -DiscoverSource" @"
Discover a MongoDB source on-demand

Supported in v8.1+
Initiates an on-demand job to discover a MongoDB source.
"@ "[GraphQL: discoverMongoSource]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateMongo -PatchSource
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMongo -PatchSource -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateMongo -PatchSource" @"
Edit a MongoDB source

Supported in v8.1+
Edits the properties of a MongoDB source. Hosts, name, and type of MongoDB cannot be changed once added.
"@ "[GraphQL: patchMongoSource]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateMongo -RetryAddSource
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMongo -RetryAddSource -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateMongo -RetryAddSource" @"
Update a MongoDB source

Supported in v8.1+
Updates a MongoDB source details. You can use this endpoint for updating MongoDB source details when the request to add a source fails.
"@ "[GraphQL: retryAddMongoSource]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateMongo -AssignSlaToDbCollection
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMongo -AssignSlaToDbCollection -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateMongo -AssignSlaToDbCollection" @"
Assign SLA Domain to MongoDB collection objects

Supported in v8.1+
Assigns SLA Domain to the given MongoDB collection objects.
"@ "[GraphQL: assignSlaToMongoDbCollection]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateMongo -RecoverSource
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMongo -RecoverSource -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateMongo -RecoverSource" @"
Recover a MongoDB source from Rubrik CDM cluster.
"@ "[GraphQL: recoverMongoSource]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateMongo -CreatedbSource
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMongo -CreatedbSource -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateMongo -CreatedbSource" @"
Register a new MongoDB source to NoSQL cluster. 
For MongoDB, the term ""source"" is usually used for either a replica set or a sharded cluster.
For more info on MongoDB cluster, refer to: https://docs.mongodb.com/manual/introduction/.
"@ "[GraphQL: createMongodbSource]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateMongo -UpdatedbSource
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMongo -UpdatedbSource -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateMongo -UpdatedbSource" @"
Modifies configuration for a registered MongoDB source in NoSQL cluster.
"@ "[GraphQL: updateMongodbSource]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateMongo -DeletedbSource
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMongo -DeletedbSource -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateMongo -DeletedbSource" @"
Remove a registered MongoDB source from NoSQL cluster.
"@ "[GraphQL: deleteMongodbSource]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateMongo -BulkDeletedbSource
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMongo -BulkDeletedbSource -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateMongo -BulkDeletedbSource" @"
Bulk Delete Sources

Supported in m3.2.0-m4.2.0.
"@ "[GraphQL: bulkDeleteMongodbSources]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateMongo -RecoverdbSource
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMongo -RecoverdbSource -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateMongo -RecoverdbSource" @"
Recover a MongoDB source from NoSQL cluster.
"@ "[GraphQL: recoverMongodbSource]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"



# -------------------------------------------------------------------
# Invoke-RscMutateMssql -BrowseDatabaseSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMssql -BrowseDatabaseSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateMssql -BrowseDatabaseSnapshot" @"
List snapshots and logs from a Mssql Database. This endpoint is only used to fetch data, but uses a mutation instead of a query due to limitations with the CDM API.
"@ "[GraphQL: browseMssqlDatabaseSnapshot]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateMssql -ExportDatabase
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMssql -ExportDatabase -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateMssql -ExportDatabase" @"
Create a request to export a Microsoft SQL database.
"@ "[GraphQL: exportMssqlDatabase]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateMssql -RestoreDatabase
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMssql -RestoreDatabase -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateMssql -RestoreDatabase" @"
Create a request to restore a Microsoft SQL database.
"@ "[GraphQL: restoreMssqlDatabase]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateMssql -BulkUpdateDb
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMssql -BulkUpdateDb -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateMssql -BulkUpdateDb" @"
Update multiple Microsoft SQL databases with the specified properties.
"@ "[GraphQL: bulkUpdateMssqlDbs]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateMssql -TakeLogBackup
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMssql -TakeLogBackup -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateMssql -TakeLogBackup" @"
Take an on-demand log backup for a Microsoft SQL database.
"@ "[GraphQL: takeMssqlLogBackup]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateMssql -CreateOnDemandBackup
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMssql -CreateOnDemandBackup -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateMssql -CreateOnDemandBackup" @"
Take an on-demand backup of a Microsoft SQL Database
"@ "[GraphQL: createOnDemandMssqlBackup]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateMssql -DeleteDbSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMssql -DeleteDbSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateMssql -DeleteDbSnapshot" @"
Delete snapshots of a Microsoft SQL Database.
"@ "[GraphQL: deleteMssqlDbSnapshots]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateMssql -DeleteLiveMount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMssql -DeleteLiveMount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateMssql -DeleteLiveMount" @"
Delete a Live Mount of a SQL Server database

Supported in v5.0+
Create an async request to delete a Live Mount of a SQL Server database. Poll the task status by using /mssql/request/{id}.
"@ "[GraphQL: deleteMssqlLiveMount]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateMssql -BulkCreateOnDemandBackup
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMssql -BulkCreateOnDemandBackup -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateMssql -BulkCreateOnDemandBackup" @"
Take a bulk on-demand backup of a Microsoft SQL Database.
"@ "[GraphQL: bulkCreateOnDemandMssqlBackup]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateMssql -CreateLiveMount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMssql -CreateLiveMount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateMssql -CreateLiveMount" @"
Create live mount of a Microsoft SQL Database.
"@ "[GraphQL: createMssqlLiveMount]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateMssql -UpdateLogShippingConfiguration
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMssql -UpdateLogShippingConfiguration -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateMssql -UpdateLogShippingConfiguration" @"
Update log shipping configuration of a Microsoft SQL Database.
"@ "[GraphQL: updateMssqlLogShippingConfiguration]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateMssql -DownloadDatabaseFilesFromArchivalLocation
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMssql -DownloadDatabaseFilesFromArchivalLocation -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateMssql -DownloadDatabaseFilesFromArchivalLocation" @"
Download Microsoft SQL Database backup files from archival location.
"@ "[GraphQL: downloadMssqlDatabaseFilesFromArchivalLocation]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateMssql -DownloadDatabaseBackupFile
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMssql -DownloadDatabaseBackupFile -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateMssql -DownloadDatabaseBackupFile" @"
Downloads a list of snapshot and log backups from a Microsoft SQL database

Supported in v5.2+
Downloads a list of snapshot and log backups from a Microsoft SQL database.
"@ "[GraphQL: downloadMssqlDatabaseBackupFiles]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateMssql -AssignSlaDomainPropertie
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMssql -AssignSlaDomainPropertie -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateMssql -AssignSlaDomainPropertie" @"
Assign SLA domain properties to Mssql objects.
"@ "[GraphQL: assignMssqlSlaDomainProperties]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateMssql -UpdateDefaultPropertie
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMssql -UpdateDefaultPropertie -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateMssql -UpdateDefaultPropertie" @"
Update the default properties for Microsoft SQL databases.
"@ "[GraphQL: updateMssqlDefaultProperties]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateMssql -CreateLogShippingConfiguration
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMssql -CreateLogShippingConfiguration -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateMssql -CreateLogShippingConfiguration" @"
Create log shipping configuration of a Microsoft SQL Database.
"@ "[GraphQL: createMssqlLogShippingConfiguration]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateMssql -AssignSlaDomainPropertiesAsync
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateMssql -AssignSlaDomainPropertiesAsync -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateMssql -AssignSlaDomainPropertiesAsync" @"
Assign SLA domain properties to Mssql objects.
"@ "[GraphQL: assignMssqlSlaDomainPropertiesAsync]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"



# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -CreateCluster
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -CreateCluster -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateNutanix -CreateCluster" @"
Add Nutanix cluster

Supported in v5.0+
Create a Nutanix cluster object by providing an address and account credentials for Prism. Initiates an asynchronous job to establish a connection with the cluster and retrieve all metadata. Use GET /nutanix_cluster/{id}/status to check status.
"@ "[GraphQL: createNutanixCluster]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -RefreshCluster
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -RefreshCluster -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateNutanix -RefreshCluster" @"
Refresh Nutanix cluster metadata

Supported in v5.0+
Create a job to refresh the metadata for the specified Nutanix cluster.
"@ "[GraphQL: refreshNutanixCluster]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -UpdateCluster
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -UpdateCluster -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateNutanix -UpdateCluster" @"
Patch Nutanix cluster

Supported in v5.0+
Patch the host, credentials, and/or CA certs of the specified Nutanix cluster object.
"@ "[GraphQL: updateNutanixCluster]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -DeleteCluster
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -DeleteCluster -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateNutanix -DeleteCluster" @"
Remove Nutanix cluster

Supported in v5.0+
Initiates an asynchronous job to remove a Nutanix cluster object. The Nutanix cluster cannot have VMs mounted through the Rubrik cluster.
"@ "[GraphQL: deleteNutanixCluster]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -RegisterAgentVm
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -RegisterAgentVm -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateNutanix -RegisterAgentVm" @"
v5.0-v8.0: Register the agent installed on the Nutanix VM
v8.1+: Register the agent installed on the Nutanix virtual machine

Supported in v5.0+
v5.0-v5.3: Register the agent installed on the Nutanix VM
v6.0-v8.0: Register the agent installed on the Nutanix VM.
v8.1+: Register the agent installed on the Nutanix virtual machine.
"@ "[GraphQL: registerAgentNutanixVm]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -UpdateVm
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -UpdateVm -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateNutanix -UpdateVm" @"
v5.0-v8.0: Patch VM
v8.1+: Patch virtual machine

Supported in v5.0+
v5.0-v5.3: Patch VM with specified properties
v6.0-v8.0: Patch VM with specified properties.
v8.1+: Patch virtual machine with specified properties.
"@ "[GraphQL: updateNutanixVm]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -CreateOnDemandBackup
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -CreateOnDemandBackup -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateNutanix -CreateOnDemandBackup" @"
v5.0-v8.0: Create on-demand VM snapshot
v8.1+: Create on-demand virtual machine snapshot

Supported in v5.0+
v5.0-v5.3: Create an on-demand snapshot for the given VM ID
v6.0-v8.0: Create an on-demand snapshot for the given VM ID.
v8.1+: Create an on-demand snapshot for the given virtual machine ID.
"@ "[GraphQL: createOnDemandNutanixBackup]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -DeleteSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -DeleteSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateNutanix -DeleteSnapshot" @"
v5.0-v8.0: Delete all snapshots of VM
v8.1+: Delete all snapshots of virtual machine

Supported in v5.0+
Delete all snapshots of a virtual machine.
"@ "[GraphQL: deleteNutanixSnapshots]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -MountSnapshotV1
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -MountSnapshotV1 -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateNutanix -MountSnapshotV1" @"
Initiate a Live Mount of a Nutanix virtual machine snapshot

Supported in v6.0+
Initiates a request to perform a Live Mount of a Nutanix virtual machine snapshot identified by the snapshot ID.
"@ "[GraphQL: mountNutanixSnapshotV1]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -PatchMountV1
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -PatchMountV1 -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateNutanix -PatchMountV1" @"
Change Nutanix Live Mount power status

Supported in v6.0+
Changes the power status of a mounted Nutanix virtual machine.
"@ "[GraphQL: patchNutanixMountV1]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -DeleteMountV1
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -DeleteMountV1 -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateNutanix -DeleteMountV1" @"
Remove a Live Mount of a Nutanix virtual machine snapshot

Supported in v6.0+
Initiates a request to remove a Live Mount of a Nutanix virtual machine snapshot identified by the ID of the Live Mount.
"@ "[GraphQL: deleteNutanixMountV1]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -MigrateMountV1
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -MigrateMountV1 -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateNutanix -MigrateMountV1" @"
Relocate a Nutanix virtual machine to another storage container

Supported in v6.0+
Initiate a request to migrate the virtual disks of a specified Nutanix Live Mount to another storage container. The destination storage container has been specified when the Live Mount was created. The Live Mount will be deleted when the relocation succeeds.
"@ "[GraphQL: migrateNutanixMountV1]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -RestoreFilesSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -RestoreFilesSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateNutanix -RestoreFilesSnapshot" @"
Restore files

Supported in v5.0+
Restore files from a snapshot to the source Nutanix virtual machine.
"@ "[GraphQL: restoreFilesNutanixSnapshot]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -DownloadFilesSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -DownloadFilesSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateNutanix -DownloadFilesSnapshot" @"
v5.0-v8.0: Download files from a Nutanix VM backup
v8.1+: Download files from a Nutanix virtual machine backup

Supported in v5.0+
v5.0-v8.0: Start an asynchronous job to download multiple files and folders from a specified Nutanix VM backup. The response returns an asynchronous request ID. Get the URL for downloading the zip file including the specific files/folders by sending a GET request to 'nutanix/vm/request/{id}'.
v8.1+: Start an asynchronous job to download multiple files and folders from a specified Nutanix virtual machine backup. The response returns an asynchronous request ID. Get the URL for downloading the zip file including the specific files/folders by sending a GET request to 'nutanix/vm/request/{id}'.
"@ "[GraphQL: downloadFilesNutanixSnapshot]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -ExportSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -ExportSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateNutanix -ExportSnapshot" @"
v5.0-v8.0: Export VM snapshot
v8.1+: Export virtual machine snapshot

Supported in v5.0+
v5.0-v8.0: Export snapshot of a vm.
v8.1+: Export snapshot of a virtual machine.
"@ "[GraphQL: exportNutanixSnapshot]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -DownloadSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -DownloadSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateNutanix -DownloadSnapshot" @"
Creates a download from archival request

Supported in v5.0+
Download a snapshot from archival.
"@ "[GraphQL: downloadNutanixSnapshot]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -BatchExportVm
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -BatchExportVm -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateNutanix -BatchExportVm" @"
Exports a snapshot from each member of a set of virtual machines

Supported in v7.0+
Export a snapshot from each member of a set of virtual machines.
"@ "[GraphQL: batchExportNutanixVm]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -BatchMountVm
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -BatchMountVm -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateNutanix -BatchMountVm" @"
Mount snapshots from multiple virtual machines

Supported in v7.0+
Mounts a batch of snapshots from a group of specified virtual machines.
"@ "[GraphQL: batchMountNutanixVm]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -DownloadVmFromLocation
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -DownloadVmFromLocation -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateNutanix -DownloadVmFromLocation" @"
Download a snapshot from a replication target

Supported in v7.0+
Initiates a job to download a snapshot from the specified location when the snapshot does not exist locally. The specified location has to be a replication target connected to this Rubrik cluster. If an SLA Domain is not provided, the snapshot will be retained forever.
"@ "[GraphQL: downloadNutanixVmFromLocation]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -CreatePrismCentral
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -CreatePrismCentral -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateNutanix -CreatePrismCentral" @"
Add Nutanix Prism Central and it's corresponding Prism Elements

Supported in v9.0
Create a Nutanix Prism Central object and refresh the Prism Elements present in it.
"@ "[GraphQL: createNutanixPrismCentral]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -UpdatePrismCentral
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -UpdatePrismCentral -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateNutanix -UpdatePrismCentral" @"
Patch Nutanix Prism Central

Supported in v9.0
Patch the host and credentials of Nutanix Prism Central.
"@ "[GraphQL: updateNutanixPrismCentral]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -DeletePrismCentral
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -DeletePrismCentral -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateNutanix -DeletePrismCentral" @"
Remove Nutanix Prism Central

Supported in v9.0
Initiates an asynchronous job to remove a Nutanix Prism Central object. The Nutanix Clusters attached to the Prism Central cannot have Virtual Machines mounted through the Rubrik cluster.
"@ "[GraphQL: deleteNutanixPrismCentral]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -RefreshPrismCentral
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -RefreshPrismCentral -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateNutanix -RefreshPrismCentral" @"
Refresh Nutanix Prism Central metadata

Supported in v9.0
Initiates a job to refresh the metadata for the specified Nutanix Prism Central and all its associated clusters.
"@ "[GraphQL: refreshNutanixPrismCentral]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateNutanix -BulkOnDemandSnapshotVm
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateNutanix -BulkOnDemandSnapshotVm -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateNutanix -BulkOnDemandSnapshotVm" @"
Take an on-demand snapshot for selected Nutanix virtual machines

Supported in v9.0
Take bulk backups for multiple Nutanix virtual machines.
"@ "[GraphQL: bulkOnDemandSnapshotNutanixVm]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"



# -------------------------------------------------------------------
# Invoke-RscMutateO365 -SaaSSetupKickoff
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -SaaSSetupKickoff -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateO365 -SaaSSetupKickoff" @"

"@ "[GraphQL: o365SaaSSetupKickoff]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -PdlGroup
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -PdlGroup -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateO365 -PdlGroup" @"
Retrieve or create the groups corresponding to the preferred data location and workload pairings for use in role creation.
"@ "[GraphQL: o365PdlGroups]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -SaasSetupComplete
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -SaasSetupComplete -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateO365 -SaasSetupComplete" @"
Completes a Rubrik-Hosted setup flow.
"@ "[GraphQL: o365SaasSetupComplete]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -SetupKickoff
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -SetupKickoff -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateO365 -SetupKickoff" @"
Kicks off an O365 subscription setup flow.
"@ "[GraphQL: o365SetupKickoff]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -AddOrg
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -AddOrg -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateO365 -AddOrg" @"
Adds an O365 org to the account.
"@ "[GraphQL: addO365Org]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -OauthConsentKickoff
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -OauthConsentKickoff -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateO365 -OauthConsentKickoff" @"
Kicks off the OAuth consent flow for an O365 Azure AD App.
"@ "[GraphQL: o365OauthConsentKickoff]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -OauthConsentComplete
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -OauthConsentComplete -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateO365 -OauthConsentComplete" @"
Completes the OAuth consent flow for an O365 Azure AD App.
"@ "[GraphQL: o365OauthConsentComplete]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -CreateAppKickoff
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -CreateAppKickoff -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateO365 -CreateAppKickoff" @"
Kicks off the creation flow for an O365 Azure AD App.
"@ "[GraphQL: createO365AppKickoff]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -CreateAppComplete
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -CreateAppComplete -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateO365 -CreateAppComplete" @"
Completes the creation flow for an O365 Azure AD App.
"@ "[GraphQL: createO365AppComplete]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -InsertCustomerApp
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -InsertCustomerApp -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateO365 -InsertCustomerApp" @"
Inserts a Customer-hosted O365 Azure AD App.
"@ "[GraphQL: insertCustomerO365App]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -UpdateAppAuthStatus
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -UpdateAppAuthStatus -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateO365 -UpdateAppAuthStatus" @"
Update O365 App authentication status to applicable app version.
"@ "[GraphQL: updateO365AppAuthStatus]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -UpdateAppPermission
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -UpdateAppPermission -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateO365 -UpdateAppPermission" @"
Update O365 Azure app permission in Azure AD portal.
"@ "[GraphQL: updateO365AppPermissions]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -DeleteAzureApp
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -DeleteAzureApp -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateO365 -DeleteAzureApp" @"
Deletes an O365 Azure AD App from the account.
"@ "[GraphQL: deleteO365AzureApp]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -BackupMailbox
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -BackupMailbox -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateO365 -BackupMailbox" @"
Backup mailbox workload.
"@ "[GraphQL: backupO365Mailbox]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -BackupOnedrive
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -BackupOnedrive -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateO365 -BackupOnedrive" @"
Take on-demand snapshot for Onedrive.
"@ "[GraphQL: backupO365Onedrive]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -BackupSharepointDrive
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -BackupSharepointDrive -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateO365 -BackupSharepointDrive" @"
Take on-demand snapshot for Sharepoint drive.
"@ "[GraphQL: backupO365SharepointDrive]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -BackupSharepointList
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -BackupSharepointList -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateO365 -BackupSharepointList" @"
Take on-demand snapshot for SharePoint list.
"@ "[GraphQL: backupO365SharepointList]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -BackupSharePointSite
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -BackupSharePointSite -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateO365 -BackupSharePointSite" @"
Take on-demand snapshot for a SharePoint site.
"@ "[GraphQL: backupO365SharePointSite]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -BackupTeam
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -BackupTeam -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateO365 -BackupTeam" @"
Take on-demand snapshot for Teams.
"@ "[GraphQL: backupO365Team]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -RestoreTeamsFile
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -RestoreTeamsFile -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateO365 -RestoreTeamsFile" @"
Restore Team files.
"@ "[GraphQL: restoreO365TeamsFiles]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -RestoreTeamsConversation
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -RestoreTeamsConversation -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateO365 -RestoreTeamsConversation" @"
Restore Team conversations.
"@ "[GraphQL: restoreO365TeamsConversations]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -RestoreSnappable
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -RestoreSnappable -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateO365 -RestoreSnappable" @"
Restores an O365 snappable.
"@ "[GraphQL: restoreO365Snappable]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -RefreshOrg
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -RefreshOrg -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateO365 -RefreshOrg" @"
Refreshes an O365 org.
"@ "[GraphQL: refreshO365Org]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -DeleteOrg
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -DeleteOrg -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateO365 -DeleteOrg" @"
Deletes an O365 org from the account.
"@ "[GraphQL: deleteO365Org]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -RestoreMailbox
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -RestoreMailbox -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateO365 -RestoreMailbox" @"
Restores an Exchange mailbox.
"@ "[GraphQL: restoreO365Mailbox]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -ExportMailbox
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -ExportMailbox -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateO365 -ExportMailbox" @"
Exports an Exchange mailbox.
"@ "[GraphQL: exportO365Mailbox]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -SetServiceAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -SetServiceAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateO365 -SetServiceAccount" @"
Sets the service account for the org.
"@ "[GraphQL: setO365ServiceAccount]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -EnableSharePoint
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -EnableSharePoint -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateO365 -EnableSharePoint" @"
Enables SharePoint protection in the exocompute cluster.
"@ "[GraphQL: enableO365SharePoint]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -EnableTeam
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -EnableTeam -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateO365 -EnableTeam" @"
Enables Teams protection in the exocompute cluster.
"@ "[GraphQL: enableO365Teams]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -DeleteServiceAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -DeleteServiceAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateO365 -DeleteServiceAccount" @"
Deletes the service account for an org.
"@ "[GraphQL: deleteO365ServiceAccount]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateO365 -UpdateOrgCustomName
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateO365 -UpdateOrgCustomName -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateO365 -UpdateOrgCustomName" @"
Update the custom name for an O365 Organization.
"@ "[GraphQL: updateO365OrgCustomName]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"



# -------------------------------------------------------------------
# Invoke-RscMutateOracle -BulkUpdateHost
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateOracle -BulkUpdateHost -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateOracle -BulkUpdateHost" @"
Update Oracle Hosts

Supported in v5.2+
Update properties to Oracle Host objects.
"@ "[GraphQL: bulkUpdateOracleHosts]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateOracle -RefreshDatabase
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateOracle -RefreshDatabase -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateOracle -RefreshDatabase" @"
Refresh an Oracle database

Supported in v6.0+
Starts an asynchronous job to refresh the Oracle database metadata by querying the database instances on all the underlying hosts.
"@ "[GraphQL: refreshOracleDatabase]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateOracle -UpdateDataGuardGroup
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateOracle -UpdateDataGuardGroup -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateOracle -UpdateDataGuardGroup" @"
Update an Oracle Data Guard group

Supported in v6.0+
Update properties of an Oracle Data Guard group object.
"@ "[GraphQL: updateOracleDataGuardGroup]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateOracle -DeleteAllDatabaseSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateOracle -DeleteAllDatabaseSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateOracle -DeleteAllDatabaseSnapshot" @"
Delete Oracle database snapshots

Supported in v5.0+
Delete all snapshots for a specified Oracle database object. For the operation to succeed the referenced database must not be assigned to an SLA Domain.
"@ "[GraphQL: deleteAllOracleDatabaseSnapshots]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateOracle -TakeOnDemandDatabaseSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateOracle -TakeOnDemandDatabaseSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateOracle -TakeOnDemandDatabaseSnapshot" @"
On-demand backup of an Oracle database

Supported in v5.0+
Create an asynchronous job for an on-demand snapshot of an Oracle database. The response includes an ID for the asynchronous job request. To see the status of the request, poll /oracle/request/{id}.
"@ "[GraphQL: takeOnDemandOracleDatabaseSnapshot]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateOracle -TakeOnDemandLogSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateOracle -TakeOnDemandLogSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateOracle -TakeOnDemandLogSnapshot" @"
On-demand log backup for an Oracle database log

Supported in v5.0+
Create an asynchronous job for an on-demand backup of an Oracle database log. The response includes an ID for the asynchronous job request.  To see the status of the request, poll /oracle/request/{id}.
"@ "[GraphQL: takeOnDemandOracleLogSnapshot]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateOracle -BulkUpdateRac
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateOracle -BulkUpdateRac -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateOracle -BulkUpdateRac" @"
Update Oracle RACs

Supported in v5.2+
Update the properties of the objects that represent the specified Oracle RAC.
"@ "[GraphQL: bulkUpdateOracleRacs]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateOracle -ExportTablespace
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateOracle -ExportTablespace -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateOracle -ExportTablespace" @"
Export an Oracle tablespace

Supported in v5.0+
Request an asynchronous job to export an Oracle tablespace from a specified snapshot or timestamp.
"@ "[GraphQL: exportOracleTablespace]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateOracle -ValidateAcoFile
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateOracle -ValidateAcoFile -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateOracle -ValidateAcoFile" @"
Validate Oracle ACO file

Supported in v6.0+
Validate the provided Oracle ACO (Advanced Cloning Options) file.
"@ "[GraphQL: validateOracleAcoFile]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateOracle -ValidateDatabaseBackup
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateOracle -ValidateDatabaseBackup -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateOracle -ValidateDatabaseBackup" @"
Validate Oracle database backups

Supported in v5.3+
Queue a job to validate Oracle backups for a database snapshot or a specified timestamp.
"@ "[GraphQL: validateOracleDatabaseBackups]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateOracle -BulkUpdateDatabase
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateOracle -BulkUpdateDatabase -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateOracle -BulkUpdateDatabase" @"
Update Oracle Databases

Supported in v5.2+
Update the properties of the objects that represent the specified Oracle Databases.
"@ "[GraphQL: bulkUpdateOracleDatabases]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateOracle -InstantRecoverSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateOracle -InstantRecoverSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateOracle -InstantRecoverSnapshot" @"
Instant recovery of a database

Supported in v5.0+
Creates an instant recover request that restores a target database from the given snapshot.
"@ "[GraphQL: instantRecoverOracleSnapshot]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateOracle -MountDatabase
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateOracle -MountDatabase -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateOracle -MountDatabase" @"
Live Mount an Oracle database snapshot

Supported in v5.0+
Create an asynchronous job to Live Mount an Oracle database from a snapshot.
"@ "[GraphQL: mountOracleDatabase]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateOracle -ExportDatabase
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateOracle -ExportDatabase -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateOracle -ExportDatabase" @"
Export an Oracle database

Supported in v5.0+
Request an asynchronous job to export an Oracle database from a specified snapshot or timestamp.
"@ "[GraphQL: exportOracleDatabase]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateOracle -CreatePdbRestore
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateOracle -CreatePdbRestore -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateOracle -CreatePdbRestore" @"
Restore PDBs on an Oracle database

Supported in v8.0+
Initiates an asynchronous request to restore PDBs on an Oracle database from a specified snapshot or timestamp.
"@ "[GraphQL: createOraclePdbRestore]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateOracle -DownloadDatabaseSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateOracle -DownloadDatabaseSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateOracle -DownloadDatabaseSnapshot" @"
Download Oracle snapshot from cloud

Supported in v5.0+
Create an asynchronous job to download an Oracle database snapshot and associated logs using the snapshot ID. The response includes the ID of the asynchronous job request. To see the status of the request, poll /oracle/request/{id}.
"@ "[GraphQL: downloadOracleDatabaseSnapshot]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateOracle -DeleteMount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateOracle -DeleteMount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateOracle -DeleteMount" @"
Delete an Oracle database Live Mount

Supported in v5.0+
Request an asynchronous job to delete a specified Live Mount of an Oracle database snapshot. Poll the job status by using /oracle/request/{id}.
"@ "[GraphQL: deleteOracleMount]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateOracle -RestoreLog
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateOracle -RestoreLog -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateOracle -RestoreLog" @"
Restore archive logs of an Oracle database

Supported in v6.0+
v6.0: Create an asynchronous job to restore archive logs of an Oracle database.
v7.0+: Starts an asynchronous job to restore archive logs of an Oracle database.
"@ "[GraphQL: restoreOracleLogs]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"



# -------------------------------------------------------------------
# Invoke-RscMutateSla -CreateGlobal
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateSla -CreateGlobal -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateSla -CreateGlobal" @"
Create SLA Domain.
"@ "[GraphQL: createGlobalSla]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateSla -EditGlobal
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateSla -EditGlobal -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateSla -EditGlobal" @"

"@ "[GraphQL: editGlobalSla]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateSla -UpdateGlobal
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateSla -UpdateGlobal -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateSla -UpdateGlobal" @"
Update SLA Domain.
"@ "[GraphQL: updateGlobalSla]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateSla -DeleteGlobal
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateSla -DeleteGlobal -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateSla -DeleteGlobal" @"

"@ "[GraphQL: deleteGlobalSla]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateSla -Assign
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateSla -Assign -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateSla -Assign" @"
Endpoint to assign SLA Domain.
"@ "[GraphQL: assignSla]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateSla -AssignsForSnappableHierarchie
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateSla -AssignsForSnappableHierarchie -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateSla -AssignsForSnappableHierarchie" @"

"@ "[GraphQL: assignSlasForSnappableHierarchies]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateSla -AssignRetentionToSnappable
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateSla -AssignRetentionToSnappable -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateSla -AssignRetentionToSnappable" @"

"@ "[GraphQL: assignRetentionSLAToSnappables]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateSla -AssignRetentionToSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateSla -AssignRetentionToSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateSla -AssignRetentionToSnapshot" @"

"@ "[GraphQL: assignRetentionSLAToSnapshots]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateSla -Pause
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateSla -Pause -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateSla -Pause" @"
Pause/Resume Global SLA on the given clusters.
"@ "[GraphQL: pauseSla]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateSla -Upgrade
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateSla -Upgrade -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateSla -Upgrade" @"
Upgrade SLA Domains from the Rubrik clusters.
"@ "[GraphQL: upgradeSlas]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateSla -GetPendingAssignment
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateSla -GetPendingAssignment -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateSla -GetPendingAssignment" @"
Get pending SLA Domain assignments on selected managed objects

Supported in v5.2+
Retrieve the details of pending SLA Domain assignments on the given managed objects. For objects with pending assignments, return the SLA Domain that is pending. For objects without pending assignments, return the current SLA Domain information. Explicitly list invalid object IDs.
"@ "[GraphQL: getPendingSlaAssignments]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateSla -ExportManagedVolumeSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateSla -ExportManagedVolumeSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateSla -ExportManagedVolumeSnapshot" @"
Create a request to export a snapshot and mount it on a host

Supported in v5.3+
Export a managed volume snapshot as a share and mount it on a given host.
"@ "[GraphQL: exportSlaManagedVolumeSnapshot]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"



# -------------------------------------------------------------------
# Invoke-RscMutateVcenter -Create
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVcenter -Create -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVcenter -Create" @"

"@ "[GraphQL: vsphereCreateVCenter]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateVcenter -Delete
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVcenter -Delete -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVcenter -Delete" @"
Remove vCenter Server

Supported in v5.0+
Initiates an asynchronous job to remove a vCenter Server object. The vCenter Server cannot have VMs mounted through the Rubrik cluster.
"@ "[GraphQL: vsphereDeleteVcenter]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateVcenter -Edit
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVcenter -Edit -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVcenter -Edit" @"

"@ "[GraphQL: vsphereEditVCenter]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateVcenter -Refresh
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVcenter -Refresh -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVcenter -Refresh" @"

"@ "[GraphQL: vsphereRefreshVCenter]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateVcenter -Update
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVcenter -Update -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVcenter -Update" @"
Update vCenter Server

Supported in v5.0+
Update the address, username and password of the specified vCenter Server object.
"@ "[GraphQL: updateVcenter]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateVcenter -UpdateHotAddNetwork
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVcenter -UpdateHotAddNetwork -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVcenter -UpdateHotAddNetwork" @"
Set the user-configured network for HotAdd backup and recovery

Supported in v5.3+
Set the user-configured network for HotAdd backup and recovery operations on VMware on AWS.
"@ "[GraphQL: updateVcenterHotAddNetwork]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateVcenter -UpdateHotAddBandwidth
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVcenter -UpdateHotAddBandwidth -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVcenter -UpdateHotAddBandwidth" @"
Set the ingest and export bandwidth limits for HotAdd with the vCenter

Supported in v5.3+
Set the ingest and export bandwidth limits in Mbps when using HotAdd with the vCenter. These limits are shared across all HotAdd proxies for the Center.
"@ "[GraphQL: updateVcenterHotAddBandwidth]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"



# -------------------------------------------------------------------
# Invoke-RscMutateVsphere -OnDemandSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphere -OnDemandSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVsphere -OnDemandSnapshot" @"

"@ "[GraphQL: vsphereOnDemandSnapshot]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphere -BulkOnDemandSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphere -BulkOnDemandSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVsphere -BulkOnDemandSnapshot" @"
Trigger a bulk on demand snapshot.
"@ "[GraphQL: vsphereBulkOnDemandSnapshot]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphere -DeleteLiveMount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphere -DeleteLiveMount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVsphere -DeleteLiveMount" @"
Delete a Live Mount VM

Supported in v5.0+
Create a request to delete a Live Mount virtual machine.
"@ "[GraphQL: deleteVsphereLiveMount]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphere -ExportSnapshotToStandaloneHostV2
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphere -ExportSnapshotToStandaloneHostV2 -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVsphere -ExportSnapshotToStandaloneHostV2" @"
Export snapshot of a virtual machine to standalone ESXi server.
"@ "[GraphQL: vsphereExportSnapshotToStandaloneHostV2]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphere -ExportSnapshotToStandaloneHost
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphere -ExportSnapshotToStandaloneHost -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVsphere -ExportSnapshotToStandaloneHost" @"

"@ "[GraphQL: vsphereExportSnapshotToStandaloneHost]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphere -DownloadVirtualMachineFile
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphere -DownloadVirtualMachineFile -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVsphere -DownloadVirtualMachineFile" @"
Download Virtual Machine files from a snapshot

Supported in v9.0
Start an asynchronous job to download multiple Virtual Machine files, such as .vmdk, .vmx, and .nvram files, from the specified Virtual Machine snapshot.
"@ "[GraphQL: downloadVsphereVirtualMachineFiles]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphere -CreateAdvancedTag
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphere -CreateAdvancedTag -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVsphere -CreateAdvancedTag" @"
Create a multi-tag filter for vSphere tags

Supported in v7.0+
Create a filter consisting of vSphere tags joined with logical operators.
"@ "[GraphQL: createVsphereAdvancedTag]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphere -DeleteAdvancedTag
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphere -DeleteAdvancedTag -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVsphere -DeleteAdvancedTag" @"
Remove the multi-tag filter

Supported in v7.0+
Remove the multi-tag filter.
"@ "[GraphQL: deleteVsphereAdvancedTag]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphere -UpdateAdvancedTag
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphere -UpdateAdvancedTag -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVsphere -UpdateAdvancedTag" @"
Update the multi-tag filter

Supported in v7.0+
Updates the name, condition, and description of the specified multi-tag filter.
"@ "[GraphQL: updateVsphereAdvancedTag]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"



# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -RecoverFile
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -RecoverFile -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVsphereVm -RecoverFile" @"
Restores multiple files/directories from snapshot.
"@ "[GraphQL: vsphereVmRecoverFiles]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -RecoverFilesNew
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -RecoverFilesNew -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVsphereVm -RecoverFilesNew" @"
Restores multiple files/directories from snapshot.
"@ "[GraphQL: vsphereVmRecoverFilesNew]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -RegisterAgent
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -RegisterAgent -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVsphereVm -RegisterAgent" @"
Register Rubrik Backup Service

Supported in v5.0+
Register the Rubrik Backup Service that is running on a specified host with the specified Rubrik cluster.
"@ "[GraphQL: vsphereVmRegisterAgent]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -DownloadSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -DownloadSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVsphereVm -DownloadSnapshot" @"
Download snapshot from archive

Supported in v5.0+
Provides a method for retrieving a snapshot, that is not available locally, from an archival location.
"@ "[GraphQL: vsphereVmDownloadSnapshot]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -ExportSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -ExportSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVsphereVm -ExportSnapshot" @"

"@ "[GraphQL: vsphereVMExportSnapshot]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -ExportSnapshotV2
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -ExportSnapshotV2 -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVsphereVm -ExportSnapshotV2" @"
Create a vSphere Export from a snapshot or a point-in-time.
"@ "[GraphQL: vsphereVmExportSnapshotV2]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -ExportSnapshotV3
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -ExportSnapshotV3 -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVsphereVm -ExportSnapshotV3" @"
Create a vSphere Export from a snapshot or a point-in-time with datastore cluster and virtual disk mapping support.
"@ "[GraphQL: vsphereVmExportSnapshotV3]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -BatchExport
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -BatchExport -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVsphereVm -BatchExport" @"
Create a mass export for a group of virtual machines.
"@ "[GraphQL: vsphereVmBatchExport]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -BatchExportV3
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -BatchExportV3 -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVsphereVm -BatchExportV3" @"
Create a batch export for a group of virtual machines with datastore cluster support.
"@ "[GraphQL: vsphereVmBatchExportV3]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -InitiateInPlaceRecovery
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -InitiateInPlaceRecovery -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVsphereVm -InitiateInPlaceRecovery" @"
Trigger an in-place recovery from a snapshot or point-in-time.
"@ "[GraphQL: vsphereVmInitiateInPlaceRecovery]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -ExportSnapshotWithDownloadFromCloud
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -ExportSnapshotWithDownloadFromCloud -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVsphereVm -ExportSnapshotWithDownloadFromCloud" @"
Download a snapshot from an archival location, then export a virtual machine using the downloaded snapshot

Supported in v5.3+
Download a snapshot from an archival location and then export a virtual machine using the downloaded snapshot.
"@ "[GraphQL: vsphereVmExportSnapshotWithDownloadFromCloud]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -BatchInPlaceRecovery
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -BatchInPlaceRecovery -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVsphereVm -BatchInPlaceRecovery" @"
Supported in v6.0+. Export a snapshot each from a set of virtual machines.
"@ "[GraphQL: vsphereVmBatchInPlaceRecovery]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -DeleteSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -DeleteSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVsphereVm -DeleteSnapshot" @"
Designate a snapshot as expired and available for garbage collection. The snapshot must be an on-demand snapshot or a snapshot from a virtual machine that is not assigned to an SLA Domain.
"@ "[GraphQL: vsphereVmDeleteSnapshot]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -Update
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -Update -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVsphereVm -Update" @"

"@ "[GraphQL: vsphereVMUpdate]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -InitiateInstantRecovery
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -InitiateInstantRecovery -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVsphereVm -InitiateInstantRecovery" @"

"@ "[GraphQL: vsphereVMInitiateInstantRecovery]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -InitiateInstantRecoveryV2
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -InitiateInstantRecoveryV2 -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVsphereVm -InitiateInstantRecoveryV2" @"
Instantly recover a vSphere virtual machine from a snapshot or point-in-time.
"@ "[GraphQL: vsphereVmInitiateInstantRecoveryV2]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -InitiateBatchInstantRecovery
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -InitiateBatchInstantRecovery -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVsphereVm -InitiateBatchInstantRecovery" @"
Initiate a mass instant recovery for a group of VMs.
"@ "[GraphQL: vsphereVmInitiateBatchInstantRecovery]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -InitiateDiskMount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -InitiateDiskMount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVsphereVm -InitiateDiskMount" @"
Attaching disks from a snapshot to an existing virtual machine

Supported in v5.0+
Requests a snapshot mount to attach disks to an existing virtual machine.
"@ "[GraphQL: vsphereVmInitiateDiskMount]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -InitiateLiveMount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -InitiateLiveMount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVsphereVm -InitiateLiveMount" @"

"@ "[GraphQL: vsphereVMInitiateLiveMount]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -InitiateLiveMountV2
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -InitiateLiveMountV2 -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVsphereVm -InitiateLiveMountV2" @"
Create a vSphere Live Mount from a snapshot or point-in-time.
"@ "[GraphQL: vsphereVmInitiateLiveMountV2]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -BatchLiveMount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -BatchLiveMount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVsphereVm -BatchLiveMount" @"

"@ "[GraphQL: vSphereVMBatchLiveMount]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -InitiateBatchLiveMountV2
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -InitiateBatchLiveMountV2 -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVsphereVm -InitiateBatchLiveMountV2" @"
Initiate a mass live mount for a group of VMs.
"@ "[GraphQL: vsphereVmInitiateBatchLiveMountV2]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -PowerOnOffLiveMount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -PowerOnOffLiveMount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVsphereVm -PowerOnOffLiveMount" @"
Power a Live Mount on and off

Supported in v5.0+
Power a specified Live Mount virtual machine on or off. Pass **_true_** to power the virtual machine on and pass **_false_** to power the virtual machine off.
"@ "[GraphQL: vsphereVmPowerOnOffLiveMount]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -DeleteLiveMount
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -DeleteLiveMount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVsphereVm -DeleteLiveMount" @"

"@ "[GraphQL: vsphereVMDeleteLiveMount]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -ListEsxiDatastore
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -ListEsxiDatastore -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVsphereVm -ListEsxiDatastore" @"
List ESXi datastores

Supported in v5.0+
Retrieve a list of the datastores for a specified ESXi host.
"@ "[GraphQL: vsphereVmListEsxiDatastores]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -MountRelocate
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -MountRelocate -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVsphereVm -MountRelocate" @"
Relocate a virtual machine to another datastore

Supported in v5.0+
Run storage VMotion to relocate a specified Live Mount into another data store.
"@ "[GraphQL: vsphereVmMountRelocate]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -MountRelocateV2
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -MountRelocateV2 -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVsphereVm -MountRelocateV2" @"
Create a Live Mount migration to a datastore or datastore cluster with virtual disk mapping support.
"@ "[GraphQL: vsphereVmMountRelocateV2]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -ExcludeVmDisk
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -ExcludeVmDisk -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVsphereVm -ExcludeVmDisk" @"
Exclude or include virtual disks during snapshot.
"@ "[GraphQL: vsphereExcludeVmDisks]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscMutateVsphereVm -DownloadSnapshotFile
# -------------------------------------------------------------------

$inputs = Invoke-RscMutateVsphereVm -DownloadSnapshotFile -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscMutateVsphereVm -DownloadSnapshotFile" @"
Download files from snapshot.
"@ "[GraphQL: vsphereVmDownloadSnapshotFiles]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"



# -------------------------------------------------------------------
# Invoke-RscQueryAccount -Setting
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAccount -Setting -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAccount -Setting" @"
This endpoint is deprecated.
"@ "[GraphQL: accountSettings]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAccount -SWithExocomputeMapping
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAccount -SWithExocomputeMapping -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAccount -SWithExocomputeMapping" @"
Retrieves the list of all accounts with their Exocompute account mapping, if exists.
"@ "[GraphQL: allAccountsWithExocomputeMappings]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAccount -Product
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAccount -Product -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAccount -Product" @"

"@ "[GraphQL: allAccountProducts]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAccount -Id
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAccount -Id -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAccount -Id" @"
Account ID.
"@ "[GraphQL: accountId]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAccount -Owner
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAccount -Owner -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAccount -Owner" @"
List of account owners.
"@ "[GraphQL: allAccountOwners]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"



# -------------------------------------------------------------------
# Invoke-RscQueryActivitySeries -ActivitySeries
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryActivitySeries -ActivitySeries -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryActivitySeries -ActivitySeries" @"
Retrieve an activity series.
"@ "[GraphQL: activitySeries]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryActivitySeries -List
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryActivitySeries -List -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryActivitySeries -List" @"

"@ "[GraphQL: activitySeriesConnection]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryActivitySeries -GroupByList
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryActivitySeries -GroupByList -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryActivitySeries -GroupByList" @"

"@ "[GraphQL: activitySeriesGroupByConnection]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"



# -------------------------------------------------------------------
# Invoke-RscQueryAws -NativeRoot
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -NativeRoot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAws -NativeRoot" @"
Root of AWS native hierarchy.
"@ "[GraphQL: awsNativeRoot]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -NativeAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -NativeAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAws -NativeAccount" @"
Refers to the AWS Native account that serves as a container for all your AWS resources. The AWS Native account contains information about the metadata related to the AWS Native resources.
"@ "[GraphQL: awsNativeAccount]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -NativeEc2Instance
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -NativeEc2Instance -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAws -NativeEc2Instance" @"
Refers to Amazon Elastic Compute Cloud (EC2) Instance represented by a specific ID. For more information, see https://aws.amazon.com/ec2/.
"@ "[GraphQL: awsNativeEc2Instance]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -NativeEbsVolume
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -NativeEbsVolume -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAws -NativeEbsVolume" @"
Refers to the Amazon Elastic Block Store (EBS) Volume represented by a specific ID. For more information, see https://aws.amazon.com/ebs/.
"@ "[GraphQL: awsNativeEbsVolume]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -NativeS3Bucket
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -NativeS3Bucket -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAws -NativeS3Bucket" @"
Represents the Amazon S3 Bucket with a specific ID. For more information, see https://aws.amazon.com/s3/.
"@ "[GraphQL: awsNativeS3Bucket]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -NativeEc2InstancesByName
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -NativeEc2InstancesByName -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAws -NativeEc2InstancesByName" @"
Paginated list of all AWS EC2 Instances by name or substring of name.
"@ "[GraphQL: awsNativeEc2InstancesByName]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -NativeEbsVolumesByName
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -NativeEbsVolumesByName -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAws -NativeEbsVolumesByName" @"
Paginated list of all AWS EBS Volumes by name or substring of name.
"@ "[GraphQL: awsNativeEbsVolumesByName]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -AllVpcsByRegion
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -AllVpcsByRegion -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAws -AllVpcsByRegion" @"
List of all Virtual Private Clouds (VPCs) in the AWS Native account, classified by region.
"@ "[GraphQL: allVpcsByRegionFromAws]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -AllVpc
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -AllVpc -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAws -AllVpc" @"
List of all Virtual Private Clouds (VPCs) in the AWS Native account.
"@ "[GraphQL: allVpcsFromAws]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -IsNativeEbsVolumeSnapshotRestorable
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -IsNativeEbsVolumeSnapshotRestorable -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAws -IsNativeEbsVolumeSnapshotRestorable" @"
Specified whether an EBS volume is restorable. For an EBS Volume to be restorable, the volume should be able to replace where attached.
"@ "[GraphQL: isAwsNativeEbsVolumeSnapshotRestorable]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -AllAvailabilityZonesByRegion
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -AllAvailabilityZonesByRegion -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAws -AllAvailabilityZonesByRegion" @"
List of Availability Zones (AZs) in the specified region on the specified AWS Native account.
"@ "[GraphQL: allAvailabilityZonesByRegionFromAws]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -AllKmsEncryptionKeysByRegion
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -AllKmsEncryptionKeysByRegion -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAws -AllKmsEncryptionKeysByRegion" @"
List of encryption keys in the specified region on the specified AWS Native account. All the encrytion keys listed are managed by AWS Key Management System (KMS). For more information, see https://aws.amazon.com/kms/.
"@ "[GraphQL: allKmsEncryptionKeysByRegionFromAws]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -IsS3BucketNameAvailable
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -IsS3BucketNameAvailable -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAws -IsS3BucketNameAvailable" @"
Specifies whether an S3 bucket name is available for use in AWS or not. When true, the bucket name is available for use.
"@ "[GraphQL: isAwsS3BucketNameAvailable]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -AllS3Bucket
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -AllS3Bucket -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAws -AllS3Bucket" @"
List of all S3 bucket names across regions for the AWS Native account.
"@ "[GraphQL: allS3BucketsFromAws]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -AllS3BucketsDetail
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -AllS3BucketsDetail -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAws -AllS3BucketsDetail" @"
List of all S3 bucket details across regions for the AWS Native account.
"@ "[GraphQL: allS3BucketsDetailsFromAws]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -NativeRdsInstance
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -NativeRdsInstance -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAws -NativeRdsInstance" @"
Refers to AWS Relational Database Service (RDS) represented by a specific ID. For more information, see https://aws.amazon.com/rds/.
"@ "[GraphQL: awsNativeRdsInstance]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -NativeRdsPointInTimeRestoreWindow
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -NativeRdsPointInTimeRestoreWindow -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAws -NativeRdsPointInTimeRestoreWindow" @"
Point-in-Time (PiT) restore window of the RDS Instance in the AWS Native account. Refers to the range of time within which the database is available to be restored to a particular point in time. For more information,see https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIT.html.
"@ "[GraphQL: awsNativeRdsPointInTimeRestoreWindow]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -RdsInstanceDetail
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -RdsInstanceDetail -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAws -RdsInstanceDetail" @"
Details of the RDS Instance in the AWS Native account.
"@ "[GraphQL: rdsInstanceDetailsFromAws]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -IsNativeRdsInstanceLaunchConfigurationValid
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -IsNativeRdsInstanceLaunchConfigurationValid -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAws -IsNativeRdsInstanceLaunchConfigurationValid" @"
Specifies whether the given DbInstance class, storage type, multi-az capability, encryption capability, iops value are supported for the given dbEngine, dbEngineVersion in the specified availability zone. When true, the specification is valid for a RDS Instance and can be used to create a new Instance.
"@ "[GraphQL: isAwsNativeRdsInstanceLaunchConfigurationValid]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -AllOptionGroupsByRegion
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -AllOptionGroupsByRegion -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAws -AllOptionGroupsByRegion" @"
List of all RDS option groups in a given region. Refers to settings of how a particular option works for an RDS Instance. For more information, see https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithOptionGroups.html.
"@ "[GraphQL: allOptionGroupsByRegionFromAws]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -AllDbParameterGroupsByRegion
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -AllDbParameterGroupsByRegion -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAws -AllDbParameterGroupsByRegion" @"
List of all DB parameter groups in a given region. Refers to container for engine configuration that applies to one or more DB Instances. For more information, see https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithOptionGroups.html.
"@ "[GraphQL: allDbParameterGroupsByRegionFromAws]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -AllDbSubnetGroupsByRegion
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -AllDbSubnetGroupsByRegion -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAws -AllDbSubnetGroupsByRegion" @"
All DB subnet groups in a given region. Refers to logical isolation of RDS on a network. For more information, see https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html.
"@ "[GraphQL: allDbSubnetGroupsByRegionFromAws]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -ValidateNativeRdsInstanceNameForExport
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -ValidateNativeRdsInstanceNameForExport -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAws -ValidateNativeRdsInstanceNameForExport" @"
Validates the name used for an RDS Instance during an export operation. Returns true if the RDS Instance name is valid. Returns false, with an error message, if the RDS Instance name validation fails. Returns false, without an error message for all other failures.
"@ "[GraphQL: validateAwsNativeRdsInstanceNameForExport]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -ValidateNativeRdsClusterNameForExport
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -ValidateNativeRdsClusterNameForExport -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAws -ValidateNativeRdsClusterNameForExport" @"
Validates the name used for an RDS cluster during an export operation. Returns true if the RDS cluster name is valid. Returns false, with an error message, if the RDS cluster name validation fails. Returns false, without an error message for all other failures.
"@ "[GraphQL: validateAwsNativeRdsClusterNameForExport]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -NativeRdsExportDefault
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -NativeRdsExportDefault -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAws -NativeRdsExportDefault" @"
Refers to the default values for the export operation of the RDS DB Instance in the AWS Native account.
"@ "[GraphQL: awsNativeRdsExportDefaults]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -AllEc2KeyPairsByRegion
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -AllEc2KeyPairsByRegion -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAws -AllEc2KeyPairsByRegion" @"
List of all key pairs for a given region. A key pair, consisting of a public key and a private key, is a set of security credentials that you use to prove your identity when connecting to an EC2 instance. For more information, see https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html.
"@ "[GraphQL: allEc2KeyPairsByRegionFromAws]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -AmiTypeForNativeArchivedSnapshotExport
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -AmiTypeForNativeArchivedSnapshotExport -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAws -AmiTypeForNativeArchivedSnapshotExport" @"
Amazon Machine Image (AMI) type for export of an archived EC2 Instance snapshot. For more information, see https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instances-and-amis.html.
"@ "[GraphQL: amiTypeForAwsNativeArchivedSnapshotExport]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -AllRdsAuroraInstanceClass
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -AllRdsAuroraInstanceClass -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAws -AllRdsAuroraInstanceClass" @"
List of all the database instance classes supported by AWS RDS Aurora databases.
"@ "[GraphQL: allAwsRdsAuroraInstanceClasses]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -AllSupportedRdsDatabaseInstanceClass
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -AllSupportedRdsDatabaseInstanceClass -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAws -AllSupportedRdsDatabaseInstanceClass" @"
List of all the database instance classes supported by AWS RDS database for the provided DB engine and engine version. DB engine version is a optional argument, it can be ignored if we want to retrieve all the supported instance class for a DB engine irrespective of DB engine version.
"@ "[GraphQL: allSupportedAwsRdsDatabaseInstanceClasses]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -ComputeSetting
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -ComputeSetting -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAws -ComputeSetting" @"
Retrieve aws compute settings.
"@ "[GraphQL: awsComputeSettings]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -AllComputeSetting
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -AllComputeSetting -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAws -AllComputeSetting" @"
List all aws compute settings.
"@ "[GraphQL: allAwsComputeSettings]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -AllCloudAccountsWithFeature
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -AllCloudAccountsWithFeature -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAws -AllCloudAccountsWithFeature" @"
List of active AWS cloud accounts and the features for the accounts. A cloud account is an AWS account added to the Rubrik platform.
"@ "[GraphQL: allAwsCloudAccountsWithFeatures]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -AllCloudAccountsFeaturesWithExoConfig
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -AllCloudAccountsFeaturesWithExoConfig -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAws -AllCloudAccountsFeaturesWithExoConfig" @"
List of active AWS cloud account features and the Exocompute mapping information for the accounts. A cloud account is an AWS account added to the Rubrik platform.
"@ "[GraphQL: allAwsCloudAccountsFeaturesWithExoConfigs]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -CloudAccountWithFeature
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -CloudAccountWithFeature -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAws -CloudAccountWithFeature" @"
List of AWS cloud accounts and the features for each account, classified by ID.
"@ "[GraphQL: awsCloudAccountWithFeatures]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -CloudAccountListVpc
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -CloudAccountListVpc -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAws -CloudAccountListVpc" @"
Retrieves a list of virtual private clouds (VPCs) in the specific cloud account.
"@ "[GraphQL: awsCloudAccountListVpcs]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -CloudAccountListSubnet
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -CloudAccountListSubnet -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAws -CloudAccountListSubnet" @"
Retrieves a list of subnets in the specified cloud account and virtual private cloud (VPC).
"@ "[GraphQL: awsCloudAccountListSubnets]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -CloudAccountListSecurityGroup
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -CloudAccountListSecurityGroup -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAws -CloudAccountListSecurityGroup" @"
Retrieves a list of security groups in the specified cloud account and virtual private cloud (VPC).
"@ "[GraphQL: awsCloudAccountListSecurityGroups]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -CloudAccountListKMSKey
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -CloudAccountListKMSKey -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAws -CloudAccountListKMSKey" @"

"@ "[GraphQL: AwsCloudAccountListKMSKeys]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -AllExocomputeConfig
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -AllExocomputeConfig -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAws -AllExocomputeConfig" @"
List of all AWS exocompute configurations filtered by a cloud account ID or a cloud account name prefix.
"@ "[GraphQL: allAwsExocomputeConfigs]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -AllCloudAccountConfig
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -AllCloudAccountConfig -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAws -AllCloudAccountConfig" @"
List of all AWS cloud account configurations with the given search query.
"@ "[GraphQL: allAwsCloudAccountConfigs]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -AllRegion
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -AllRegion -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAws -AllRegion" @"
All valid AWS regions for this cloud account.
"@ "[GraphQL: allAwsRegions]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -AllCdmVersion
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -AllCdmVersion -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAws -AllCdmVersion" @"
Get all Rubrik CDM versions in the AWS marketplace.
"@ "[GraphQL: allAwsCdmVersions]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAws -AllInstanceProfileName
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAws -AllInstanceProfileName -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAws -AllInstanceProfileName" @"
All Rubrik CC-ES instance profiles in the AWS account.
"@ "[GraphQL: allAwsInstanceProfileNames]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"



# -------------------------------------------------------------------
# Invoke-RscQueryAzure -NativeRoot
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -NativeRoot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -NativeRoot" @"
Root of Azure native hierarchy.
"@ "[GraphQL: azureNativeRoot]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -NativeSubscription
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -NativeSubscription -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -NativeSubscription" @"
Retrieves an Azure Native Subscription. Refers to the logical entity that provides entitlement to deploy and consume Azure resources.
"@ "[GraphQL: azureNativeSubscription]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -NativeResourceGroup
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -NativeResourceGroup -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -NativeResourceGroup" @"
Retrieves an Azure Native Resource Group. Refers to a collection of resources in which multiple Azure services can reside.
"@ "[GraphQL: azureNativeResourceGroup]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -NativeVirtualMachine
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -NativeVirtualMachine -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -NativeVirtualMachine" @"
Retrieves an Azure Virtual Machine that refers to the Azure infrastructure as a service (IaaS) used to deploy persistent VMs. For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/.
"@ "[GraphQL: azureNativeVirtualMachine]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -NativeManagedDisk
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -NativeManagedDisk -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -NativeManagedDisk" @"
Retrieves an Azure Native Managed Disk that refers to the block storage designed to be used with Azure Virtual Machines. Some examples are: ultra disks, premium solid-state drives (SSD), standard SSDs, and standard hard disk drives (HDD). For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/managed-disks-overview.
"@ "[GraphQL: azureNativeManagedDisk]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -AllNativeVirtualNetwork
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -AllNativeVirtualNetwork -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -AllNativeVirtualNetwork" @"
Retrieves all virtual networks (VNets) in the protected subscriptions. VNet enables secure communication with other VNets, the internet, and on-premise networks. For more information, see https://docs.microsoft.com/en-us/azure/virtual-network/virtual-networks-overview.
"@ "[GraphQL: allAzureNativeVirtualNetworks]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -AllNativeSubnetsByRegionFromAzure
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -AllNativeSubnetsByRegionFromAzure -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -AllNativeSubnetsByRegionFromAzure" @"
Retrieves all subnets in the specified region and subscription. Subnets allow you to choose IP address range of your choice. For more information, see https://docs.microsoft.com/en-us/azure/virtual-network/network-overview#virtual-network-and-subnets.
"@ "[GraphQL: allAzureNativeSubnetsByRegionFromAzure]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -AllNativeSecurityGroupsByRegionFromAzure
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -AllNativeSecurityGroupsByRegionFromAzure -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -AllNativeSecurityGroupsByRegionFromAzure" @"
Retrieves all security groups in the specified region and subscription. Security groups enable you to configure network security as a natural extension of an application's structure, allowing you to group virtual machines and define network security policies based on those groups. For more information, see https://docs.microsoft.com/en-us/azure/virtual-network/application-security-groups.
"@ "[GraphQL: allAzureNativeSecurityGroupsByRegionFromAzure]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -AllDiskEncryptionSetsByRegion
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -AllDiskEncryptionSetsByRegion -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -AllDiskEncryptionSetsByRegion" @"
List of all Azure Disk Encryption Sets in a region.
"@ "[GraphQL: allAzureDiskEncryptionSetsByRegion]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -AllNativeAvailabilitySetsByRegionFromAzure
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -AllNativeAvailabilitySetsByRegionFromAzure -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -AllNativeAvailabilitySetsByRegionFromAzure" @"
Retrieves all availability sets in the specified region, resource group, and subscription. An availability set is a logical grouping of VMs to facilitate redundancy and availability. For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/availability-set-overview.
"@ "[GraphQL: allAzureNativeAvailabilitySetsByRegionFromAzure]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -AllNativeExportCompatibleVmSizesByRegionFromAzure
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -AllNativeExportCompatibleVmSizesByRegionFromAzure -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -AllNativeExportCompatibleVmSizesByRegionFromAzure" @"
Retrieves all supported virtual machine (VM) sizes when exporting a particular snapshot. Not all VM sizes are supported in all the regions. For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/sizes.
"@ "[GraphQL: allAzureNativeExportCompatibleVmSizesByRegionFromAzure]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -AllNativeExportCompatibleDiskTypesByRegionFromAzure
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -AllNativeExportCompatibleDiskTypesByRegionFromAzure -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -AllNativeExportCompatibleDiskTypesByRegionFromAzure" @"
Retrieves all supported disk types when exporting a specific snapshot. Not all disk types are supported in all the regions. For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/disks-types.
"@ "[GraphQL: allAzureNativeExportCompatibleDiskTypesByRegionFromAzure]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -AllNativeVirtualMachineSize
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -AllNativeVirtualMachineSize -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -AllNativeVirtualMachineSize" @"
Retrieves all virtual machine (VM) sizes in the subscriptions protected by Rubrik that have been configured for protection. For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/sizes.
"@ "[GraphQL: allAzureNativeVirtualMachineSizes]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -IsNativeManagedDiskSnapshotRestorable
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -IsNativeManagedDiskSnapshotRestorable -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -IsNativeManagedDiskSnapshotRestorable" @"
Specifies whether the Managed Disk snapshot is restorable or not. A managed disk is restorable when the restore settings of the Managed Disk are configured on the Azure portal and on the Rubrik platform. When the value is true, the managed disk snapshot is restorable.
"@ "[GraphQL: isAzureNativeManagedDiskSnapshotRestorable]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -IsStorageAccountNameAvailable
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -IsStorageAccountNameAvailable -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -IsStorageAccountNameAvailable" @"
Specifies whether the given storage account name is valid and available in Azure to be assigned to a new storage account. When the value is true, the specified account name is available in Azure.
"@ "[GraphQL: isAzureStorageAccountNameAvailable]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -AllNativeStorageAccountsFromAzure
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -AllNativeStorageAccountsFromAzure -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -AllNativeStorageAccountsFromAzure" @"
Retrieves list of all storage Accounts in a subscription.
"@ "[GraphQL: allAzureNativeStorageAccountsFromAzure]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -SqlDatabase
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -SqlDatabase -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -SqlDatabase" @"
Retrieves an Azure SQL Database. Refers to the fully managed SQL database built for the cloud. For more information, see https://azure.microsoft.com/en-us/products/azure-sql/database/.
"@ "[GraphQL: azureSqlDatabase]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -SqlDatabaseServer
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -SqlDatabaseServer -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -SqlDatabaseServer" @"
Retrieves an Azure SQL Database Server. Refers to the server that contains the Azure SQL Databases. For more information, see https://docs.microsoft.com/en-us/azure/azure-sql/database/logical-servers.
"@ "[GraphQL: azureSqlDatabaseServer]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -SqlManagedInstanceDatabase
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -SqlManagedInstanceDatabase -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -SqlManagedInstanceDatabase" @"
Retrieves an Azure SQL Managed Instance Database. Refers to the database engine compatible with the latest SQL Server (Enterprise Edition) database engine. For more information, see https://docs.microsoft.com/en-us/azure/azure-sql/managed-instance/sql-managed-instance-paas-overview.
"@ "[GraphQL: azureSqlManagedInstanceDatabase]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -SqlManagedInstanceServer
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -SqlManagedInstanceServer -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -SqlManagedInstanceServer" @"
Retrieves an Azure SQL Managed Instance Server. Refers to the server the Azure SQL Managed Instance Database is a part of.
"@ "[GraphQL: azureSqlManagedInstanceServer]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -SqlDatabaseDbPointInTimeRestoreWindowFromAzure
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -SqlDatabaseDbPointInTimeRestoreWindowFromAzure -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -SqlDatabaseDbPointInTimeRestoreWindowFromAzure" @"
Point-in-Time (PiT) restore window of the Azure SQL Database instance in the Azure native account. Refers to the range of time within which the database is available to be restored to a particular point in time. For more information, see https://azure.microsoft.com/en-in/blog/azure-sql-database-point-in-time-restore/.
"@ "[GraphQL: azureSqlDatabaseDbPointInTimeRestoreWindowFromAzure]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -SqlManagedInstanceDbPointInTimeRestoreWindowFromAzure
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -SqlManagedInstanceDbPointInTimeRestoreWindowFromAzure -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -SqlManagedInstanceDbPointInTimeRestoreWindowFromAzure" @"
Point-in-Time (PiT) restore window of the Azure SQL Managed Instance database in the Azure native account. Refers to the range of time within which the database is available to be restored to a particular point in time. For more information, see https://docs.microsoft.com/en-us/azure/azure-sql/managed-instance/point-in-time-restore?tabs=azure-portal.
"@ "[GraphQL: azureSqlManagedInstanceDbPointInTimeRestoreWindowFromAzure]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -ValidateNativeSqlDatabaseDbNameForExport
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -ValidateNativeSqlDatabaseDbNameForExport -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -ValidateNativeSqlDatabaseDbNameForExport" @"
Validates the name used for an Sql Database during an export operation. Returns true if the database name is valid. Returns false, with an error message, if the database name validation fails. Returns false, without an error message for all other failures.
"@ "[GraphQL: validateAzureNativeSqlDatabaseDbNameForExport]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -ValidateNativeSqlManagedInstanceDbNameForExport
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -ValidateNativeSqlManagedInstanceDbNameForExport -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -ValidateNativeSqlManagedInstanceDbNameForExport" @"
Validates the name used for an Managed Instance Database during an export operation. Returns true if the database name is valid. Returns false, with an error message, if the database name validation fails. Returns false, without an error message for all other failures.
"@ "[GraphQL: validateAzureNativeSqlManagedInstanceDbNameForExport]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -AllSqlDatabaseServerElasticPool
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -AllSqlDatabaseServerElasticPool -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -AllSqlDatabaseServerElasticPool" @"
Retrieves the list of elastic pools available for a SQL Database Server.For more information, see https://docs.microsoft.com/en-us/azure/azure-sql/database/elastic-pool-overview.
"@ "[GraphQL: allAzureSqlDatabaseServerElasticPools]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -IsNativeSqlDatabaseSnapshotPersistent
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -IsNativeSqlDatabaseSnapshotPersistent -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -IsNativeSqlDatabaseSnapshotPersistent" @"
Checks if an Azure SQL Database Snapshot or an Azure SQL Managed Instance Database Snapshot is a persistent snapshot.
"@ "[GraphQL: isAzureNativeSqlDatabaseSnapshotPersistent]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -AllKeyVaultsByRegion
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -AllKeyVaultsByRegion -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -AllKeyVaultsByRegion" @"
List of all Azure Key Vaults in a region.
"@ "[GraphQL: allAzureKeyVaultsByRegion]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -AllEncryptionKey
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -AllEncryptionKey -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -AllEncryptionKey" @"
List of all Encryption Keys in an Azure Key Vault.
"@ "[GraphQL: allAzureEncryptionKeys]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -CloudAccountTenant
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -CloudAccountTenant -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -CloudAccountTenant" @"
Retrieves the details of the Azure tenant and all the subscriptions of the tenant, for a feature.
"@ "[GraphQL: azureCloudAccountTenant]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -CloudAccountTenantWithExoConfig
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -CloudAccountTenantWithExoConfig -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -CloudAccountTenantWithExoConfig" @"
Retrieves details about the Azure cloud account tenant including the Exocompute configurations for the tenant subscriptions, for a specified feature.
"@ "[GraphQL: azureCloudAccountTenantWithExoConfigs]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -AllCloudAccountTenantsWithExoConfig
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -AllCloudAccountTenantsWithExoConfig -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -AllCloudAccountTenantsWithExoConfig" @"
Retrieves details about all the Azure cloud account tenants including the Exocompute configurations for the tenant subscriptions, for specified set of features.
"@ "[GraphQL: allAzureCloudAccountTenantsWithExoConfigs]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -AllCloudAccountTenant
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -AllCloudAccountTenant -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -AllCloudAccountTenant" @"
Retrieves a list of all the Azure tenants and tenant subscriptions for features. The list can be filtered by feature status, subscription native ID, and subscription name.
"@ "[GraphQL: allAzureCloudAccountTenants]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -CloudAccountSubscriptionWithFeature
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -CloudAccountSubscriptionWithFeature -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -CloudAccountSubscriptionWithFeature" @"
Retrieves the details of the Azure cloud account.
"@ "[GraphQL: azureCloudAccountSubscriptionWithFeatures]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -AllCloudAccountSubscriptionsByFeature
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -AllCloudAccountSubscriptionsByFeature -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -AllCloudAccountSubscriptionsByFeature" @"
Retrieves a list of all Azure Subscriptions with feature details such as feature, status, and regions.
"@ "[GraphQL: allAzureCloudAccountSubscriptionsByFeature]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -AllSubscriptionWithExocomputeMapping
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -AllSubscriptionWithExocomputeMapping -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -AllSubscriptionWithExocomputeMapping" @"
Retrieves a list of all Azure subscriptions with Exocompute subscription mapping.
"@ "[GraphQL: allAzureSubscriptionWithExocomputeMappings]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -AllResourceGroupsFrom
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -AllResourceGroupsFrom -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -AllResourceGroupsFrom" @"
Retrieves a list og all resource groups in the specified account.
"@ "[GraphQL: allResourceGroupsFromAzure]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -DoesNativeResourceGroupExist
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -DoesNativeResourceGroupExist -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -DoesNativeResourceGroupExist" @"
Checks if a resource group with the specified name exists in the specified account.
"@ "[GraphQL: doesAzureNativeResourceGroupExist]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -AllNativeResourceGroupsInfoIfExist
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -AllNativeResourceGroupsInfoIfExist -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -AllNativeResourceGroupsInfoIfExist" @"
Retrieves a list of resource groups with the specified names which exist in the specified account.
"@ "[GraphQL: allAzureNativeResourceGroupsInfoIfExist]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -AllCloudAccountMissingPermission
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -AllCloudAccountMissingPermission -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -AllCloudAccountMissingPermission" @"
Retrieves a list of all the missing permissions on Azure subscriptions that are a part of the Azure Cloud Account.
"@ "[GraphQL: allAzureCloudAccountMissingPermissions]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -CloudAccountPermissionConfig
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -CloudAccountPermissionConfig -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -CloudAccountPermissionConfig" @"
Retrieves the configuration consisting of role permissions and feature policy version required for Azure subscription setup. Features refer to the Polaris features that the customer wants to be enabled on the cloud account.
"@ "[GraphQL: azureCloudAccountPermissionConfig]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -AllExocomputeConfigsInAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -AllExocomputeConfigsInAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -AllExocomputeConfigsInAccount" @"
Retrieves a list of Azure Exocompute configurations filtered by a cloud account ID or a search query.
"@ "[GraphQL: allAzureExocomputeConfigsInAccount]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -AllCloudAccountSubnetsByRegion
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -AllCloudAccountSubnetsByRegion -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -AllCloudAccountSubnetsByRegion" @"
Retrieves all subnets in the specified region and subscription. Subnets allow you to choose IP address range of your choice. For more information, see https://docs.microsoft.com/en-us/azure/virtual-network/network-overview#virtual-network-and-subnets.
"@ "[GraphQL: allAzureCloudAccountSubnetsByRegion]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -ValidateCloudAccountExocomputeConfiguration
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -ValidateCloudAccountExocomputeConfiguration -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -ValidateCloudAccountExocomputeConfiguration" @"
Validates if Azure subnets are correctly configured for running Azure Kubernetes Service (AKS) Clusters. When correctly configured, the Azure subnets allow the required region-specific outbound connectivity and do not overlap with Azure restricted IP Address Space.
"@ "[GraphQL: validateAzureCloudAccountExocomputeConfigurations]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -AllArmTemplatesByFeature
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -AllArmTemplatesByFeature -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -AllArmTemplatesByFeature" @"
Retrieve ARM templates for role definition and role assignment.
"@ "[GraphQL: allAzureArmTemplatesByFeature]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -Subscription
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -Subscription -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -Subscription" @"
Gets the subscriptions for the given Azure tenant.
"@ "[GraphQL: azureSubscriptions]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -Region
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -Region -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -Region" @"
Gets the Azure regions for the given subscription.
"@ "[GraphQL: azureRegions]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -ResourceGroup
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -ResourceGroup -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -ResourceGroup" @"
Gets the Azure resource groups for the given subscription.
"@ "[GraphQL: azureResourceGroups]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -VNet
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -VNet -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -VNet" @"
Gets the VNets for the given subscription.
"@ "[GraphQL: azureVNets]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -Subnet
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -Subnet -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -Subnet" @"
Gets the subnets for the given subscription.
"@ "[GraphQL: azureSubnets]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -StorageAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -StorageAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -StorageAccount" @"
Gets the storage accounts for the given subscription.
"@ "[GraphQL: azureStorageAccounts]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -AllHostedRegion
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -AllHostedRegion -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -AllHostedRegion" @"
Lists all Azure regions supported by the Rubrik-Hosted SaaS protection.
"@ "[GraphQL: allHostedAzureRegions]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -AllResourceGroup
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -AllResourceGroup -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -AllResourceGroup" @"
Get resource groups for a service principal in Azure.
"@ "[GraphQL: allAzureResourceGroups]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -AllVnet
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -AllVnet -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -AllVnet" @"
Get VNets for a given account in Azure.
"@ "[GraphQL: allAzureVnets]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -AllSubnet
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -AllSubnet -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -AllSubnet" @"
Get subnets for a given account in Azure.
"@ "[GraphQL: allAzureSubnets]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -AllCdmVersion
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -AllCdmVersion -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -AllCdmVersion" @"
Get all Rubrik CDM versions in the Azure marketplace.
"@ "[GraphQL: allAzureCdmVersions]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -AllRegion
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -AllRegion -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -AllRegion" @"
Get all available regions for Azure.
"@ "[GraphQL: allAzureRegions]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -AllNsg
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -AllNsg -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -AllNsg" @"
Get all available network security groups for Azure.
"@ "[GraphQL: allAzureNsgs]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -AllStorageAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -AllStorageAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -AllStorageAccount" @"
List all storage accounts from Azure.
"@ "[GraphQL: allAzureStorageAccounts]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -AdDirectorie
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -AdDirectorie -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -AdDirectorie" @"
All Azure AD directories for the account.
"@ "[GraphQL: azureAdDirectories]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzure -AdDirectory
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzure -AdDirectory -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzure -AdDirectory" @"
Details of the Azure AD corresponds to the workload ID.
"@ "[GraphQL: azureAdDirectory]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"



# -------------------------------------------------------------------
# Invoke-RscQueryAzureO365 -Exocompute
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzureO365 -Exocompute -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzureO365 -Exocompute" @"
Gets the exocompute details of the given cluster.
"@ "[GraphQL: azureO365Exocompute]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzureO365 -CheckStorageAccountName
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzureO365 -CheckStorageAccountName -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzureO365 -CheckStorageAccountName" @"
Checks the storage account name.
"@ "[GraphQL: azureO365CheckStorageAccountName]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzureO365 -CheckStorageAccountAccessibility
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzureO365 -CheckStorageAccountAccessibility -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzureO365 -CheckStorageAccountAccessibility" @"
Checks the accessibility of the storage account.
"@ "[GraphQL: azureO365CheckStorageAccountAccessibility]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzureO365 -CheckSubscriptionQuota
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzureO365 -CheckSubscriptionQuota -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzureO365 -CheckSubscriptionQuota" @"
Checks the Azure subscription quota.
"@ "[GraphQL: azureO365CheckSubscriptionQuota]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzureO365 -CheckResourceGroupName
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzureO365 -CheckResourceGroupName -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzureO365 -CheckResourceGroupName" @"
Checks the resource group name.
"@ "[GraphQL: azureO365CheckResourceGroupName]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzureO365 -CheckVirtualNetworkName
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzureO365 -CheckVirtualNetworkName -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzureO365 -CheckVirtualNetworkName" @"
Checks the virtual network name.
"@ "[GraphQL: azureO365CheckVirtualNetworkName]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzureO365 -ValidateUserRole
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzureO365 -ValidateUserRole -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzureO365 -ValidateUserRole" @"
Validates the user roles in the subscription.
"@ "[GraphQL: azureO365ValidateUserRoles]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzureO365 -CheckNSGOutboundRule
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzureO365 -CheckNSGOutboundRule -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzureO365 -CheckNSGOutboundRule" @"
Checks the NSG Outbound rules of the Azure resources.
"@ "[GraphQL: azureO365CheckNSGOutboundRules]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzureO365 -CheckNetworkSubnet
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzureO365 -CheckNetworkSubnet -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzureO365 -CheckNetworkSubnet" @"
Checks the network subnet of the Azure resources.
"@ "[GraphQL: azureO365CheckNetworkSubnet]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzureO365 -GetNetworkSubnetUnusedAddr
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzureO365 -GetNetworkSubnetUnusedAddr -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzureO365 -GetNetworkSubnetUnusedAddr" @"
Retrieves the unused addresses available in a subnet.
"@ "[GraphQL: azureO365GetNetworkSubnetUnusedAddr]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryAzureO365 -GetAzureHostType
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryAzureO365 -GetAzureHostType -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryAzureO365 -GetAzureHostType" @"
Retrieves the AzureHostType of the account.
"@ "[GraphQL: azureO365GetAzureHostType]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"



# -------------------------------------------------------------------
# Invoke-RscQueryCassandra -Source
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCassandra -Source -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryCassandra -Source" @"
Paginated list of cassandra sources.
"@ "[GraphQL: cassandraSources]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryCassandra -Keyspace
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCassandra -Keyspace -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryCassandra -Keyspace" @"
Paginated list of cassandra keyspaces.
"@ "[GraphQL: cassandraKeyspaces]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryCassandra -ColumnFamily
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCassandra -ColumnFamily -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryCassandra -ColumnFamily" @"
Paginated list of cassandra column families.
"@ "[GraphQL: cassandraColumnFamilies]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryCassandra -ColumnFamilyRecoverableRange
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCassandra -ColumnFamilyRecoverableRange -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryCassandra -ColumnFamilyRecoverableRange" @"
Get Recoverable Range of a Cassandra Column Family.
"@ "[GraphQL: cassandraColumnFamilyRecoverableRange]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryCassandra -ColumnFamilySchema
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCassandra -ColumnFamilySchema -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryCassandra -ColumnFamilySchema" @"
Get Schema of a Cassandra Column Family.
"@ "[GraphQL: cassandraColumnFamilySchema]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"



# -------------------------------------------------------------------
# Invoke-RscQueryCluster -Cloud
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -Cloud -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryCluster -Cloud" @"
List of Cloud Clusters with cloud information.
"@ "[GraphQL: allCloudClusters]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -Node
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -Node -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryCluster -Node" @"
Get list of nodes in this Rubrik cluster

Supported in v5.0+
Returns the list of all Rubrik nodes.
"@ "[GraphQL: clusterNodes]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -List
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -List -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryCluster -List" @"
List of the available cluster objects.
"@ "[GraphQL: clusterConnection]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -Cluster
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -Cluster -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryCluster -Cluster" @"
A cluster object.
"@ "[GraphQL: cluster]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -WithUpgradesInfo
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -WithUpgradesInfo -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryCluster -WithUpgradesInfo" @"

"@ "[GraphQL: clusterWithUpgradesInfo]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -Dns
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -Dns -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryCluster -Dns" @"
Rubrik cluster DNS information.
"@ "[GraphQL: clusterDns]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -Proxy
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -Proxy -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryCluster -Proxy" @"
Rubrik cluster proxy information.
"@ "[GraphQL: clusterProxy]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -NtpServer
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -NtpServer -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryCluster -NtpServer" @"
Get NTP Servers

Supported in v5.0+
Retrieve a list of the NTP servers assigned to the Rubrik cluster. Encryption keys are not reported.
"@ "[GraphQL: clusterNtpServers]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -NetworkInterface
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -NetworkInterface -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryCluster -NetworkInterface" @"
Get network interfaces for a Rubrik Cluster cluster

Supported in v5.0+
Retrieves network interfaces(including VLANs) on bond0/bond1.
"@ "[GraphQL: clusterNetworkInterfaces]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -FloatingIp
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -FloatingIp -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryCluster -FloatingIp" @"
Get a list of a cluster's always-available Ips

Supported in v5.0+
Get a list of a cluster's always-available Ips.
"@ "[GraphQL: clusterFloatingIps]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -Vlan
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -Vlan -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryCluster -Vlan" @"
Rubrik cluster VLAN information.
"@ "[GraphQL: clusterVlans]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -DefaultGateway
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -DefaultGateway -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryCluster -DefaultGateway" @"
Get current default gateway

Supported in v5.0+
Get current default gateway.
"@ "[GraphQL: clusterDefaultGateway]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -WebSignedCertificate
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -WebSignedCertificate -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryCluster -WebSignedCertificate" @"
Get the signed certificate for Web server

Supported in v5.2+
If the web server uses a signed certificate, fetch it.
"@ "[GraphQL: clusterWebSignedCertificate]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -Ipmi
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -Ipmi -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryCluster -Ipmi" @"
Get IPMI details

Supported in v5.0+
get IPMI details of availability and enabled access in the cluster.
"@ "[GraphQL: clusterIpmi]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -Certificate
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -Certificate -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryCluster -Certificate" @"
Get all certificates

Supported in v5.1+
Get all certificates.
"@ "[GraphQL: clusterCertificates]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -WebCertsAndIpmi
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -WebCertsAndIpmi -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryCluster -WebCertsAndIpmi" @"
Get web server certificate and IPMI details for multiple clusters.
"@ "[GraphQL: allClusterWebCertsAndIpmis]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -OperationJobProgress
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -OperationJobProgress -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryCluster -OperationJobProgress" @"
Get updates on the job progress of the Rubrik cluster operation.
"@ "[GraphQL: clusterOperationJobProgress]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -Ipv6Mode
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -Ipv6Mode -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryCluster -Ipv6Mode" @"
Rubrik cluster IPv6 mode.
"@ "[GraphQL: clusterIpv6Mode]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -Csr
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -Csr -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryCluster -Csr" @"
Get the cluster certificate signing request

Supported in v7.0+
Returns the certificate signing request generated from the private key of the Rubrik cluster.
"@ "[GraphQL: clusterCsr]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -TypeList
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -TypeList -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryCluster -TypeList" @"

"@ "[GraphQL: clusterTypeList]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -GroupByList
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -GroupByList -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryCluster -GroupByList" @"

"@ "[GraphQL: clusterGroupByConnection]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -WithConfigProtectionInfo
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -WithConfigProtectionInfo -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryCluster -WithConfigProtectionInfo" @"
A cluster object with config protection information.
"@ "[GraphQL: clusterWithConfigProtectionInfo]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -RcvLocation
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -RcvLocation -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryCluster -RcvLocation" @"
List Rubrik Cloud Vault locations of the cluster.
"@ "[GraphQL: clusterRcvLocations]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -Connected
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -Connected -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryCluster -Connected" @"
List all connected clusters.
"@ "[GraphQL: allConnectedClusters]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -ReplicationTarget
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -ReplicationTarget -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryCluster -ReplicationTarget" @"
All replication targets for a cluster.
"@ "[GraphQL: allClusterReplicationTargets]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -EncryptionInfo
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -EncryptionInfo -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryCluster -EncryptionInfo" @"
Filter clusters by encryption information.
"@ "[GraphQL: clusterEncryptionInfo]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -HostFailover
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -HostFailover -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryCluster -HostFailover" @"
Get details of the given host failover cluster.
"@ "[GraphQL: hostFailoverCluster]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -GlobalFileSearchMultiple
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -GlobalFileSearchMultiple -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryCluster -GlobalFileSearchMultiple" @"
All files and folders matching input filters.
"@ "[GraphQL: allGlobalFileSearchMultipleClusters]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -K8s
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -K8s -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryCluster -K8s" @"

"@ "[GraphQL: k8sClusters]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -Window
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -Window -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryCluster -Window" @"
A Windows Cluster.
"@ "[GraphQL: windowsCluster]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -LaDomainList
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -LaDomainList -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryCluster -LaDomainList" @"

"@ "[GraphQL: clusterSlaDomainConnection]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -LaDomainFilterList
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -LaDomainFilterList -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryCluster -LaDomainFilterList" @"

"@ "[GraphQL: clusterSlaDomainFilterConnection]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -VerifySlaWithReplicationTo
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -VerifySlaWithReplicationTo -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryCluster -VerifySlaWithReplicationTo" @"

"@ "[GraphQL: verifySLAWithReplicationToCluster]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -GlobalSla
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -GlobalSla -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryCluster -GlobalSla" @"
Global SLA Domains protecting at least one object on the specified Rubrik cluster.
"@ "[GraphQL: allClusterGlobalSlas]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -RegistrationProductInfo
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -RegistrationProductInfo -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryCluster -RegistrationProductInfo" @"
Info about the cluster product types the user is entitled to.
"@ "[GraphQL: clusterRegistrationProductInfo]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -Vcd
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -Vcd -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryCluster -Vcd" @"
List of vCloud Director clusters.
"@ "[GraphQL: vcdClusters]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -IsTotpAckNecessary
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -IsTotpAckNecessary -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryCluster -IsTotpAckNecessary" @"
Checks whether acknowledgement of the Time-based, One-Time Password (TOTP) mandate is required for upgrading the Rubrik cluster version.
"@ "[GraphQL: isTotpAckNecessaryForCluster]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryCluster -TotpAckStatus
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryCluster -TotpAckStatus -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryCluster -TotpAckStatus" @"
Checks whether acknowledgement of the Time-based, One-Time Password (TOTP) mandate is required for upgrading the Rubrik cluster version.
"@ "[GraphQL: allClustersTotpAckStatus]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"



# -------------------------------------------------------------------
# Invoke-RscQueryHyperv -TopLevelDescendant
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryHyperv -TopLevelDescendant -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryHyperv -TopLevelDescendant" @"
Paginated list of the highest-level HyperV Objects accessible by the current user.
"@ "[GraphQL: hypervTopLevelDescendants]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryHyperv -VirtualMachine
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryHyperv -VirtualMachine -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryHyperv -VirtualMachine" @"
Paginated list of HyperV Virtual Machines.
"@ "[GraphQL: hypervVirtualMachines]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryHyperv -Scvmm
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryHyperv -Scvmm -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryHyperv -Scvmm" @"
Details of the given Hyper-V SCVMM.
"@ "[GraphQL: hypervScvmm]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryHyperv -Cluster
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryHyperv -Cluster -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryHyperv -Cluster" @"
Details of the given Hyper-V Cluster.
"@ "[GraphQL: hypervCluster]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryHyperv -Server
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryHyperv -Server -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryHyperv -Server" @"
Details of the given Hyper-V Server.
"@ "[GraphQL: hypervServer]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryHyperv -UniqueServersCount
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryHyperv -UniqueServersCount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryHyperv -UniqueServersCount" @"
Count of unique HyperV Servers.
"@ "[GraphQL: uniqueHypervServersCount]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryHyperv -Mount
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryHyperv -Mount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryHyperv -Mount" @"
HyperV Live Mount Connection.
"@ "[GraphQL: hypervMounts]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryHyperv -VmDetail
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryHyperv -VmDetail -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryHyperv -VmDetail" @"
HyperV Virtual Machine detail from CDM.
"@ "[GraphQL: hypervVmDetail]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryHyperv -HostAsyncRequestStatus
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryHyperv -HostAsyncRequestStatus -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryHyperv -HostAsyncRequestStatus" @"
Get Hyper-V host async request

Supported in v5.0+
Get details about a Hyper-V host related async request.
"@ "[GraphQL: hypervHostAsyncRequestStatus]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryHyperv -ScvmmAsyncRequestStatus
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryHyperv -ScvmmAsyncRequestStatus -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryHyperv -ScvmmAsyncRequestStatus" @"
Get Hyper-V SCVMM async request

Supported in v5.0+
Get details about a Hyper-V SCVMM related async request.
"@ "[GraphQL: hypervScvmmAsyncRequestStatus]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryHyperv -VirtualMachineAsyncRequestStatus
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryHyperv -VirtualMachineAsyncRequestStatus -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryHyperv -VirtualMachineAsyncRequestStatus" @"
Get VM async request details

Supported in v5.0+
Get details about a Hyper-V vm related async request.
"@ "[GraphQL: hypervVirtualMachineAsyncRequestStatus]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"



# -------------------------------------------------------------------
# Invoke-RscQueryLdap -IntegrationList
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryLdap -IntegrationList -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryLdap -IntegrationList" @"
Browse LDAP integrations.
"@ "[GraphQL: ldapIntegrationConnection]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryLdap -PrincipalList
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryLdap -PrincipalList -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryLdap -PrincipalList" @"
Search LDAP Principals.
"@ "[GraphQL: ldapPrincipalConnection]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryLdap -AuthorizedPrincipalList
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryLdap -AuthorizedPrincipalList -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryLdap -AuthorizedPrincipalList" @"
Browse LDAP-authorized principals.
"@ "[GraphQL: ldapAuthorizedPrincipalConnection]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"



# -------------------------------------------------------------------
# Invoke-RscQueryMongo -Source
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMongo -Source -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryMongo -Source" @"
Paginated list of MongoDB sources.
"@ "[GraphQL: mongoSources]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryMongo -Database
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMongo -Database -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryMongo -Database" @"
Paginated list of MongoDB databases.
"@ "[GraphQL: mongoDatabases]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryMongo -Collection
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMongo -Collection -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryMongo -Collection" @"
Paginated list of MongoDB collections.
"@ "[GraphQL: mongoCollections]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryMongo -RecoverableRange
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMongo -RecoverableRange -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryMongo -RecoverableRange" @"
Provides the range for recovery of MongoDB objects.
"@ "[GraphQL: mongoRecoverableRanges]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryMongo -DbSource
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMongo -DbSource -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryMongo -DbSource" @"
Paginated list of MongoDB sources on NoSQL cluster.
"@ "[GraphQL: mongodbSources]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryMongo -DbDatabase
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMongo -DbDatabase -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryMongo -DbDatabase" @"
Paginated list of MongoDB databases on NoSQL cluster.
"@ "[GraphQL: mongodbDatabases]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryMongo -DbCollection
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMongo -DbCollection -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryMongo -DbCollection" @"
Paginated list of MongoDB collections on NoSQL cluster.
"@ "[GraphQL: mongodbCollections]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryMongo -DbCollectionRecoverableRange
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMongo -DbCollectionRecoverableRange -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryMongo -DbCollectionRecoverableRange" @"
Recoverable Range of a MongoDB collection on NoSQL cluster.
"@ "[GraphQL: mongodbCollectionRecoverableRange]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryMongo -DbBulkRecoverableRange
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMongo -DbBulkRecoverableRange -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryMongo -DbBulkRecoverableRange" @"
Recoverable range for multiple Management Objects on NoSQL cluster.
"@ "[GraphQL: mongodbBulkRecoverableRange]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"



# -------------------------------------------------------------------
# Invoke-RscQueryMssql -TopLevelDescendant
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMssql -TopLevelDescendant -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryMssql -TopLevelDescendant" @"
Paginated list of the highest-level Microsoft SQL Objects accessible by the current user.
"@ "[GraphQL: mssqlTopLevelDescendants]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryMssql -Database
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMssql -Database -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryMssql -Database" @"
Paginated list of Microsoft SQL Databases.
"@ "[GraphQL: mssqlDatabases]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryMssql -AvailabilityGroup
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMssql -AvailabilityGroup -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryMssql -AvailabilityGroup" @"
A Microsoft SQL Availability Group.
"@ "[GraphQL: mssqlAvailabilityGroup]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryMssql -Instance
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMssql -Instance -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryMssql -Instance" @"
A Microsoft SQL Instance.
"@ "[GraphQL: mssqlInstance]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryMssql -RecoverableRange
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMssql -RecoverableRange -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryMssql -RecoverableRange" @"
List of recoverable ranges for a Microsoft SQL Database.
"@ "[GraphQL: mssqlRecoverableRanges]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryMssql -DatabaseMissedSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMssql -DatabaseMissedSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryMssql -DatabaseMissedSnapshot" @"
List of missed snapshots for a Microsoft SQL Database.
"@ "[GraphQL: mssqlDatabaseMissedSnapshots]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryMssql -CompatibleInstance
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMssql -CompatibleInstance -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryMssql -CompatibleInstance" @"
Returns all compatible instances for export for the specified recovery time.
"@ "[GraphQL: mssqlCompatibleInstances]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryMssql -DatabaseMissedRecoverableRange
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMssql -DatabaseMissedRecoverableRange -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryMssql -DatabaseMissedRecoverableRange" @"
List of missed recoverable ranges for a Microsoft SQL Database.
"@ "[GraphQL: mssqlDatabaseMissedRecoverableRanges]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryMssql -AllDatabaseRestoreFile
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMssql -AllDatabaseRestoreFile -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryMssql -AllDatabaseRestoreFile" @"
Provides a list of database files to be restored for the specified restore or export operation.
"@ "[GraphQL: allMssqlDatabaseRestoreFiles]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryMssql -DatabaseLiveMount
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMssql -DatabaseLiveMount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryMssql -DatabaseLiveMount" @"
Paginated list of Microsoft SQL Database live mounts.
"@ "[GraphQL: mssqlDatabaseLiveMounts]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryMssql -DefaultPropertie
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMssql -DefaultPropertie -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryMssql -DefaultPropertie" @"
The current default properties for Microsoft SQL databases.
"@ "[GraphQL: mssqlDefaultProperties]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryMssql -DatabaseRestoreEstimate
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMssql -DatabaseRestoreEstimate -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryMssql -DatabaseRestoreEstimate" @"
Returns a size estimate for a restore, export, or mount.
"@ "[GraphQL: mssqlDatabaseRestoreEstimate]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryMssql -CdmLogShippingTarget
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMssql -CdmLogShippingTarget -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryMssql -CdmLogShippingTarget" @"
Paginated list of Microsoft SQL log shipping target.
"@ "[GraphQL: cdmMssqlLogShippingTargets]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryMssql -LogShippingTarget
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryMssql -LogShippingTarget -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryMssql -LogShippingTarget" @"
List of filtered Microsoft SQL log shipping targets.
"@ "[GraphQL: mssqlLogShippingTargets]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"



# -------------------------------------------------------------------
# Invoke-RscQueryNutanix -TopLevelDescendant
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryNutanix -TopLevelDescendant -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryNutanix -TopLevelDescendant" @"
Paginated list of the highest-level Nutanix Objects accessible by the current user.
"@ "[GraphQL: nutanixTopLevelDescendants]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryNutanix -TopLevelDescendantsV2
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryNutanix -TopLevelDescendantsV2 -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryNutanix -TopLevelDescendantsV2" @"
Paginated list of the highest-level Nutanix Objects accessible by the current user.
"@ "[GraphQL: nutanixTopLevelDescendantsV2]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryNutanix -Cluster
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryNutanix -Cluster -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryNutanix -Cluster" @"
A Nutanix Cluster.
"@ "[GraphQL: nutanixCluster]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryNutanix -PrismCentral
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryNutanix -PrismCentral -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryNutanix -PrismCentral" @"
Paginated list of Nutanix Prism Central objects.
"@ "[GraphQL: nutanixPrismCentrals]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryNutanix -Categorie
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryNutanix -Categorie -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryNutanix -Categorie" @"
Paginated list of Nutanix Category objects.
"@ "[GraphQL: nutanixCategories]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryNutanix -CategoryValue
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryNutanix -CategoryValue -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryNutanix -CategoryValue" @"
Paginated list of Nutanix Category Value objects.
"@ "[GraphQL: nutanixCategoryValues]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryNutanix -CategoryValueVm
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryNutanix -CategoryValueVm -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryNutanix -CategoryValueVm" @"
Paginated list of Nutanix Virtual Machines in a Category Value.
"@ "[GraphQL: nutanixCategoryValueVms]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryNutanix -Vm
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryNutanix -Vm -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryNutanix -Vm" @"
A Nutanix Virtual Machine.
"@ "[GraphQL: nutanixVm]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryNutanix -Mount
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryNutanix -Mount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryNutanix -Mount" @"
Nutanix Live Mount Connection.
"@ "[GraphQL: nutanixMounts]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryNutanix -ClusterContainer
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryNutanix -ClusterContainer -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryNutanix -ClusterContainer" @"
Get list of containers on this cluster

Supported in v5.0+
Query the nutanix cluster to get the list of containers, used for export purposes.
"@ "[GraphQL: nutanixClusterContainers]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryNutanix -ClusterNetwork
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryNutanix -ClusterNetwork -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryNutanix -ClusterNetwork" @"
Get list of networks on this cluster

Supported in v8.1+
Retrieves the list of networks by querying the Nutanix cluster. The list of networks is used for restore purposes.
"@ "[GraphQL: nutanixClusterNetworks]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryNutanix -ClusterAsyncRequestStatus
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryNutanix -ClusterAsyncRequestStatus -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryNutanix -ClusterAsyncRequestStatus" @"
Get Nutanix cluster async request

Supported in v5.0+
Get details about a Nutanix cluster-related async request.
"@ "[GraphQL: nutanixClusterAsyncRequestStatus]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryNutanix -VmAsyncRequestStatus
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryNutanix -VmAsyncRequestStatus -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryNutanix -VmAsyncRequestStatus" @"
v5.0-v8.0: Get VM async request details
v8.1+: Get virtual machine async request details

Supported in v5.0+
v5.0-v8.0: Get details about a Nutanix VM-related async request.
v8.1+: Get details about a Nutanix virtual machine-related async request.
"@ "[GraphQL: nutanixVmAsyncRequestStatus]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryNutanix -SearchVm
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryNutanix -SearchVm -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryNutanix -SearchVm" @"
v5.0-v8.0: Search for file in Nutanix VM
v8.1+: Search for file in Nutanix virtual machine

Supported in v5.0+
Search for a file within the Nutanix Virtual Machine. Search via full path prefix or filename prefix.
"@ "[GraphQL: searchNutanixVm]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryNutanix -VmMissedSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryNutanix -VmMissedSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryNutanix -VmMissedSnapshot" @"
v5.0-v8.0: Get details about missed snapshots for a VM
v8.1+: Get details about missed snapshots for a virtual machine

Supported in v5.0+
v5.0-v8.0: Retrieve the time of the day when the snapshots were missed specific to a vm.
v8.1+: Retrieve the time of the day when the snapshots were missed specific to a virtual machine.
"@ "[GraphQL: nutanixVmMissedSnapshots]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryNutanix -BrowseSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryNutanix -BrowseSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryNutanix -BrowseSnapshot" @"
v5.0-v8.0: Lists all files in VM snapshot
v8.1+: Lists all files in virtual machine snapshot

Supported in v5.0+
Lists all files and directories in a given path.
"@ "[GraphQL: nutanixBrowseSnapshot]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryNutanix -SnapshotDetail
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryNutanix -SnapshotDetail -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryNutanix -SnapshotDetail" @"
Supported in v5.0+. Get Nutanix virtual machine snapshot details.
 Retrieve detailed information about a snapshot.
"@ "[GraphQL: nutanixSnapshotDetail]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"



# -------------------------------------------------------------------
# Invoke-RscQueryO365 -Org
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -Org -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryO365 -Org" @"
Details of the O365Org.
"@ "[GraphQL: o365Org]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -OrgAtSnappableLevel
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -OrgAtSnappableLevel -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryO365 -OrgAtSnappableLevel" @"
Details of the O365Org at snappable level, given the snappable type.
"@ "[GraphQL: o365OrgAtSnappableLevel]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -AllAdGroup
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -AllAdGroup -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryO365 -AllAdGroup" @"
All AD Groups belonging to the O365 organization.
"@ "[GraphQL: allO365AdGroups]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -User
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -User -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryO365 -User" @"
Details for the O365 user corresponding to the ID.
"@ "[GraphQL: o365User]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -Mailbox
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -Mailbox -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryO365 -Mailbox" @"
Details for the Exchange mailbox corresponding to the snappable ID.
"@ "[GraphQL: o365Mailbox]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -Group
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -Group -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryO365 -Group" @"
List of O365 Groups in the O365Org.
"@ "[GraphQL: o365Groups]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -Mailboxe
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -Mailboxe -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryO365 -Mailboxe" @"
List of Mailboxes in the O365Org.
"@ "[GraphQL: o365Mailboxes]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -Onedrive
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -Onedrive -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryO365 -Onedrive" @"
Details for the OneDrive corresponding to the snappable ID.
"@ "[GraphQL: o365Onedrive]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -Site
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -Site -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryO365 -Site" @"
Details for the SharePoint site corresponding to the snappable ID.
"@ "[GraphQL: o365Site]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -SharepointDrive
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -SharepointDrive -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryO365 -SharepointDrive" @"
Details for the SharePoint drive corresponding to the snappable ID.
"@ "[GraphQL: o365SharepointDrive]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -SharepointList
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -SharepointList -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryO365 -SharepointList" @"
Details for the SharePoint list corresponding to the snappable ID.
"@ "[GraphQL: o365SharepointList]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -SharepointSite
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -SharepointSite -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryO365 -SharepointSite" @"
Details for the SharePoint site corresponding to the site ID.
"@ "[GraphQL: o365SharepointSite]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -Team
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -Team -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryO365 -Team" @"
Details for the team corresponding to the snappable ID.
"@ "[GraphQL: o365Team]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -TeamChannel
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -TeamChannel -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryO365 -TeamChannel" @"
List of Channels for the O365Team.
"@ "[GraphQL: o365TeamChannels]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -TeamConversationsFolderID
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -TeamConversationsFolderID -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryO365 -TeamConversationsFolderID" @"
ID for the conversations folder in the Team's Group Mailbox.
"@ "[GraphQL: o365TeamConversationsFolderID]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -TeamPostedBy
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -TeamPostedBy -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryO365 -TeamPostedBy" @"
Users who have posted in a team.
"@ "[GraphQL: o365TeamPostedBy]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -Calendar
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -Calendar -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryO365 -Calendar" @"
Details of the Exchange calendar pertaining to the snappable ID.
"@ "[GraphQL: o365Calendar]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -SharepointObjectList
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -SharepointObjectList -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryO365 -SharepointObjectList" @"
Returns the sharepoint objects after filtering on the object types and includeEntireHierarchy.
"@ "[GraphQL: o365SharepointObjectList]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -SharepointObject
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -SharepointObject -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryO365 -SharepointObject" @"

"@ "[GraphQL: o365SharepointObjects]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -UserObject
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -UserObject -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryO365 -UserObject" @"
Name, id, object type, and mail address of user descendant object.
"@ "[GraphQL: o365UserObjects]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -OrgSummarie
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -OrgSummarie -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryO365 -OrgSummarie" @"

"@ "[GraphQL: o365OrgSummaries]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -ObjectAncestor
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -ObjectAncestor -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryO365 -ObjectAncestor" @"

"@ "[GraphQL: o365ObjectAncestors]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -BrowseTeamConvChannel
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -BrowseTeamConvChannel -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryO365 -BrowseTeamConvChannel" @"
Browse channels in a Teams conversations snapshot.
"@ "[GraphQL: browseO365TeamConvChannels]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -ServiceAccount
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -ServiceAccount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryO365 -ServiceAccount" @"
Gets the service account for the given org.
"@ "[GraphQL: o365ServiceAccount]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -AllOrgStatus
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -AllOrgStatus -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryO365 -AllOrgStatus" @"
Gets the status of each org in the account.
"@ "[GraphQL: allO365OrgStatuses]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -License
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -License -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryO365 -License" @"
Retrieve o365 licence details.
"@ "[GraphQL: o365License]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -ListApp
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -ListApp -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryO365 -ListApp" @"
Lists the O365 apps.
"@ "[GraphQL: listO365Apps]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -AllSubscriptionsAppTypeCount
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -AllSubscriptionsAppTypeCount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryO365 -AllSubscriptionsAppTypeCount" @"
Returns the total number of apps of each type, for each O365 org.
"@ "[GraphQL: allO365SubscriptionsAppTypeCounts]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -StorageStat
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -StorageStat -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryO365 -StorageStat" @"
Returns the storage stats of an O365 org.
"@ "[GraphQL: o365StorageStats]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryO365 -ServiceStatus
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryO365 -ServiceStatus -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryO365 -ServiceStatus" @"
Returns the service status of the O365 service running on MSFT server.
"@ "[GraphQL: o365ServiceStatus]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"



# -------------------------------------------------------------------
# Invoke-RscQueryOracle -TopLevelDescendant
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryOracle -TopLevelDescendant -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryOracle -TopLevelDescendant" @"
Paginated list of the highest-level Oracle Objects accessible by the current user.
"@ "[GraphQL: oracleTopLevelDescendants]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryOracle -Database
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryOracle -Database -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryOracle -Database" @"
Paginated list of Oracle Databases.
"@ "[GraphQL: oracleDatabases]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryOracle -Host
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryOracle -Host -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryOracle -Host" @"
An Oracle Host.
"@ "[GraphQL: oracleHost]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryOracle -Rac
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryOracle -Rac -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryOracle -Rac" @"
An Oracle Real Application Cluster.
"@ "[GraphQL: oracleRac]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryOracle -DataGuardGroup
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryOracle -DataGuardGroup -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryOracle -DataGuardGroup" @"
An Oracle Data Guard Group.
"@ "[GraphQL: oracleDataGuardGroup]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryOracle -LiveMount
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryOracle -LiveMount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryOracle -LiveMount" @"
Paginated list of Oracle Live Mounts.
"@ "[GraphQL: oracleLiveMounts]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryOracle -AcoParameter
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryOracle -AcoParameter -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryOracle -AcoParameter" @"
List of supported Advanced Cloning Options

Supported in v6.0+
Get the list of supported Advanced Cloning Options (ACO) parameters.
"@ "[GraphQL: oracleAcoParameters]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryOracle -RecoverableRange
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryOracle -RecoverableRange -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryOracle -RecoverableRange" @"
Get recoverable ranges of a Oracle database

Supported in v5.0+
Retrieve the recoverable ranges for a specified Oracle database. A begin and/or end timestamp can be provided to retrieve only the ranges that fall within the window.
"@ "[GraphQL: oracleRecoverableRanges]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryOracle -MissedRecoverableRange
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryOracle -MissedRecoverableRange -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryOracle -MissedRecoverableRange" @"
Get missed recoverable ranges of a Oracle database

Supported in v5.0+
Retrieve a list of missed recoverable ranges for a Oracle database. For each run of one type of error, the first and last occurrence of the error are given.
"@ "[GraphQL: oracleMissedRecoverableRanges]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryOracle -MissedSnapshot
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryOracle -MissedSnapshot -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryOracle -MissedSnapshot" @"
Get missed snapshots for an Oracle database

Supported in v5.0+
Retrieve summary information about the missed snapshots of an Oracle database.
"@ "[GraphQL: oracleMissedSnapshots]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryOracle -AcoExampleDownloadLink
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryOracle -AcoExampleDownloadLink -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryOracle -AcoExampleDownloadLink" @"
Link to download the Advanced Recovery Options example file

Supported in v5.3+
Link to download the Advanced Recovery Options example file which can be used to customize Oracle recoveries.
"@ "[GraphQL: oracleAcoExampleDownloadLink]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryOracle -PdbDetail
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryOracle -PdbDetail -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryOracle -PdbDetail" @"
Get PDB details

Supported in v8.0+
Retrieves information about available pluggable databases (PDBs) for a given recovery point.
"@ "[GraphQL: oraclePdbDetails]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryOracle -HostLogBackupConfig
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryOracle -HostLogBackupConfig -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryOracle -HostLogBackupConfig" @"
Oracle Log backup configuration for Oracle Host.
"@ "[GraphQL: oracleHostLogBackupConfig]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryOracle -DatabaseLogBackupConfig
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryOracle -DatabaseLogBackupConfig -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryOracle -DatabaseLogBackupConfig" @"
Oracle log backup configuration for an Oracle Database.
"@ "[GraphQL: oracleDatabaseLogBackupConfig]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryOracle -RacLogBackupConfig
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryOracle -RacLogBackupConfig -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryOracle -RacLogBackupConfig" @"
Oracle log backup configuration for an Oracle RAC.
"@ "[GraphQL: oracleRacLogBackupConfig]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"



# -------------------------------------------------------------------
# Invoke-RscQuerySla -AllIofilterStatus
# -------------------------------------------------------------------

$inputs = Invoke-RscQuerySla -AllIofilterStatus -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQuerySla -AllIofilterStatus" @"
The iofilter installation status of the compute clusters related to this SLA Domain.
"@ "[GraphQL: allSlaIofilterStatuses]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQuerySla -AllCdpVmName
# -------------------------------------------------------------------

$inputs = Invoke-RscQuerySla -AllCdpVmName -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQuerySla -AllCdpVmName" @"
Names of the virtual machines in compute cluster with Continuous Data Protection (CDP) SLA Domain.
"@ "[GraphQL: allCdpSlaVmNames]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQuerySla -Domain
# -------------------------------------------------------------------

$inputs = Invoke-RscQuerySla -Domain -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQuerySla -Domain" @"
Retrieves a list of SLA Domains.
"@ "[GraphQL: slaDomains]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQuerySla -DomainWithWarningsList
# -------------------------------------------------------------------

$inputs = Invoke-RscQuerySla -DomainWithWarningsList -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQuerySla -DomainWithWarningsList" @"
Query sla list with warnings
"@ "[GraphQL: slaDomainWithWarningsList]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQuerySla -GlobalFilterList
# -------------------------------------------------------------------

$inputs = Invoke-RscQuerySla -GlobalFilterList -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQuerySla -GlobalFilterList" @"

"@ "[GraphQL: globalSlaFilterConnection]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQuerySla -DomainWithWarning
# -------------------------------------------------------------------

$inputs = Invoke-RscQuerySla -DomainWithWarning -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQuerySla -DomainWithWarning" @"

"@ "[GraphQL: slaDomainWithWarnings]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQuerySla -ArchivalValidationWarning
# -------------------------------------------------------------------

$inputs = Invoke-RscQuerySla -ArchivalValidationWarning -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQuerySla -ArchivalValidationWarning" @"
SLA Domain warnings related to non-compliant archival retention duration in the archival policy.
"@ "[GraphQL: slaArchivalValidationWarnings]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQuerySla -CountOfObjectsProtected
# -------------------------------------------------------------------

$inputs = Invoke-RscQuerySla -CountOfObjectsProtected -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQuerySla -CountOfObjectsProtected" @"
The number of objects protected by the SLA Domains.
"@ "[GraphQL: countOfObjectsProtectedBySlas]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQuerySla -AuditDetail
# -------------------------------------------------------------------

$inputs = Invoke-RscQuerySla -AuditDetail -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQuerySla -AuditDetail" @"
List of audit details for a given SLA Domain.
"@ "[GraphQL: slaAuditDetail]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQuerySla -SummariesById
# -------------------------------------------------------------------

$inputs = Invoke-RscQuerySla -SummariesById -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQuerySla -SummariesById" @"
List of SLA summaries for the given ids
"@ "[GraphQL: slaSummariesByIds]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQuerySla -GlobalStatus
# -------------------------------------------------------------------

$inputs = Invoke-RscQuerySla -GlobalStatus -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQuerySla -GlobalStatus" @"
Status on the clusters where global SLA is synced.
"@ "[GraphQL: globalSlaStatuses]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQuerySla -ProtectedClustersForGlobal
# -------------------------------------------------------------------

$inputs = Invoke-RscQuerySla -ProtectedClustersForGlobal -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQuerySla -ProtectedClustersForGlobal" @"
Clusters that have object(s) protected by global SLA.
"@ "[GraphQL: protectedClustersForGlobalSla]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQuerySla -ConflictObject
# -------------------------------------------------------------------

$inputs = Invoke-RscQuerySla -ConflictObject -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQuerySla -ConflictObject" @"

"@ "[GraphQL: slaConflictObjects]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQuerySla -ManagedVolume
# -------------------------------------------------------------------

$inputs = Invoke-RscQuerySla -ManagedVolume -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQuerySla -ManagedVolume" @"
Paginated list of SLA Managed Volumes.
"@ "[GraphQL: slaManagedVolumes]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQuerySla -ClusterDomainList
# -------------------------------------------------------------------

$inputs = Invoke-RscQuerySla -ClusterDomainList -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQuerySla -ClusterDomainList" @"

"@ "[GraphQL: clusterSlaDomainConnection]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQuerySla -ClusterDomainFilterList
# -------------------------------------------------------------------

$inputs = Invoke-RscQuerySla -ClusterDomainFilterList -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQuerySla -ClusterDomainFilterList" @"

"@ "[GraphQL: clusterSlaDomainFilterConnection]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQuerySla -VerifyWithReplicationToCluster
# -------------------------------------------------------------------

$inputs = Invoke-RscQuerySla -VerifyWithReplicationToCluster -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQuerySla -VerifyWithReplicationToCluster" @"

"@ "[GraphQL: verifySLAWithReplicationToCluster]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQuerySla -DownloadWithReplicationCsv
# -------------------------------------------------------------------

$inputs = Invoke-RscQuerySla -DownloadWithReplicationCsv -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQuerySla -DownloadWithReplicationCsv" @"
Download list of Global SLA CSV that have Replication to the given Rubrik Cluster.
"@ "[GraphQL: downloadSlaWithReplicationCsv]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQuerySla -AllClusterGlobal
# -------------------------------------------------------------------

$inputs = Invoke-RscQuerySla -AllClusterGlobal -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQuerySla -AllClusterGlobal" @"
Global SLA Domains protecting at least one object on the specified Rubrik cluster.
"@ "[GraphQL: allClusterGlobalSlas]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQuerySla -AllNcdComplianceData
# -------------------------------------------------------------------

$inputs = Invoke-RscQuerySla -AllNcdComplianceData -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQuerySla -AllNcdComplianceData" @"
NAS Cloud Direct SLA Domain compliance data for the requested clusters.
"@ "[GraphQL: allNcdSlaComplianceData]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"



# -------------------------------------------------------------------
# Invoke-RscQueryVcenter -Vcenter
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVcenter -Vcenter -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryVcenter -Vcenter" @"

"@ "[GraphQL: vSphereVCenter]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryVcenter -List
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVcenter -List -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryVcenter -List" @"

"@ "[GraphQL: vSphereVCenterConnection]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryVcenter -UniqueCount
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVcenter -UniqueCount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryVcenter -UniqueCount" @"

"@ "[GraphQL: uniqueVSphereVCenterCount]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryVcenter -PreAddInfo
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVcenter -PreAddInfo -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryVcenter -PreAddInfo" @"
Get preAddInfo for a vcenter.
"@ "[GraphQL: vCenterPreAddInfo]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryVcenter -Network
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVcenter -Network -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryVcenter -Network" @"
Get the user-configured networks in the vCenter

Supported in v5.3+
Get the names and IDs of the user configured networks in the vCenter. This information enables users to choose a desired network for backups to go through for VMware Cloud on AWS setups.
"@ "[GraphQL: vCenterNetworks]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryVcenter -HotAddNetwork
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVcenter -HotAddNetwork -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryVcenter -HotAddNetwork" @"
Retrieve the user-configured network for HotAdd operations

Supported in v5.3+
Retrieve the user-configured network for HotAdd backup and recovery operations on VMware on AWS.
"@ "[GraphQL: vCenterHotAddNetwork]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryVcenter -NumProxiesNeeded
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVcenter -NumProxiesNeeded -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryVcenter -NumProxiesNeeded" @"
Get the number of HotAdd proxies needed for the vCenter

Supported in v5.3+
Get the number of HotAdd proxies that need to be deployed to the vCenter to support the maximum number of ingest jobs.
"@ "[GraphQL: vCenterNumProxiesNeeded]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryVcenter -HotAddProxy
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVcenter -HotAddProxy -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryVcenter -HotAddProxy" @"
Get a list of HotAdd proxy virtual machines

Supported in v5.3+
Retrieve summary information for all HotAdd proxy virtual machines.
"@ "[GraphQL: allVcenterHotAddProxyVms]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryVcenter -HotAddBandwidth
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVcenter -HotAddBandwidth -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryVcenter -HotAddBandwidth" @"
Get the ingest and export bandwidth limits for HotAdd with the vCenter

Supported in v5.3+
Get the ingest and export bandwidth limits in Mbps when using HotAdd with the vCenter. These limits are shared across all HotAdd proxies for the Center.
"@ "[GraphQL: vCenterHotAddBandwidth]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryVcenter -AdvancedTagPreview
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVcenter -AdvancedTagPreview -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryVcenter -AdvancedTagPreview" @"
Preview list of virtual machines of a proposed filter condition

Supported in v7.0+
Preview list of virtual machines of a proposed filter condition. The result might not be accurate if new virtual machines were added after last vCenter refresh.
"@ "[GraphQL: vCenterAdvancedTagPreview]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"



# -------------------------------------------------------------------
# Invoke-RscQueryVsphere -Blueprint
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphere -Blueprint -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryVsphere -Blueprint" @"

"@ "[GraphQL: vSphereBlueprint]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphere -Datacenter
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphere -Datacenter -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryVsphere -Datacenter" @"

"@ "[GraphQL: vSphereDatacenter]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphere -ComputeCluster
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphere -ComputeCluster -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryVsphere -ComputeCluster" @"

"@ "[GraphQL: vSphereComputeCluster]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphere -ResourcePool
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphere -ResourcePool -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryVsphere -ResourcePool" @"

"@ "[GraphQL: vSphereResourcePool]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphere -Folder
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphere -Folder -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryVsphere -Folder" @"

"@ "[GraphQL: vSphereFolder]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphere -Host
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphere -Host -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryVsphere -Host" @"

"@ "[GraphQL: vSphereHost]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphere -DatastoreCluster
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphere -DatastoreCluster -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryVsphere -DatastoreCluster" @"
Vsphere datastore cluster based on id passed in.
"@ "[GraphQL: vSphereDatastoreCluster]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphere -Datastore
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphere -Datastore -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryVsphere -Datastore" @"
Vsphere datastore based on id passed in.
"@ "[GraphQL: vSphereDatastore]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphere -HostsByFid
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphere -HostsByFid -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryVsphere -HostsByFid" @"
All of the VSphere hosts based on fids passed in.
"@ "[GraphQL: vSphereHostsByFids]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphere -Tag
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphere -Tag -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryVsphere -Tag" @"

"@ "[GraphQL: vSphereTag]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphere -TagCategory
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphere -TagCategory -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryVsphere -TagCategory" @"

"@ "[GraphQL: vSphereTagCategory]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphere -Network
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphere -Network -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryVsphere -Network" @"

"@ "[GraphQL: vSphereNetwork]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphere -TopLevelDescendantsList
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphere -TopLevelDescendantsList -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryVsphere -TopLevelDescendantsList" @"

"@ "[GraphQL: vSphereTopLevelDescendantsConnection]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphere -RootRecoveryHierarchy
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphere -RootRecoveryHierarchy -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryVsphere -RootRecoveryHierarchy" @"
The root hierarchy for VMware export, which includes VMware compute clusters and standalone hosts.
"@ "[GraphQL: vSphereRootRecoveryHierarchy]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphere -HostList
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphere -HostList -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryVsphere -HostList" @"

"@ "[GraphQL: vSphereHostConnection]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphere -DatastoreList
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphere -DatastoreList -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryVsphere -DatastoreList" @"

"@ "[GraphQL: vSphereDatastoreConnection]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphere -LiveMount
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphere -LiveMount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryVsphere -LiveMount" @"
List of vSphere Live Mounts.
"@ "[GraphQL: vSphereLiveMounts]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphere -MountList
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphere -MountList -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryVsphere -MountList" @"
vSphere Live Mount Connection
"@ "[GraphQL: vSphereMountConnection]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphere -Mount
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphere -Mount -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryVsphere -Mount" @"
Get a vSphere Live Mount by id
"@ "[GraphQL: vSphereMount]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphere -HostDetail
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphere -HostDetail -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryVsphere -HostDetail" @"
Get details of a ESXi hypervisor

Supported in v5.0+
Get details of a ESXi hypervisor.
"@ "[GraphQL: vSphereHostDetails]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphere -VmwareCdpLiveInfo
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphere -VmwareCdpLiveInfo -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryVsphere -VmwareCdpLiveInfo" @"

"@ "[GraphQL: vsphereVmwareCdpLiveInfo]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"



# -------------------------------------------------------------------
# Invoke-RscQueryVsphereVm -New
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphereVm -New -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryVsphereVm -New" @"

"@ "[GraphQL: vSphereVmNew]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphereVm -NewList
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphereVm -NewList -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryVsphereVm -NewList" @"

"@ "[GraphQL: vSphereVmNewConnection]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphereVm -RecoverableRange
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphereVm -RecoverableRange -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryVsphereVm -RecoverableRange" @"

"@ "[GraphQL: vsphereVMRecoverableRange]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphereVm -RecoverableRangeInBatch
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphereVm -RecoverableRangeInBatch -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryVsphereVm -RecoverableRangeInBatch" @"

"@ "[GraphQL: vsphereVMRecoverableRangeInBatch]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphereVm -MissedRecoverableRange
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphereVm -MissedRecoverableRange -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryVsphereVm -MissedRecoverableRange" @"

"@ "[GraphQL: vsphereVMMissedRecoverableRange]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


# -------------------------------------------------------------------
# Invoke-RscQueryVsphereVm -AsyncRequestStatus
# -------------------------------------------------------------------

$inputs = Invoke-RscQueryVsphereVm -AsyncRequestStatus -GetInputs
$fieldTypeName = $inputs.Field.GetType().Name
$argNames = $inputs.Arg.Keys
Write-Message "Invoke-RscQueryVsphereVm -AsyncRequestStatus" @"

"@ "[GraphQL: vSphereVMAsyncRequestStatus]${nl}[Field: ${fieldTypeName}]${nl}[Args: ${argNames}]"


