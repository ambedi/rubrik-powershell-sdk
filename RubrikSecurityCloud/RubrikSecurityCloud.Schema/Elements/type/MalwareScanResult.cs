// MalwareScanResult.cs
//
// This file is part of the Rubrik PowerShell SDK.
// Generated on 2023-04-13 20:03:40.
// Manual changes to this file may be lost.

#nullable enable
using System;
using System.Collections.Generic;
using System.Text;
using System.ComponentModel.DataAnnotations;
using Newtonsoft.Json;
using System.Reflection;
using System.Text.RegularExpressions;

namespace Rubrik.SecurityCloud.Types
{
    #region MalwareScanResult
    public class MalwareScanResult: IFragment
    {
        #region members
        //      C# -> System.String? Location
        // GraphQL -> location: String! (scalar)
        [JsonProperty("location")]
        public System.String? Location { get; set; }

        //      C# -> List<MalwareScanInSnapshotResult>? SnapshotResults
        // GraphQL -> snapshotResults: [MalwareScanInSnapshotResult!]! (type)
        [JsonProperty("snapshotResults")]
        public List<MalwareScanInSnapshotResult>? SnapshotResults { get; set; }

        //      C# -> CdmHierarchySnappableNew? Object
        // GraphQL -> object: CdmHierarchySnappableNew (interface)
        [JsonProperty("object")]
        public CdmHierarchySnappableNew? Object { get; set; }

        #endregion

    #region methods

    public MalwareScanResult Set(
        System.String? Location = null,
        List<MalwareScanInSnapshotResult>? SnapshotResults = null,
        CdmHierarchySnappableNew? Object = null
    ) 
    {
        if ( Location != null ) {
            this.Location = Location;
        }
        if ( SnapshotResults != null ) {
            this.SnapshotResults = SnapshotResults;
        }
        if ( Object != null ) {
            this.Object = Object;
        }
        return this;
    }

            //[JsonIgnore]
        // AsFragment returns a string that denotes what
        // fields are not null, recursively for non-scalar fields.
        public string AsFragment(int indent=0)
        {
            string ind = new string(' ', indent*2);
            string s = "";
            //      C# -> System.String? Location
            // GraphQL -> location: String! (scalar)
            if (this.Location != null)
            {
                 s += ind + "location\n";

            }
            //      C# -> List<MalwareScanInSnapshotResult>? SnapshotResults
            // GraphQL -> snapshotResults: [MalwareScanInSnapshotResult!]! (type)
            if (this.SnapshotResults != null)
            {
                 s += ind + "snapshotResults\n";

                 s += ind + "{\n" + 
                 this.SnapshotResults.AsFragment(indent+1) + 
                 ind + "}\n";
            }
                        //      C# -> CdmHierarchySnappableNew? Object
            // GraphQL -> object: CdmHierarchySnappableNew (interface)
            if (this.Object != null)
            {
                s += ind + "object\n";
                s += ind + "{\n";

                string typename = this.Object.GetType().ToString();
                int typenameIdx = typename.LastIndexOf('.');
                typename = typename.Substring(typenameIdx + 1);
                s += ind + String.Format("... on {0}\n", typename);
                s += ind + "{\n" +

                this.Object.AsFragment(indent+1) +

                ind + "}\n" +

                ind + "}\n";
            }
            return new string(s);
        }


    
        //[JsonIgnore]
        public void ApplyExploratoryFragment(String parent = "")
        {
            //      C# -> System.String? Location
            // GraphQL -> location: String! (scalar)
            if (this.Location == null && Exploration.Includes(parent + ".location$"))
            {
                this.Location = new System.String("FETCH");
            }
            //      C# -> List<MalwareScanInSnapshotResult>? SnapshotResults
            // GraphQL -> snapshotResults: [MalwareScanInSnapshotResult!]! (type)
            if (this.SnapshotResults == null && Exploration.Includes(parent + ".snapshotResults"))
            {
                this.SnapshotResults = new List<MalwareScanInSnapshotResult>();
                this.SnapshotResults.ApplyExploratoryFragment(parent + ".snapshotResults");
            }
            //      C# -> CdmHierarchySnappableNew? Object
            // GraphQL -> object: CdmHierarchySnappableNew (interface)
            if (this.Object == null && Exploration.Includes(parent + ".object"))
            {
                this.Object = (CdmHierarchySnappableNew)InterfaceHelper.CreateInstanceOfFirstType(typeof(CdmHierarchySnappableNew));
                this.Object.ApplyExploratoryFragment(parent + ".object");
            }
        }


    #endregion

    } // class MalwareScanResult
    #endregion

    public static class ListMalwareScanResultExtensions
    {
        // This SDK uses the convention of defining fragments by
        // _un-null-ing_ fields in an object of the type of the fragment
        // we want to create. When creating a fragment from an object,
        // all fields (including nested objects) that are not null are
        // included in the fragment. When creating a fragment from a list,
        // there is possibly a different fragment with each item in the list,
        // but the GraphQL syntax for list fragment is identical to
        // object fragment, so we have to decide how to generate the fragment.
        // We choose to generate a fragment that includes all fields that are
        // not null in the *first* item in the list. This is not a perfect
        // solution, but it is a reasonable one.
        public static string AsFragment(
            this List<MalwareScanResult> list,
            int indent=0)
        {
            return list[0].AsFragment();
        }

        public static void ApplyExploratoryFragment(
            this List<MalwareScanResult> list, 
            String parent = "")
        {
            var item = new MalwareScanResult();
            list.Add(item);
            item.ApplyExploratoryFragment(parent);
        }
    }


} // namespace Rubrik.SecurityCloud.Types