// MalwareCardParams.cs
//
// This generated file is part of the Rubrik PowerShell SDK.
// Manual changes to this file may be lost.

#nullable enable
using System;
using System.Collections.Generic;
using System.Text;
using System.ComponentModel.DataAnnotations;
using Newtonsoft.Json;
using System.Reflection;
using System.Text.RegularExpressions;
using RubrikSecurityCloud;

namespace RubrikSecurityCloud.Types
{
    #region MalwareCardParams
    public class MalwareCardParams: BaseType
    {
        #region members

        //      C# -> System.String? FileName
        // GraphQL -> fileName: String! (scalar)
        [JsonProperty("fileName")]
        public System.String? FileName { get; set; }

        //      C# -> System.String? FilePath
        // GraphQL -> filePath: String! (scalar)
        [JsonProperty("filePath")]
        public System.String? FilePath { get; set; }

        //      C# -> System.String? IntelSource
        // GraphQL -> intelSource: String! (scalar)
        [JsonProperty("intelSource")]
        public System.String? IntelSource { get; set; }

        //      C# -> System.String? Ioc
        // GraphQL -> ioc: String! (scalar)
        [JsonProperty("ioc")]
        public System.String? Ioc { get; set; }

        //      C# -> System.String? IocDescription
        // GraphQL -> iocDescription: String! (scalar)
        [JsonProperty("iocDescription")]
        public System.String? IocDescription { get; set; }

        //      C# -> System.String? IocRuleAuthor
        // GraphQL -> iocRuleAuthor: String! (scalar)
        [JsonProperty("iocRuleAuthor")]
        public System.String? IocRuleAuthor { get; set; }

        //      C# -> System.String? Md5Hash
        // GraphQL -> md5Hash: String! (scalar)
        [JsonProperty("md5Hash")]
        public System.String? Md5Hash { get; set; }

        //      C# -> System.String? ObjectName
        // GraphQL -> objectName: String! (scalar)
        [JsonProperty("objectName")]
        public System.String? ObjectName { get; set; }

        //      C# -> System.String? Sha1Hash
        // GraphQL -> sha1Hash: String! (scalar)
        [JsonProperty("sha1Hash")]
        public System.String? Sha1Hash { get; set; }

        //      C# -> System.String? Sha256Hash
        // GraphQL -> sha256Hash: String! (scalar)
        [JsonProperty("sha256Hash")]
        public System.String? Sha256Hash { get; set; }

        //      C# -> DateTime? SnapshotFirstSeen
        // GraphQL -> snapshotFirstSeen: DateTime (scalar)
        [JsonProperty("snapshotFirstSeen")]
        public DateTime? SnapshotFirstSeen { get; set; }


        #endregion

    #region methods

    public override string GetGqlTypeName() {
        return "MalwareCardParams";
    }

    public MalwareCardParams Set(
        System.String? FileName = null,
        System.String? FilePath = null,
        System.String? IntelSource = null,
        System.String? Ioc = null,
        System.String? IocDescription = null,
        System.String? IocRuleAuthor = null,
        System.String? Md5Hash = null,
        System.String? ObjectName = null,
        System.String? Sha1Hash = null,
        System.String? Sha256Hash = null,
        DateTime? SnapshotFirstSeen = null
    ) 
    {
        if ( FileName != null ) {
            this.FileName = FileName;
        }
        if ( FilePath != null ) {
            this.FilePath = FilePath;
        }
        if ( IntelSource != null ) {
            this.IntelSource = IntelSource;
        }
        if ( Ioc != null ) {
            this.Ioc = Ioc;
        }
        if ( IocDescription != null ) {
            this.IocDescription = IocDescription;
        }
        if ( IocRuleAuthor != null ) {
            this.IocRuleAuthor = IocRuleAuthor;
        }
        if ( Md5Hash != null ) {
            this.Md5Hash = Md5Hash;
        }
        if ( ObjectName != null ) {
            this.ObjectName = ObjectName;
        }
        if ( Sha1Hash != null ) {
            this.Sha1Hash = Sha1Hash;
        }
        if ( Sha256Hash != null ) {
            this.Sha256Hash = Sha256Hash;
        }
        if ( SnapshotFirstSeen != null ) {
            this.SnapshotFirstSeen = SnapshotFirstSeen;
        }
        return this;
    }

        //[JsonIgnore]
    // AsFieldSpec returns a string that denotes what
    // fields are not null, recursively for non-scalar fields.
    public override string AsFieldSpec(FieldSpecConfig? conf=null)
    {
        conf=(conf==null)?new FieldSpecConfig():conf;
        if (this.IsComposite() && ! conf.IgnoreComposition) {
            return InterfaceHelper.CompositeAsFieldSpec((BaseType)this, conf);
        }
        string ind = conf.IndentStr();
        string s = "";
        //      C# -> System.String? FileName
        // GraphQL -> fileName: String! (scalar)
        if (this.FileName != null) {
            if (conf.Flat) {
                s += conf.Prefix + "fileName\n" ;
            } else {
                s += ind + "fileName\n" ;
            }
        }
        //      C# -> System.String? FilePath
        // GraphQL -> filePath: String! (scalar)
        if (this.FilePath != null) {
            if (conf.Flat) {
                s += conf.Prefix + "filePath\n" ;
            } else {
                s += ind + "filePath\n" ;
            }
        }
        //      C# -> System.String? IntelSource
        // GraphQL -> intelSource: String! (scalar)
        if (this.IntelSource != null) {
            if (conf.Flat) {
                s += conf.Prefix + "intelSource\n" ;
            } else {
                s += ind + "intelSource\n" ;
            }
        }
        //      C# -> System.String? Ioc
        // GraphQL -> ioc: String! (scalar)
        if (this.Ioc != null) {
            if (conf.Flat) {
                s += conf.Prefix + "ioc\n" ;
            } else {
                s += ind + "ioc\n" ;
            }
        }
        //      C# -> System.String? IocDescription
        // GraphQL -> iocDescription: String! (scalar)
        if (this.IocDescription != null) {
            if (conf.Flat) {
                s += conf.Prefix + "iocDescription\n" ;
            } else {
                s += ind + "iocDescription\n" ;
            }
        }
        //      C# -> System.String? IocRuleAuthor
        // GraphQL -> iocRuleAuthor: String! (scalar)
        if (this.IocRuleAuthor != null) {
            if (conf.Flat) {
                s += conf.Prefix + "iocRuleAuthor\n" ;
            } else {
                s += ind + "iocRuleAuthor\n" ;
            }
        }
        //      C# -> System.String? Md5Hash
        // GraphQL -> md5Hash: String! (scalar)
        if (this.Md5Hash != null) {
            if (conf.Flat) {
                s += conf.Prefix + "md5Hash\n" ;
            } else {
                s += ind + "md5Hash\n" ;
            }
        }
        //      C# -> System.String? ObjectName
        // GraphQL -> objectName: String! (scalar)
        if (this.ObjectName != null) {
            if (conf.Flat) {
                s += conf.Prefix + "objectName\n" ;
            } else {
                s += ind + "objectName\n" ;
            }
        }
        //      C# -> System.String? Sha1Hash
        // GraphQL -> sha1Hash: String! (scalar)
        if (this.Sha1Hash != null) {
            if (conf.Flat) {
                s += conf.Prefix + "sha1Hash\n" ;
            } else {
                s += ind + "sha1Hash\n" ;
            }
        }
        //      C# -> System.String? Sha256Hash
        // GraphQL -> sha256Hash: String! (scalar)
        if (this.Sha256Hash != null) {
            if (conf.Flat) {
                s += conf.Prefix + "sha256Hash\n" ;
            } else {
                s += ind + "sha256Hash\n" ;
            }
        }
        //      C# -> DateTime? SnapshotFirstSeen
        // GraphQL -> snapshotFirstSeen: DateTime (scalar)
        if (this.SnapshotFirstSeen != null) {
            if (conf.Flat) {
                s += conf.Prefix + "snapshotFirstSeen\n" ;
            } else {
                s += ind + "snapshotFirstSeen\n" ;
            }
        }
        return s;
    }


    
    public override void ApplyExploratoryFieldSpec(ExplorationContext ec)
    {
        //      C# -> System.String? FileName
        // GraphQL -> fileName: String! (scalar)
        if (ec.Includes("fileName",true))
        {
            if(this.FileName == null) {

                this.FileName = "FETCH";

            } else {


            }
        }
        else if (this.FileName != null && ec.Excludes("fileName",true))
        {
            this.FileName = null;
        }
        //      C# -> System.String? FilePath
        // GraphQL -> filePath: String! (scalar)
        if (ec.Includes("filePath",true))
        {
            if(this.FilePath == null) {

                this.FilePath = "FETCH";

            } else {


            }
        }
        else if (this.FilePath != null && ec.Excludes("filePath",true))
        {
            this.FilePath = null;
        }
        //      C# -> System.String? IntelSource
        // GraphQL -> intelSource: String! (scalar)
        if (ec.Includes("intelSource",true))
        {
            if(this.IntelSource == null) {

                this.IntelSource = "FETCH";

            } else {


            }
        }
        else if (this.IntelSource != null && ec.Excludes("intelSource",true))
        {
            this.IntelSource = null;
        }
        //      C# -> System.String? Ioc
        // GraphQL -> ioc: String! (scalar)
        if (ec.Includes("ioc",true))
        {
            if(this.Ioc == null) {

                this.Ioc = "FETCH";

            } else {


            }
        }
        else if (this.Ioc != null && ec.Excludes("ioc",true))
        {
            this.Ioc = null;
        }
        //      C# -> System.String? IocDescription
        // GraphQL -> iocDescription: String! (scalar)
        if (ec.Includes("iocDescription",true))
        {
            if(this.IocDescription == null) {

                this.IocDescription = "FETCH";

            } else {


            }
        }
        else if (this.IocDescription != null && ec.Excludes("iocDescription",true))
        {
            this.IocDescription = null;
        }
        //      C# -> System.String? IocRuleAuthor
        // GraphQL -> iocRuleAuthor: String! (scalar)
        if (ec.Includes("iocRuleAuthor",true))
        {
            if(this.IocRuleAuthor == null) {

                this.IocRuleAuthor = "FETCH";

            } else {


            }
        }
        else if (this.IocRuleAuthor != null && ec.Excludes("iocRuleAuthor",true))
        {
            this.IocRuleAuthor = null;
        }
        //      C# -> System.String? Md5Hash
        // GraphQL -> md5Hash: String! (scalar)
        if (ec.Includes("md5Hash",true))
        {
            if(this.Md5Hash == null) {

                this.Md5Hash = "FETCH";

            } else {


            }
        }
        else if (this.Md5Hash != null && ec.Excludes("md5Hash",true))
        {
            this.Md5Hash = null;
        }
        //      C# -> System.String? ObjectName
        // GraphQL -> objectName: String! (scalar)
        if (ec.Includes("objectName",true))
        {
            if(this.ObjectName == null) {

                this.ObjectName = "FETCH";

            } else {


            }
        }
        else if (this.ObjectName != null && ec.Excludes("objectName",true))
        {
            this.ObjectName = null;
        }
        //      C# -> System.String? Sha1Hash
        // GraphQL -> sha1Hash: String! (scalar)
        if (ec.Includes("sha1Hash",true))
        {
            if(this.Sha1Hash == null) {

                this.Sha1Hash = "FETCH";

            } else {


            }
        }
        else if (this.Sha1Hash != null && ec.Excludes("sha1Hash",true))
        {
            this.Sha1Hash = null;
        }
        //      C# -> System.String? Sha256Hash
        // GraphQL -> sha256Hash: String! (scalar)
        if (ec.Includes("sha256Hash",true))
        {
            if(this.Sha256Hash == null) {

                this.Sha256Hash = "FETCH";

            } else {


            }
        }
        else if (this.Sha256Hash != null && ec.Excludes("sha256Hash",true))
        {
            this.Sha256Hash = null;
        }
        //      C# -> DateTime? SnapshotFirstSeen
        // GraphQL -> snapshotFirstSeen: DateTime (scalar)
        if (ec.Includes("snapshotFirstSeen",true))
        {
            if(this.SnapshotFirstSeen == null) {

                this.SnapshotFirstSeen = new DateTime();

            } else {


            }
        }
        else if (this.SnapshotFirstSeen != null && ec.Excludes("snapshotFirstSeen",true))
        {
            this.SnapshotFirstSeen = null;
        }
    }


    #endregion

    } // class MalwareCardParams
    
    #endregion

    public static class ListMalwareCardParamsExtensions
    {
        // This SDK uses the convention of defining field specs as
        // the collection of properties that are not null in an object.
        // When creating a field spec for an object, we look at whether
        // the object is a list or not, and whether it implements an interface
        // or not. The following are the possible combinations:
        // S or L: single object or list object
        // SD or II: self-defined or interface-implementing
        // | S/L | SD/II | How fied spec is created
        // |-----|-------|-------------------------
        // | S   | SD    | all properties (including nested objects) that are not null are included in the field spec.
        // | L   | SD    | the field spec of the first item in the list is used. Other items are ignored.
        // | S   | II    | same as S-SD if object is not composite. If object is composite, the field spec of each item in the composition is included as an inline fragment (... on)
        // | L   | II    | the field spec of each item in the list is included as an inline fragment (... on)
        //
        // Note that L-II means that each item in the list is II (not the list itself).
        // This function handles L-SD and L-II cases.
        public static string AsFieldSpec(
            this List<MalwareCardParams> list,
            FieldSpecConfig? conf=null)
        {
            conf=(conf==null)?new FieldSpecConfig():conf;
            return list[0].AsFieldSpec(conf.Child(ignoreComposition: true)); // L-SD
        }

        public static List<string> SelectedFields(this List<MalwareCardParams> list)
        {
            return StringUtils.FieldSpecStringToList(
                list.AsFieldSpec(new FieldSpecConfig { Flat = true }));
        }



        public static void ApplyExploratoryFieldSpec(
            this List<MalwareCardParams> list, 
            ExplorationContext ec)
        {
            if ( list.Count == 0 ) {
                list.Add(new MalwareCardParams());
            }
            list[0].ApplyExploratoryFieldSpec(ec);
        }

        public static void SelectForRetrieval(this List<MalwareCardParams> list)
        {
            list.ApplyExploratoryFieldSpec(new ExplorationContext());
        }
    }


} // namespace RubrikSecurityCloud.Types