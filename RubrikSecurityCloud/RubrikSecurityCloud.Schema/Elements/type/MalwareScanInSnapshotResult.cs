// MalwareScanInSnapshotResult.cs
//
// This file is part of the Rubrik PowerShell SDK.
// Generated on 2023-04-13 20:03:40.
// Manual changes to this file may be lost.

#nullable enable
using System;
using System.Collections.Generic;
using System.Text;
using System.ComponentModel.DataAnnotations;
using Newtonsoft.Json;
using System.Reflection;
using System.Text.RegularExpressions;

namespace Rubrik.SecurityCloud.Types
{
    #region MalwareScanInSnapshotResult
    public class MalwareScanInSnapshotResult: IFragment
    {
        #region members
        //      C# -> System.Boolean? IsSnapshotExpired
        // GraphQL -> isSnapshotExpired: Boolean! (scalar)
        [JsonProperty("isSnapshotExpired")]
        public System.Boolean? IsSnapshotExpired { get; set; }

        //      C# -> System.String? LastJobId
        // GraphQL -> lastJobId: String (scalar)
        [JsonProperty("lastJobId")]
        public System.String? LastJobId { get; set; }

        //      C# -> DateTime? SnapshotDate
        // GraphQL -> snapshotDate: DateTime (scalar)
        [JsonProperty("snapshotDate")]
        public DateTime? SnapshotDate { get; set; }

        //      C# -> System.String? SnapshotId
        // GraphQL -> snapshotId: String! (scalar)
        [JsonProperty("snapshotId")]
        public System.String? SnapshotId { get; set; }

        //      C# -> List<MalwareMatch>? Matches
        // GraphQL -> matches: [MalwareMatch!]! (type)
        [JsonProperty("matches")]
        public List<MalwareMatch>? Matches { get; set; }

        //      C# -> QuarantineSpec? QuarantineDetails
        // GraphQL -> quarantineDetails: QuarantineSpec (type)
        [JsonProperty("quarantineDetails")]
        public QuarantineSpec? QuarantineDetails { get; set; }

        //      C# -> MalwareScanStats? ScanStats
        // GraphQL -> scanStats: MalwareScanStats (type)
        [JsonProperty("scanStats")]
        public MalwareScanStats? ScanStats { get; set; }

        //      C# -> MalwareScanInSnapshotStatus? Status
        // GraphQL -> status: MalwareScanInSnapshotStatus! (enum)
        [JsonProperty("status")]
        public MalwareScanInSnapshotStatus? Status { get; set; }

        #endregion

    #region methods

    public MalwareScanInSnapshotResult Set(
        System.Boolean? IsSnapshotExpired = null,
        System.String? LastJobId = null,
        DateTime? SnapshotDate = null,
        System.String? SnapshotId = null,
        List<MalwareMatch>? Matches = null,
        QuarantineSpec? QuarantineDetails = null,
        MalwareScanStats? ScanStats = null,
        MalwareScanInSnapshotStatus? Status = null
    ) 
    {
        if ( IsSnapshotExpired != null ) {
            this.IsSnapshotExpired = IsSnapshotExpired;
        }
        if ( LastJobId != null ) {
            this.LastJobId = LastJobId;
        }
        if ( SnapshotDate != null ) {
            this.SnapshotDate = SnapshotDate;
        }
        if ( SnapshotId != null ) {
            this.SnapshotId = SnapshotId;
        }
        if ( Matches != null ) {
            this.Matches = Matches;
        }
        if ( QuarantineDetails != null ) {
            this.QuarantineDetails = QuarantineDetails;
        }
        if ( ScanStats != null ) {
            this.ScanStats = ScanStats;
        }
        if ( Status != null ) {
            this.Status = Status;
        }
        return this;
    }

            //[JsonIgnore]
        // AsFragment returns a string that denotes what
        // fields are not null, recursively for non-scalar fields.
        public string AsFragment(int indent=0)
        {
            string ind = new string(' ', indent*2);
            string s = "";
            //      C# -> System.Boolean? IsSnapshotExpired
            // GraphQL -> isSnapshotExpired: Boolean! (scalar)
            if (this.IsSnapshotExpired != null)
            {
                 s += ind + "isSnapshotExpired\n";

            }
            //      C# -> System.String? LastJobId
            // GraphQL -> lastJobId: String (scalar)
            if (this.LastJobId != null)
            {
                 s += ind + "lastJobId\n";

            }
            //      C# -> DateTime? SnapshotDate
            // GraphQL -> snapshotDate: DateTime (scalar)
            if (this.SnapshotDate != null)
            {
                 s += ind + "snapshotDate\n";

            }
            //      C# -> System.String? SnapshotId
            // GraphQL -> snapshotId: String! (scalar)
            if (this.SnapshotId != null)
            {
                 s += ind + "snapshotId\n";

            }
            //      C# -> List<MalwareMatch>? Matches
            // GraphQL -> matches: [MalwareMatch!]! (type)
            if (this.Matches != null)
            {
                 s += ind + "matches\n";

                 s += ind + "{\n" + 
                 this.Matches.AsFragment(indent+1) + 
                 ind + "}\n";
            }
            //      C# -> QuarantineSpec? QuarantineDetails
            // GraphQL -> quarantineDetails: QuarantineSpec (type)
            if (this.QuarantineDetails != null)
            {
                 s += ind + "quarantineDetails\n";

                 s += ind + "{\n" + 
                 this.QuarantineDetails.AsFragment(indent+1) + 
                 ind + "}\n";
            }
            //      C# -> MalwareScanStats? ScanStats
            // GraphQL -> scanStats: MalwareScanStats (type)
            if (this.ScanStats != null)
            {
                 s += ind + "scanStats\n";

                 s += ind + "{\n" + 
                 this.ScanStats.AsFragment(indent+1) + 
                 ind + "}\n";
            }
            //      C# -> MalwareScanInSnapshotStatus? Status
            // GraphQL -> status: MalwareScanInSnapshotStatus! (enum)
            if (this.Status != null)
            {
                 s += ind + "status\n";

            }
            return new string(s);
        }


    
        //[JsonIgnore]
        public void ApplyExploratoryFragment(String parent = "")
        {
            //      C# -> System.Boolean? IsSnapshotExpired
            // GraphQL -> isSnapshotExpired: Boolean! (scalar)
            if (this.IsSnapshotExpired == null && Exploration.Includes(parent + ".isSnapshotExpired$"))
            {
                this.IsSnapshotExpired = new System.Boolean();
            }
            //      C# -> System.String? LastJobId
            // GraphQL -> lastJobId: String (scalar)
            if (this.LastJobId == null && Exploration.Includes(parent + ".lastJobId$"))
            {
                this.LastJobId = new System.String("FETCH");
            }
            //      C# -> DateTime? SnapshotDate
            // GraphQL -> snapshotDate: DateTime (scalar)
            if (this.SnapshotDate == null && Exploration.Includes(parent + ".snapshotDate$"))
            {
                this.SnapshotDate = new DateTime();
            }
            //      C# -> System.String? SnapshotId
            // GraphQL -> snapshotId: String! (scalar)
            if (this.SnapshotId == null && Exploration.Includes(parent + ".snapshotId$"))
            {
                this.SnapshotId = new System.String("FETCH");
            }
            //      C# -> List<MalwareMatch>? Matches
            // GraphQL -> matches: [MalwareMatch!]! (type)
            if (this.Matches == null && Exploration.Includes(parent + ".matches"))
            {
                this.Matches = new List<MalwareMatch>();
                this.Matches.ApplyExploratoryFragment(parent + ".matches");
            }
            //      C# -> QuarantineSpec? QuarantineDetails
            // GraphQL -> quarantineDetails: QuarantineSpec (type)
            if (this.QuarantineDetails == null && Exploration.Includes(parent + ".quarantineDetails"))
            {
                this.QuarantineDetails = new QuarantineSpec();
                this.QuarantineDetails.ApplyExploratoryFragment(parent + ".quarantineDetails");
            }
            //      C# -> MalwareScanStats? ScanStats
            // GraphQL -> scanStats: MalwareScanStats (type)
            if (this.ScanStats == null && Exploration.Includes(parent + ".scanStats"))
            {
                this.ScanStats = new MalwareScanStats();
                this.ScanStats.ApplyExploratoryFragment(parent + ".scanStats");
            }
            //      C# -> MalwareScanInSnapshotStatus? Status
            // GraphQL -> status: MalwareScanInSnapshotStatus! (enum)
            if (this.Status == null && Exploration.Includes(parent + ".status$"))
            {
                this.Status = new MalwareScanInSnapshotStatus();
            }
        }


    #endregion

    } // class MalwareScanInSnapshotResult
    #endregion

    public static class ListMalwareScanInSnapshotResultExtensions
    {
        // This SDK uses the convention of defining fragments by
        // _un-null-ing_ fields in an object of the type of the fragment
        // we want to create. When creating a fragment from an object,
        // all fields (including nested objects) that are not null are
        // included in the fragment. When creating a fragment from a list,
        // there is possibly a different fragment with each item in the list,
        // but the GraphQL syntax for list fragment is identical to
        // object fragment, so we have to decide how to generate the fragment.
        // We choose to generate a fragment that includes all fields that are
        // not null in the *first* item in the list. This is not a perfect
        // solution, but it is a reasonable one.
        public static string AsFragment(
            this List<MalwareScanInSnapshotResult> list,
            int indent=0)
        {
            return list[0].AsFragment();
        }

        public static void ApplyExploratoryFragment(
            this List<MalwareScanInSnapshotResult> list, 
            String parent = "")
        {
            var item = new MalwareScanInSnapshotResult();
            list.Add(item);
            item.ApplyExploratoryFragment(parent);
        }
    }


} // namespace Rubrik.SecurityCloud.Types