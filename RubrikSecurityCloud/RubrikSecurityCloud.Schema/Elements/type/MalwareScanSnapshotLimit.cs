// MalwareScanSnapshotLimit.cs
//
// This generated file is part of the Rubrik PowerShell SDK.
// Manual changes to this file may be lost.

#nullable enable
using System;
using System.Collections.Generic;
using System.Text;
using System.ComponentModel.DataAnnotations;
using Newtonsoft.Json;
using System.Reflection;
using System.Text.RegularExpressions;
using RubrikSecurityCloud.Schema.Utils;

namespace Rubrik.SecurityCloud.Types
{
    #region MalwareScanSnapshotLimit
    public class MalwareScanSnapshotLimit: BaseType
    {
        #region members

        //      C# -> DateTime? EndTime
        // GraphQL -> endTime: DateTime (scalar)
        [JsonProperty("endTime")]
        public DateTime? EndTime { get; set; }

        //      C# -> System.Int32? MaxSnapshotsPerObject
        // GraphQL -> maxSnapshotsPerObject: Int (scalar)
        [JsonProperty("maxSnapshotsPerObject")]
        public System.Int32? MaxSnapshotsPerObject { get; set; }

        //      C# -> DateTime? StartTime
        // GraphQL -> startTime: DateTime (scalar)
        [JsonProperty("startTime")]
        public DateTime? StartTime { get; set; }

        //      C# -> List<ObjectIdToSnapshotIds>? SnapshotsToScanPerObject
        // GraphQL -> snapshotsToScanPerObject: [ObjectIdToSnapshotIds!]! (type)
        [JsonProperty("snapshotsToScanPerObject")]
        public List<ObjectIdToSnapshotIds>? SnapshotsToScanPerObject { get; set; }


        #endregion

    #region methods

    public MalwareScanSnapshotLimit Set(
        DateTime? EndTime = null,
        System.Int32? MaxSnapshotsPerObject = null,
        DateTime? StartTime = null,
        List<ObjectIdToSnapshotIds>? SnapshotsToScanPerObject = null
    ) 
    {
        if ( EndTime != null ) {
            this.EndTime = EndTime;
        }
        if ( MaxSnapshotsPerObject != null ) {
            this.MaxSnapshotsPerObject = MaxSnapshotsPerObject;
        }
        if ( StartTime != null ) {
            this.StartTime = StartTime;
        }
        if ( SnapshotsToScanPerObject != null ) {
            this.SnapshotsToScanPerObject = SnapshotsToScanPerObject;
        }
        return this;
    }

        //[JsonIgnore]
    // AsFieldSpec returns a string that denotes what
    // fields are not null, recursively for non-scalar fields.
    public override string AsFieldSpec(int indent=0)
    {
        string ind = new string(' ', indent*2);
        string s = "";
        //      C# -> DateTime? EndTime
        // GraphQL -> endTime: DateTime (scalar)
        if (this.EndTime != null) {
            s += ind + "endTime\n" ;
        }
        //      C# -> System.Int32? MaxSnapshotsPerObject
        // GraphQL -> maxSnapshotsPerObject: Int (scalar)
        if (this.MaxSnapshotsPerObject != null) {
            s += ind + "maxSnapshotsPerObject\n" ;
        }
        //      C# -> DateTime? StartTime
        // GraphQL -> startTime: DateTime (scalar)
        if (this.StartTime != null) {
            s += ind + "startTime\n" ;
        }
        //      C# -> List<ObjectIdToSnapshotIds>? SnapshotsToScanPerObject
        // GraphQL -> snapshotsToScanPerObject: [ObjectIdToSnapshotIds!]! (type)
        if (this.SnapshotsToScanPerObject != null) {
            var fspec = this.SnapshotsToScanPerObject.AsFieldSpec(indent+1);
            if(fspec.Replace(" ", "").Replace("\n", "").Length > 0) {
                s += ind + "snapshotsToScanPerObject {\n" + fspec + ind + "}\n" ;
            }
        }
        return s;
    }


    
    //[JsonIgnore]
    public override void ApplyExploratoryFieldSpec(String parent = "")
    {
        //      C# -> DateTime? EndTime
        // GraphQL -> endTime: DateTime (scalar)
        if (this.EndTime == null && Exploration.Includes(parent + ".endTime", true))
        {
            this.EndTime = new DateTime();
        }
        //      C# -> System.Int32? MaxSnapshotsPerObject
        // GraphQL -> maxSnapshotsPerObject: Int (scalar)
        if (this.MaxSnapshotsPerObject == null && Exploration.Includes(parent + ".maxSnapshotsPerObject", true))
        {
            this.MaxSnapshotsPerObject = Int32.MinValue;
        }
        //      C# -> DateTime? StartTime
        // GraphQL -> startTime: DateTime (scalar)
        if (this.StartTime == null && Exploration.Includes(parent + ".startTime", true))
        {
            this.StartTime = new DateTime();
        }
        //      C# -> List<ObjectIdToSnapshotIds>? SnapshotsToScanPerObject
        // GraphQL -> snapshotsToScanPerObject: [ObjectIdToSnapshotIds!]! (type)
        if (this.SnapshotsToScanPerObject == null && Exploration.Includes(parent + ".snapshotsToScanPerObject"))
        {
            this.SnapshotsToScanPerObject = new List<ObjectIdToSnapshotIds>();
            this.SnapshotsToScanPerObject.ApplyExploratoryFieldSpec(parent + ".snapshotsToScanPerObject");
        }
    }


    #endregion

    } // class MalwareScanSnapshotLimit
    
    #endregion

    public static class ListMalwareScanSnapshotLimitExtensions
    {
        // This SDK uses the convention of defining field specs as
        // the collection of fields that are not null in an object.
        // When creating a field spec from an (non-list) object,
        // all fields (including nested objects) that are not null are
        // included in the fieldspec.
        // When creating a fieldspec from a list of objects,
        // we arbitrarily choose to use the fieldspec of the first item
        // in the list. This is not a perfect solution, but it is a
        // reasonable one.
        // When creating a fieldspec from a list of interfaces,
        // we include the fieldspec of each item in the list
        // as an inline fragment (... on)
        public static string AsFieldSpec(
            this List<MalwareScanSnapshotLimit> list,
            int indent=0)
        {
            return list[0].AsFieldSpec(indent);
        }

        public static void ApplyExploratoryFieldSpec(
            this List<MalwareScanSnapshotLimit> list, 
            String parent = "")
        {
            if ( list.Count == 0 ) {
                list.Add(new MalwareScanSnapshotLimit());
            }
            list[0].ApplyExploratoryFieldSpec(parent);
        }
    }


} // namespace Rubrik.SecurityCloud.Types