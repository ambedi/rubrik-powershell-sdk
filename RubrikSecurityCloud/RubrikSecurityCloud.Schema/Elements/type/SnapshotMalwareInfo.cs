// SnapshotMalwareInfo.cs
//
// This generated file is part of the Rubrik PowerShell SDK.
// Manual changes to this file may be lost.

#nullable enable
using System;
using System.Collections.Generic;
using System.Text;
using System.ComponentModel.DataAnnotations;
using Newtonsoft.Json;
using System.Reflection;
using System.Text.RegularExpressions;
using RubrikSecurityCloud;

namespace RubrikSecurityCloud.Types
{
    #region SnapshotMalwareInfo
    public class SnapshotMalwareInfo: BaseType
    {
        #region members

        //      C# -> AnomalyConfidenceEnum? AnomalyConfidence
        // GraphQL -> anomalyConfidence: AnomalyConfidenceEnum! (enum)
        [JsonProperty("anomalyConfidence")]
        public AnomalyConfidenceEnum? AnomalyConfidence { get; set; }

        //      C# -> DateTime? Date
        // GraphQL -> date: DateTime (scalar)
        [JsonProperty("date")]
        public DateTime? Date { get; set; }

        //      C# -> System.String? ErrInfo
        // GraphQL -> errInfo: String! (scalar)
        [JsonProperty("errInfo")]
        public System.String? ErrInfo { get; set; }

        //      C# -> System.String? HuntId
        // GraphQL -> huntId: String! (scalar)
        [JsonProperty("huntId")]
        public System.String? HuntId { get; set; }

        //      C# -> System.String? HuntName
        // GraphQL -> huntName: String! (scalar)
        [JsonProperty("huntName")]
        public System.String? HuntName { get; set; }

        //      C# -> System.Boolean? IsAnomaly
        // GraphQL -> isAnomaly: Boolean! (scalar)
        [JsonProperty("isAnomaly")]
        public System.Boolean? IsAnomaly { get; set; }

        //      C# -> System.Boolean? IsMalwareHunt
        // GraphQL -> isMalwareHunt: Boolean! (scalar)
        [JsonProperty("isMalwareHunt")]
        public System.Boolean? IsMalwareHunt { get; set; }

        //      C# -> System.Boolean? IsQuarantined
        // GraphQL -> isQuarantined: Boolean! (scalar)
        [JsonProperty("isQuarantined")]
        public System.Boolean? IsQuarantined { get; set; }

        //      C# -> System.String? MalwareHuntInfo
        // GraphQL -> malwareHuntInfo: String! (scalar)
        [JsonProperty("malwareHuntInfo")]
        public System.String? MalwareHuntInfo { get; set; }

        //      C# -> System.String? SnapshotId
        // GraphQL -> snapshotId: String! (scalar)
        [JsonProperty("snapshotId")]
        public System.String? SnapshotId { get; set; }

        //      C# -> System.Int64? SuspiciousFileCount
        // GraphQL -> suspiciousFileCount: Long! (scalar)
        [JsonProperty("suspiciousFileCount")]
        public System.Int64? SuspiciousFileCount { get; set; }

        //      C# -> System.String? WorkloadFid
        // GraphQL -> workloadFid: String! (scalar)
        [JsonProperty("workloadFid")]
        public System.String? WorkloadFid { get; set; }


        #endregion

    #region methods

    public override string GetGqlTypeName() {
        return "SnapshotMalwareInfo";
    }

    public SnapshotMalwareInfo Set(
        AnomalyConfidenceEnum? AnomalyConfidence = null,
        DateTime? Date = null,
        System.String? ErrInfo = null,
        System.String? HuntId = null,
        System.String? HuntName = null,
        System.Boolean? IsAnomaly = null,
        System.Boolean? IsMalwareHunt = null,
        System.Boolean? IsQuarantined = null,
        System.String? MalwareHuntInfo = null,
        System.String? SnapshotId = null,
        System.Int64? SuspiciousFileCount = null,
        System.String? WorkloadFid = null
    ) 
    {
        if ( AnomalyConfidence != null ) {
            this.AnomalyConfidence = AnomalyConfidence;
        }
        if ( Date != null ) {
            this.Date = Date;
        }
        if ( ErrInfo != null ) {
            this.ErrInfo = ErrInfo;
        }
        if ( HuntId != null ) {
            this.HuntId = HuntId;
        }
        if ( HuntName != null ) {
            this.HuntName = HuntName;
        }
        if ( IsAnomaly != null ) {
            this.IsAnomaly = IsAnomaly;
        }
        if ( IsMalwareHunt != null ) {
            this.IsMalwareHunt = IsMalwareHunt;
        }
        if ( IsQuarantined != null ) {
            this.IsQuarantined = IsQuarantined;
        }
        if ( MalwareHuntInfo != null ) {
            this.MalwareHuntInfo = MalwareHuntInfo;
        }
        if ( SnapshotId != null ) {
            this.SnapshotId = SnapshotId;
        }
        if ( SuspiciousFileCount != null ) {
            this.SuspiciousFileCount = SuspiciousFileCount;
        }
        if ( WorkloadFid != null ) {
            this.WorkloadFid = WorkloadFid;
        }
        return this;
    }

        //[JsonIgnore]
    // AsFieldSpec returns a string that denotes what
    // fields are not null, recursively for non-scalar fields.
    public override string AsFieldSpec(FieldSpecConfig? conf=null)
    {
        conf=(conf==null)?new FieldSpecConfig():conf;
        if (this.IsComposite() && ! conf.IgnoreComposition) {
            return InterfaceHelper.CompositeAsFieldSpec((BaseType)this, conf);
        }
        string ind = conf.IndentStr();
        string s = "";
        //      C# -> AnomalyConfidenceEnum? AnomalyConfidence
        // GraphQL -> anomalyConfidence: AnomalyConfidenceEnum! (enum)
        if (this.AnomalyConfidence != null) {
            if (conf.Flat) {
                s += conf.Prefix + "anomalyConfidence\n" ;
            } else {
                s += ind + "anomalyConfidence\n" ;
            }
        }
        //      C# -> DateTime? Date
        // GraphQL -> date: DateTime (scalar)
        if (this.Date != null) {
            if (conf.Flat) {
                s += conf.Prefix + "date\n" ;
            } else {
                s += ind + "date\n" ;
            }
        }
        //      C# -> System.String? ErrInfo
        // GraphQL -> errInfo: String! (scalar)
        if (this.ErrInfo != null) {
            if (conf.Flat) {
                s += conf.Prefix + "errInfo\n" ;
            } else {
                s += ind + "errInfo\n" ;
            }
        }
        //      C# -> System.String? HuntId
        // GraphQL -> huntId: String! (scalar)
        if (this.HuntId != null) {
            if (conf.Flat) {
                s += conf.Prefix + "huntId\n" ;
            } else {
                s += ind + "huntId\n" ;
            }
        }
        //      C# -> System.String? HuntName
        // GraphQL -> huntName: String! (scalar)
        if (this.HuntName != null) {
            if (conf.Flat) {
                s += conf.Prefix + "huntName\n" ;
            } else {
                s += ind + "huntName\n" ;
            }
        }
        //      C# -> System.Boolean? IsAnomaly
        // GraphQL -> isAnomaly: Boolean! (scalar)
        if (this.IsAnomaly != null) {
            if (conf.Flat) {
                s += conf.Prefix + "isAnomaly\n" ;
            } else {
                s += ind + "isAnomaly\n" ;
            }
        }
        //      C# -> System.Boolean? IsMalwareHunt
        // GraphQL -> isMalwareHunt: Boolean! (scalar)
        if (this.IsMalwareHunt != null) {
            if (conf.Flat) {
                s += conf.Prefix + "isMalwareHunt\n" ;
            } else {
                s += ind + "isMalwareHunt\n" ;
            }
        }
        //      C# -> System.Boolean? IsQuarantined
        // GraphQL -> isQuarantined: Boolean! (scalar)
        if (this.IsQuarantined != null) {
            if (conf.Flat) {
                s += conf.Prefix + "isQuarantined\n" ;
            } else {
                s += ind + "isQuarantined\n" ;
            }
        }
        //      C# -> System.String? MalwareHuntInfo
        // GraphQL -> malwareHuntInfo: String! (scalar)
        if (this.MalwareHuntInfo != null) {
            if (conf.Flat) {
                s += conf.Prefix + "malwareHuntInfo\n" ;
            } else {
                s += ind + "malwareHuntInfo\n" ;
            }
        }
        //      C# -> System.String? SnapshotId
        // GraphQL -> snapshotId: String! (scalar)
        if (this.SnapshotId != null) {
            if (conf.Flat) {
                s += conf.Prefix + "snapshotId\n" ;
            } else {
                s += ind + "snapshotId\n" ;
            }
        }
        //      C# -> System.Int64? SuspiciousFileCount
        // GraphQL -> suspiciousFileCount: Long! (scalar)
        if (this.SuspiciousFileCount != null) {
            if (conf.Flat) {
                s += conf.Prefix + "suspiciousFileCount\n" ;
            } else {
                s += ind + "suspiciousFileCount\n" ;
            }
        }
        //      C# -> System.String? WorkloadFid
        // GraphQL -> workloadFid: String! (scalar)
        if (this.WorkloadFid != null) {
            if (conf.Flat) {
                s += conf.Prefix + "workloadFid\n" ;
            } else {
                s += ind + "workloadFid\n" ;
            }
        }
        return s;
    }


    
    public override void ApplyExploratoryFieldSpec(ExplorationContext ec)
    {
        //      C# -> AnomalyConfidenceEnum? AnomalyConfidence
        // GraphQL -> anomalyConfidence: AnomalyConfidenceEnum! (enum)
        if (ec.Includes("anomalyConfidence",true))
        {
            if(this.AnomalyConfidence == null) {

                this.AnomalyConfidence = new AnomalyConfidenceEnum();

            } else {


            }
        }
        else if (this.AnomalyConfidence != null && ec.Excludes("anomalyConfidence",true))
        {
            this.AnomalyConfidence = null;
        }
        //      C# -> DateTime? Date
        // GraphQL -> date: DateTime (scalar)
        if (ec.Includes("date",true))
        {
            if(this.Date == null) {

                this.Date = new DateTime();

            } else {


            }
        }
        else if (this.Date != null && ec.Excludes("date",true))
        {
            this.Date = null;
        }
        //      C# -> System.String? ErrInfo
        // GraphQL -> errInfo: String! (scalar)
        if (ec.Includes("errInfo",true))
        {
            if(this.ErrInfo == null) {

                this.ErrInfo = "FETCH";

            } else {


            }
        }
        else if (this.ErrInfo != null && ec.Excludes("errInfo",true))
        {
            this.ErrInfo = null;
        }
        //      C# -> System.String? HuntId
        // GraphQL -> huntId: String! (scalar)
        if (ec.Includes("huntId",true))
        {
            if(this.HuntId == null) {

                this.HuntId = "FETCH";

            } else {


            }
        }
        else if (this.HuntId != null && ec.Excludes("huntId",true))
        {
            this.HuntId = null;
        }
        //      C# -> System.String? HuntName
        // GraphQL -> huntName: String! (scalar)
        if (ec.Includes("huntName",true))
        {
            if(this.HuntName == null) {

                this.HuntName = "FETCH";

            } else {


            }
        }
        else if (this.HuntName != null && ec.Excludes("huntName",true))
        {
            this.HuntName = null;
        }
        //      C# -> System.Boolean? IsAnomaly
        // GraphQL -> isAnomaly: Boolean! (scalar)
        if (ec.Includes("isAnomaly",true))
        {
            if(this.IsAnomaly == null) {

                this.IsAnomaly = true;

            } else {


            }
        }
        else if (this.IsAnomaly != null && ec.Excludes("isAnomaly",true))
        {
            this.IsAnomaly = null;
        }
        //      C# -> System.Boolean? IsMalwareHunt
        // GraphQL -> isMalwareHunt: Boolean! (scalar)
        if (ec.Includes("isMalwareHunt",true))
        {
            if(this.IsMalwareHunt == null) {

                this.IsMalwareHunt = true;

            } else {


            }
        }
        else if (this.IsMalwareHunt != null && ec.Excludes("isMalwareHunt",true))
        {
            this.IsMalwareHunt = null;
        }
        //      C# -> System.Boolean? IsQuarantined
        // GraphQL -> isQuarantined: Boolean! (scalar)
        if (ec.Includes("isQuarantined",true))
        {
            if(this.IsQuarantined == null) {

                this.IsQuarantined = true;

            } else {


            }
        }
        else if (this.IsQuarantined != null && ec.Excludes("isQuarantined",true))
        {
            this.IsQuarantined = null;
        }
        //      C# -> System.String? MalwareHuntInfo
        // GraphQL -> malwareHuntInfo: String! (scalar)
        if (ec.Includes("malwareHuntInfo",true))
        {
            if(this.MalwareHuntInfo == null) {

                this.MalwareHuntInfo = "FETCH";

            } else {


            }
        }
        else if (this.MalwareHuntInfo != null && ec.Excludes("malwareHuntInfo",true))
        {
            this.MalwareHuntInfo = null;
        }
        //      C# -> System.String? SnapshotId
        // GraphQL -> snapshotId: String! (scalar)
        if (ec.Includes("snapshotId",true))
        {
            if(this.SnapshotId == null) {

                this.SnapshotId = "FETCH";

            } else {


            }
        }
        else if (this.SnapshotId != null && ec.Excludes("snapshotId",true))
        {
            this.SnapshotId = null;
        }
        //      C# -> System.Int64? SuspiciousFileCount
        // GraphQL -> suspiciousFileCount: Long! (scalar)
        if (ec.Includes("suspiciousFileCount",true))
        {
            if(this.SuspiciousFileCount == null) {

                this.SuspiciousFileCount = new System.Int64();

            } else {


            }
        }
        else if (this.SuspiciousFileCount != null && ec.Excludes("suspiciousFileCount",true))
        {
            this.SuspiciousFileCount = null;
        }
        //      C# -> System.String? WorkloadFid
        // GraphQL -> workloadFid: String! (scalar)
        if (ec.Includes("workloadFid",true))
        {
            if(this.WorkloadFid == null) {

                this.WorkloadFid = "FETCH";

            } else {


            }
        }
        else if (this.WorkloadFid != null && ec.Excludes("workloadFid",true))
        {
            this.WorkloadFid = null;
        }
    }


    #endregion

    } // class SnapshotMalwareInfo
    
    #endregion

    public static class ListSnapshotMalwareInfoExtensions
    {
        // This SDK uses the convention of defining field specs as
        // the collection of properties that are not null in an object.
        // When creating a field spec for an object, we look at whether
        // the object is a list or not, and whether it implements an interface
        // or not. The following are the possible combinations:
        // S or L: single object or list object
        // SD or II: self-defined or interface-implementing
        // | S/L | SD/II | How fied spec is created
        // |-----|-------|-------------------------
        // | S   | SD    | all properties (including nested objects) that are not null are included in the field spec.
        // | L   | SD    | the field spec of the first item in the list is used. Other items are ignored.
        // | S   | II    | same as S-SD if object is not composite. If object is composite, the field spec of each item in the composition is included as an inline fragment (... on)
        // | L   | II    | the field spec of each item in the list is included as an inline fragment (... on)
        //
        // Note that L-II means that each item in the list is II (not the list itself).
        // This function handles L-SD and L-II cases.
        public static string AsFieldSpec(
            this List<SnapshotMalwareInfo> list,
            FieldSpecConfig? conf=null)
        {
            conf=(conf==null)?new FieldSpecConfig():conf;
            return list[0].AsFieldSpec(conf.Child(ignoreComposition: true)); // L-SD
        }

        public static List<string> SelectedFields(this List<SnapshotMalwareInfo> list)
        {
            return StringUtils.FieldSpecStringToList(
                list.AsFieldSpec(new FieldSpecConfig { Flat = true }));
        }



        public static void ApplyExploratoryFieldSpec(
            this List<SnapshotMalwareInfo> list, 
            ExplorationContext ec)
        {
            if ( list.Count == 0 ) {
                list.Add(new SnapshotMalwareInfo());
            }
            list[0].ApplyExploratoryFieldSpec(ec);
        }

        public static void SelectForRetrieval(this List<SnapshotMalwareInfo> list)
        {
            list.ApplyExploratoryFieldSpec(new ExplorationContext());
        }
    }


} // namespace RubrikSecurityCloud.Types