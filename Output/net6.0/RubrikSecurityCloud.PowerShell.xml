<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RubrikSecurityCloud.PowerShell</name>
    </assembly>
    <members>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.Connect_Rsc">
             <summary>
             Establishes a user session with Rubrik Security Cloud
             </summary>
             <description>
             The Connect-Rsc Cmdlet is used to connect to the Rubrik Security Cloud (RSC) API.
             RSC then returns a unique token to represent the user's credentials for subsequent calls.
             The token is stored securly in a .NET object within this PowerShell session.
             The recommended authentication method is a Rsc Service Account.
             Service Account credentials may be provided as parameters, or stored
             in an encrypted credential file, using Set-RscServiceAccountFile.
             Service Account .json files (unencryped) are not supported.
             </description>
             <example>
             Connect to Rubrik Security Cloud, using the URL, Client Id and Client Secret
             <code>Connect-Rsc -Server mycompany.my.rubrik.com -ClientId xxxxxxxxx -ClientSecret xxxxxxxxx</code>
             </example>
             <example>
             Connect to Rubrik Security Cloud, using a service account file,
             stored in the default RSC credential store in the user profile
             The service account file can be downloaded from the Rsc Web UI.
             <code>
             Set-RscServiceAccountFile -InputFilePath rubrik_service_account.json
             Connect-Rsc
             </code>
             </example>
             <example>
             Connect to Rubrik Security Cloud, using a service account file,
             stored in a location other than the default RSC credential store.
             The service account file can be downloaded from the Rsc Web UI.
             <code>
             Set-RscServiceAccountFile -InputFilePath rubrik_service_account.json -OutputFilePath rubrik_service_account.xml
             Connect-Rsc -ServiceAccountFile rubrik_service_account.xml
             </code>
             </example>
             <example>
             Connect to Rubrik Security Cloud, using a service account file,
             stored in a location held in the OS environment variable RSC_SERVICE_ACCOUNT_FILE
             The service account file can be downloaded from the Rsc Web UI.
             <code>
             Set-RscServiceAccountFile -InputFilePath rubrik_service_account.json -OutputFilePath $ENV:RSC_SERVICE_ACCOUNT_FILE
             Connect-Rsc -FromEnv
             </code>
             </example>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Connect_Rsc.IfNeeded">
            <summary>
            Connect if there is no existing connection
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Connect_Rsc.FromEnv">
            <summary>
            Use a service account, which path is stored in an environment variable
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Connect_Rsc.ServiceAccountFile">
            <summary>
            Used to specify the service account file downloaded from Rubrik Security Cloud
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Connect_Rsc.Server">
            <summary>
            FQDN or the Rubrik Security Cloud Instance. I.e. mycompany.my.rubrik.com
            This can also be found in the JSON file downloaded from RSC when creating the Service Account
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Connect_Rsc.ClientId">
            <summary>
            The Service Account ClientId.
            This can be found as "client_id" in the JSON file downloaded from RSC when creating the Service Account
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Connect_Rsc.ClientSecret">
            <summary>
            The Service Account ClientSecret in SecureString format.
            The ClientSecret can be found as "client_secret" in the JSON file downloaded from RSC when creating the Service Account
            Convert the JSON plain text field into a secure string with:
            $secret = $(Get-Content service_account_file.json | ConvertFrom-Json).client_secret | ConvertTo-SecureString -AsPlainText
            </summary>
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscCmdlet">
            <summary>
            Return info about SDK cmdlets
            </summary>
            <description>
            Look up a GraphQL Operation and
            return info about the cmdlet that implements it.
            </description>
            <example>
            Retrieve the name of the cmdlet that implements the
            GraphQL query clusterConnection
            <code>
            PS> Get-RscCmdlet clusterConnection
            </code>
            </example>
            <example>
            Retrieve info for a GraphQL operation that is
            not implemented by a cmdlet.
            <code>
            PS> Get-RscCmdlet notImplementedOperation
            </code>
            </example>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscCmdlet.ExistingGqlRootFieldName">
            <summary>
            The name of the GraphQL Operation to look up.
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscCmdlet.AnyGqlRootFieldName">
            <summary>
            The name of the GraphQL Operation to look up.
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscCmdlet.Locations">
            <summary>
            Info about the various locations the SDK uses
            </summary>
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFileset">
            <summary>
            Retrieve one or more filsets managed by
            Rubrik Security Cloud (Rsc).
            </summary>
            <description>
            The Get-RscFileset cmdlet is used to get one or more filesets
            known to RSC. The -FilesetId parameter will return a single fileset.
            All other parameters will return a list of matching filesets.
            When -FilesetId is NOT specified, -HostId is required.
            -HostId can accept a value from the pipeline
            </description>
            <example>
            Get a list of all filesets on a specified host
            <code> Get-RscFileset -HostId xxxxx-xxxxx-xxxxx-xxxxx </code>
            </example>
            <example>
            Get a list of all filesets on a specified host, filtered by name
            <code> Get-RscFileset -HostId xxxxx-xxxxx-xxxxx-xxxxx -Name etc </code>
            </example>
            <example>
            Get a list of all filesets on a host, providing the host via the pipeline
            <code> Get-RscHost -OsType Linux -First 1 | Get-RscFileset </code>
            </example>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFileset.HostId">
            <summary>
            The Id of the Physical Host to get filesets for
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFileset.Name">
            <summary>
            Filter results by name
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFileset.First">
            <summary>
            Return only the fist # of results
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFileset.SortBy">
            <summary>
            Sort by field name
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFileset.SortOrder">
            <summary>
            Sort Order
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFileset.FilesetId">
            <summary>
            Get a fileset using its ID
            </summary>
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFilesetTemplate">
            <summary>
            Retrieve one or more filset templates managed by
            Rubrik Security Cloud (Rsc).
            </summary>
            <description>
            The Get-RscFileset cmdlet is used to get one or more fileset templates
            known to RSC. The -Id parameter will return a template. All other
            parameters will return a list of matching templates.
            Returns Windows and Linux fileset templates.
            </description>
            <example>
            Get a list of all Linux fileset templates.
            <code>Get-RscFilesetTemplate -OsType Linux </code>
            </example>
            <example>
            Get a list of Windows fileset templates, matching a name pattern.
            <code>Get-RscFilesetTemplate -OsType Windows -Name myWinTemplate</code>
            </example>
            <example>
            Get a template by Id, with default fields selected.
            <code>Get-RscFilesetTemplate -Id 76254be7-baa4-5145-a4b7-a7a7773ad97d</code>
            </example>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFilesetTemplate.OsType">
            <summary>
            Operating system type of fileset templates to return.
            Valid values are: "Windows" and "Linux".
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFilesetTemplate.Name">
            <summary>
            Filter results by name
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFilesetTemplate.First">
            <summary>
            Return only the fist # of results
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFilesetTemplate.SortBy">
            <summary>
            Sort by field name
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFilesetTemplate.SortOrder">
            <summary>
            Sort Order
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFilesetTemplate.Id">
            <summary>
            Get a physical host using its ID
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFilesetTemplate.Field">
            <summary>
            Activate selected fields based on not-null properties
            of the input fields object
            </summary>
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscHost">
            <summary>
            Retrieve one or more physical hosts managed by
            Rubrik Security Cloud (Rsc).
            </summary>
            <description>
            The Get-RscHost cmdlet is used to get one or more physical hosts
            known to RSC. The -Id parameter will return a single host. All other
            parameters will return a list of matching hosts.
            </description>
            <example>
            Get a list of all Linux from the RSC instance.
            <code>Get-RscHost -OsType Linux </code>
            </example>
            <example>
            Get a list of Windows Hosts, matching a name pattern.
            <code>Get-RscHost -OsType Windows -Name myWindowsServer</code>
            </example>
            <example>
            Get a host by Id, with default fields selected.
            <code>Get-RscHost -Id 76254be7-baa4-5145-a4b7-a7a7773ad97d</code>
            </example>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscHost.OsType">
            <summary>
            Operating system type of hosts to return. Valid values are
            "Windows" and "Linux".
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscHost.Name">
            <summary>
            Filter results by name
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscHost.First">
            <summary>
            Return only the fist # of results
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscHost.Relics">
            <summary>
            Include only items that are relics
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscHost.Replicated">
            <summary>
            Include only items that are replicated
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscHost.SortBy">
            <summary>
            Sort by field name
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscHost.SortOrder">
            <summary>
            Sort Order
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscHost.IsBulkPolicyAssignmentFlow">
            <summary>
            Indicates whether request is bulk policy assignment flow.
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscHost.Id">
            <summary>
            Get a physical host using its ID
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscHost.Field">
            <summary>
            Activate selected fields based on not-null properties
            of the input fields object
            </summary>
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscMssqlDatabase">
            <summary>
            Retrieve one or more Mssql Databases managed by
            Rubrik Security Cloud (Rsc).
            </summary>
            <description>
            The Get-RscMssqlDatabase cmdlet is used to get one or more Mssql DBs
            known to RSC. The -Id parameter will return a single DB. All other
            parameters will return a list of matching DBs.
            </description>
            <example>
            Get a list of all Mssql DBs from the RSC instance.
            <code>Get-RscMssqlDatabase</code>
            </example>
            <example>
            Get a list of Mssql DBs, matching a name pattern.
            <code>Get-RscMssqlDatabase -Name devVM</code>
            </example>
            <example>
            Get a Mssql DB by Id, with default fields selected.
            <code>Get-RscMssqlDatabase -Id 76254be7-baa4-5145-a4b7-a7a7773ad97d</code>
            </example>
            <example>
            Get a Mssql DB by Id, with custom fields selected (Id, Name)
            <code>
            $myFields = Get-RscType -Name MssqlDatabase -InitialFields @("Id","Name")
            Get-RscMssqlDatabase -Id 76254be7-baa4-5145-a4b7-a7a7773ad97d -Fields $myFields
            </code>
            </example>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscMssqlDatabase.Name">
            <summary>
            Filter Mssql Databases by name
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscMssqlDatabase.Id">
            <summary>
            Retrieve a single Mssql Database by Id
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscMssqlDatabase.Fields">
            <summary>
            An object to use as a field selector for the query.
            Values from the API for fields set to not-null values in this object
            will be returned.
            </summary>
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscSnapshot">
            <summary>
            Retrieves all of the snapshots (backups) for any given object
            </summary>
            <description>
            The Get-RscSnapshot cmdlet is used to query the RSC instance for all
            known snapshots (backups) for a protected object.
            Multiple objects to be piped into this function is not yet supported
            </description>
            <example>
            Get the snapshot list for an object by the object Id
            <code>Get-RscSnapshot -Id 'xxxxxx-xxxxx-xxxxxx-xxxxx'</code>
            </example>
            <example>
            Get the snapshots for vSphere VM from pipeline
            <code>
            $vm = Get-RscVsphereVm -Id xxxxxx-xxxxxx-xxxxxx-xxxxxx
            $vm | Get-RscSnapshot
            </code>
            </example>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscSnapshot.SnappableId">
            <summary>
            The ID of the snappable object to get a list of snapshots for.
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscSnapshot.First">
            <summary>
            Return only the first # of results
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscSnapshot.SnapshotId">
            <summary>
            Retreive a single CDM snapshot by ID. PolarisSnapshot is not yet supported.
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscSnapshot.ClusterUUID">
            <summary>
            Ensure that the snapshot returned belongs to a specific CDM Cluster.
            </summary>
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscType">
            <summary>
            Return a valid empty .NET object for the
            RubrikSecurityCloud.PowerShell SDK
            </summary>
            <description>
            Return a valid empty .NET object for the
            RubrikSecurityCloud.PowerShell SDK.
            
            The cmdlet will return a .NET object by name.
            The -ListAvailable parameter will return a list of
            valid RubrikSecurityCloud.Types.
            </description>
            <example>
            Get a list of all available Rsc .NET types
            <code>
            PS C:\> Get-RscType -ListAvailable
            </code>
            </example>
            <example>
            Get a list of available Rsc .NET types filtered by name
            <code>
            PS C:\> Get-RscType -ListAvailable -FilterByName "accountsetting"
            </code>
            </example>
            <example>
            Get an empty object that is compliant with the Rsc Type
            specified by name
            <code>
            PS C:\> Get-RscType -Name "AccountSetting"
            </code>
            </example>
            <example>
            Get an empty object that is compliant with the Rsc Type
            specified by name. Initialize the 'IsEulaAccepted' property
            <code>
            PS C:\> Get-RscType -Name "AccountSetting" -InitialProperties @("IsEulaAccepted")
            </code>
            </example>
            <example>
            Get an empty object that is compliant with the Rsc Type
            specified by name. Initialize the 'IsEulaAccepted' property
            with a specific value.
            <code>
            PS C:\> Get-RscType -Name "AccountSetting" -InitialValues @{"IsEulaAccepted"= $false}
            </code>
            </example>
            <example>
            Get a list of all available Rsc .NET Interfaces
            <code>
            PS C:\> Get-RscType -ListAvailable -Interfaces
            </code>
            </example>
            <example>
            Get a list of all available Rsc .NET Interfaces filtered by name
            <code>
            PS C:\> Get-RscType -ListAvailable -Interfaces -FilterByName "mssql"
            </code>
            </example>
            <example>
            Get a list of all Rsc .NET types that implement the
            MssqlTopLevelDescendantType interface
            <code>
            PS C:\> Get-RscType -Interface MssqlTopLevelDescendantType
            </code>
            </example>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscType.Name">
            <summary>
            The name of the Rsc Type to return
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscType.InitialProperties">
            <summary>
            Specify an array of string containing the names of the
            properties to initialize.
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscType.InitialValues">
            <summary>
            Specify a hashtable mapping the requested
            fields to their values.
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscType.ListAvailable">
            <summary>
            Used to request a list of valid Rsc Type Names.
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscType.FilterByName">
            <summary>
            Optional to filter results by name.
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscType.Interfaces">
            <summary>
            Flag to specify if interfaces should be returned.
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscType.Interface">
            <summary>
            Used to request a list of types implementing a given interface.
            </summary>
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscVersion">
            <summary>
            Returns the Rubrik Security Cloud Server version, as well a the
            Rubrik Security Cloud PowerShell SDK schema version. Ideally these
            values should match for maximum SDK compatibility. 
            </summary>
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscVsphereVm">
            <summary>
            Retrieve one or more vSphere Virtual Machines (VMs) managed by
            Rubrik Security Cloud (Rsc).
            </summary>
            <description>
            The Get-RscVsphereVm cmdlet is used to get one or more vSphere VMs
            known to RSC. The -Id parameter will return a single VM. All other
            parameters will return a list of matching VMs.
            </description>
            <example>
            Get a list of all vSphere VMs from the RSC instance.
            <code>Get-RscVsphereVm</code>
            </example>
            <example>
            Get a list of vSphere VMs, matching a name pattern.
            <code>Get-RscVsphereVm -Name devVM</code>
            </example>
            <example>
            Get a vSphere VM by Id, with default fields selected.
            <code>Get-RscVsphereVm -Id 76254be7-baa4-5145-a4b7-a7a7773ad97d</code>
            </example>
            <example>
            Get a vSphere VM by Id, with custom fields selected (Id, Name, and
            GuestOsType).
            <code>
            $myFields = Get-RscType -Name VSphereVm
            $myFields.Id = "FETCH"
            $myFields.Name = "FETCH"
            $myFields.GuestOsType = "FETCH"
            Get-RscVsphereVm -Id 76254be7-baa4-5145-a4b7-a7a7773ad97d -Fields $myFields
            </code>
            </example>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscVsphereVm.Name">
            <summary>
            Filter VMs by Name
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscVsphereVm.Id">
            <summary>
            Retrieve a single known VM by Id
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscVsphereVm.Fields">
            <summary>
            An object to use as a field selector for the query.
            Values from the API for fields set to not-null values in this object
            will be returned. To be used only with -Id parameter.
            </summary>
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.Invoke_Rsc">
            <summary>
            Send a query to the RSC API.
            </summary>
            <description>
            There are 2 usages of this cmdlet:
            - Send a query obtained from a `New-RscQuery*` cmdlet.
            - Send a raw GraphQL query.
            </description>
            <example>
            Send a query obtained from a `New-RscQuery*` cmdlet.
            <code>
            New-RscQueryGetVsphereVmList -Name "my-vm" | Invoke-Rsc
            </code>
            </example>
            <example>
            Read GraphQL query from gql file
            <code>
            Get-Content -Path ./Samples/queryAccountOwners -Raw | Invoke-Rsc
            </code>
            </example>
            <example>
            Pass GraphQL query as parameter.
            <code>
            Invoke-Rsc -GqlQuery "mutation DeleteWebhookMutation(`$id: Int!) { deleteWebhook(input: {id: `$id}) }" -Var @{id = 1}
            </code>
            </example>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Invoke_Rsc.GqlQuery">
            <summary>
            The GQL query to send to the RSC API.
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Invoke_Rsc.Var">
            <summary>
            The variables to supply to the GraphQL query.
            </summary>
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationActivitySeries">
             <summary>
             Create a new RscQuery object for any of the 1
             operations in the 'Activity series' API domain:
             ['Cancel'].
             </summary>
             <description>
             New-RscMutationActivitySeries creates a new
             mutation object for operations
             in the 'Activity series' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 1 operations
             in the 'Activity series' API domain. Select the operation this
             query is for by specifying the appropriate switch parameter;
             one of: -Cancel.
             Alternatively, you can specify the operation by setting the
             -Op parameter, for example: -Op Cancel,
             which is equivalent to specifying -Cancel.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationActivitySeries -Cancel).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationActivitySeries -Cancel).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the Cancel operation
             of the 'Activity series' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Activity series
             # API Operation: Cancel
             
             $query = New-RscMutationActivitySeries -Cancel
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	activitySeriesId = $someString
             	# REQUIRED
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationAws">
             <summary>
             Create a new RscQuery object for any of the 41
             operations in the 'AWS' API domain:
             AddAuthenticationServerBasedCloudAccount, AddIamUserBasedCloudAccount, BulkDeleteCloudAccountWithoutCft, CreateAccount, CreateAutomaticTargetMapping, CreateCloudNativeStorageSetting, CreateCluster, CreateComputeSetting, CreateExocomputeConfigs, CreateReaderTarget, CreateTarget, DeleteCluster, DeleteComputeSetting, DeleteExocomputeConfigs, ExcludeNativeEbsVolumesFromSnapshot, FinalizeCloudAccountDeletion, FinalizeCloudAccountProtection, PatchAuthenticationServerBasedCloudAccount, PatchIamUserBasedCloudAccount, PrepareCloudAccountDeletion, PrepareFeatureUpdateForCloudAccount, RegisterFeatureArtifacts, StartCreateNativeEbsVolumeSnapshotsJob, StartExocomputeDisableJob, StartExportNativeEbsVolumeSnapshotJob, StartNativeAccountDisableJob, StartNativeEc2InstanceSnapshotsJob, StartNativeRdsInstanceSnapshotsJob, StartRefreshNativeAccountsJob, StartRestoreNativeEc2InstanceSnapshotJob, UpdateAccount, UpdateAutomaticTargetMapping, UpdateCloudAccount, UpdateCloudAccountFeature, UpdateCloudNativeStorageSetting, UpdateComputeSetting, UpdateExocomputeConfigs, UpdateTarget, UpgradeCloudAccountFeaturesWithoutCft, UpgradeIamUserBasedCloudAccountPermissions, or ValidateAndCreateCloudAccount.
             </summary>
             <description>
             New-RscMutationAws creates a new
             mutation object for operations
             in the 'AWS' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 41 operations
             in the 'AWS' API domain. Select the operation this
             query is for by specifying the appropriate switch parameter;
             one of: -AddAuthenticationServerBasedCloudAccount, -AddIamUserBasedCloudAccount, -BulkDeleteCloudAccountWithoutCft, -CreateAccount, -CreateAutomaticTargetMapping, -CreateCloudNativeStorageSetting, -CreateCluster, -CreateComputeSetting, -CreateExocomputeConfigs, -CreateReaderTarget, -CreateTarget, -DeleteCluster, -DeleteComputeSetting, -DeleteExocomputeConfigs, -ExcludeNativeEbsVolumesFromSnapshot, -FinalizeCloudAccountDeletion, -FinalizeCloudAccountProtection, -PatchAuthenticationServerBasedCloudAccount, -PatchIamUserBasedCloudAccount, -PrepareCloudAccountDeletion, -PrepareFeatureUpdateForCloudAccount, -RegisterFeatureArtifacts, -StartCreateNativeEbsVolumeSnapshotsJob, -StartExocomputeDisableJob, -StartExportNativeEbsVolumeSnapshotJob, -StartNativeAccountDisableJob, -StartNativeEc2InstanceSnapshotsJob, -StartNativeRdsInstanceSnapshotsJob, -StartRefreshNativeAccountsJob, -StartRestoreNativeEc2InstanceSnapshotJob, -UpdateAccount, -UpdateAutomaticTargetMapping, -UpdateCloudAccount, -UpdateCloudAccountFeature, -UpdateCloudNativeStorageSetting, -UpdateComputeSetting, -UpdateExocomputeConfigs, -UpdateTarget, -UpgradeCloudAccountFeaturesWithoutCft, -UpgradeIamUserBasedCloudAccountPermissions, -ValidateAndCreateCloudAccount.
             Alternatively, you can specify the operation by setting the
             -Op parameter, for example: -Op AddAuthenticationServerBasedCloudAccount,
             which is equivalent to specifying -AddAuthenticationServerBasedCloudAccount.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationAws -AddAuthenticationServerBasedCloudAccount).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationAws -AddAuthenticationServerBasedCloudAccount).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AddAuthenticationServerBasedCloudAccount operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: AddAuthenticationServerBasedCloudAccount
             
             $query = New-RscMutationAws -AddAuthenticationServerBasedCloudAccount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	cloudType = $someAwsCloudType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsCloudType]) for enum values.
             	# REQUIRED
             	awsAccountName = $someString
             	# OPTIONAL
             	awsRegions = @(
             		$someAwsAuthServerBasedCloudAccountRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsAuthServerBasedCloudAccountRegion]) for enum values.
             	)
             	# REQUIRED
             	features = @(
             		$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	)
             	# OPTIONAL
             	nativeId = $someString
             	# OPTIONAL
             	agencyName = $someString
             	# OPTIONAL
             	roleName = $someString
             	# OPTIONAL
             	authServerHostName = $someString
             	# OPTIONAL
             	authServerUserClientCertId = @{
             		# REQUIRED
             		id = $someInt64
             	}
             	# OPTIONAL
             	authServerCaCertId = @{
             		# REQUIRED
             		id = $someInt64
             	}
             	# OPTIONAL
             	awsCaCertId = @{
             		# REQUIRED
             		id = $someInt64
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AddAwsAuthenticationServerBasedCloudAccountReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AddIamUserBasedCloudAccount operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: AddIamUserBasedCloudAccount
             
             $query = New-RscMutationAws -AddIamUserBasedCloudAccount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	features = @(
             		$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	)
             	# OPTIONAL
             	accessKey = $someString
             	# OPTIONAL
             	secretKey = $someString
             	# REQUIRED
             	nativeId = $someString
             	# REQUIRED
             	cloudAccountName = $someString
             	# OPTIONAL
             	cloudType = $someAwsCloudType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsCloudType]) for enum values.
             	# OPTIONAL
             	awsRegions = @(
             		$someAwsCloudAccountRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsCloudAccountRegion]) for enum values.
             	)
             	# OPTIONAL
             	roleArn = $someString
             	# OPTIONAL
             	externalArtifactMap = @(
             		@{
             			# OPTIONAL
             			externalArtifactKey = $someAwsCloudExternalArtifact # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsCloudExternalArtifact]) for enum values.
             			# OPTIONAL
             			externalArtifactValue = $someString
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AddAwsIamUserBasedCloudAccountReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BulkDeleteCloudAccountWithoutCft operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: BulkDeleteCloudAccountWithoutCft
             
             $query = New-RscMutationAws -BulkDeleteCloudAccountWithoutCft
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	awsNativeId = $someString
             	# OPTIONAL
             	features = @(
             		$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BulkDeleteAwsCloudAccountWithoutCftReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateAccount operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: CreateAccount
             
             $query = New-RscMutationAws -CreateAccount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	name = $someString
             	# OPTIONAL
             	description = $someString
             	# REQUIRED
             	accessKey = $someString
             	# REQUIRED
             	secretKey = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CloudAccount
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateAutomaticTargetMapping operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: CreateAutomaticTargetMapping
             
             $query = New-RscMutationAws -CreateAutomaticTargetMapping
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	cloudAccountId = $someString
             	# REQUIRED
             	bucketPrefix = $someString
             	# REQUIRED
             	storageClass = $someAwsStorageClass # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsStorageClass]) for enum values.
             	# REQUIRED
             	region = $someAwsRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsRegion]) for enum values.
             	# OPTIONAL
             	kmsMasterKeyId = $someString
             	# OPTIONAL
             	rsaKey = $someString
             	# REQUIRED
             	isConsolidationEnabled = $someBoolean
             	# OPTIONAL
             	proxySettings = @{
             		# OPTIONAL
             		proxyServer = $someString
             		# OPTIONAL
             		portNumber = $someInt
             		# OPTIONAL
             		username = $someString
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		protocol = $someString
             	}
             	# OPTIONAL
             	clusterUuidList = @(
             		$someString
             	)
             	# OPTIONAL
             	awsComputeSettingsId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: TargetMapping
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateCloudNativeStorageSetting operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: CreateCloudNativeStorageSetting
             
             $query = New-RscMutationAws -CreateCloudNativeStorageSetting
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	cloudAccountId = $someString
             	# REQUIRED
             	bucketPrefix = $someString
             	# REQUIRED
             	storageClass = $someAwsStorageClass # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsStorageClass]) for enum values.
             	# OPTIONAL
             	region = $someAwsRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsRegion]) for enum values.
             	# OPTIONAL
             	kmsMasterKeyId = $someString
             	# REQUIRED
             	cloudNativeLocTemplateType = $someCloudNativeLocTemplateType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudNativeLocTemplateType]) for enum values.
             	# OPTIONAL
             	bucketTags = @{
             		# REQUIRED
             		tagList = @(
             			@{
             				# REQUIRED
             				key = $someString
             				# REQUIRED
             				value = $someString
             			}
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateCloudNativeAwsStorageSettingReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateCluster operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: CreateCluster
             
             $query = New-RscMutationAws -CreateCluster
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	cloudAccountId = $someString
             	# OPTIONAL
             	isEsType = $someBoolean
             	# OPTIONAL
             	keepClusterOnFailure = $someBoolean
             	# OPTIONAL
             	region = $someString
             	# OPTIONAL
             	disableApiTermination = $someBoolean
             	# OPTIONAL
             	clusterConfig = @{
             		# OPTIONAL
             		userEmail = $someString
             		# OPTIONAL
             		adminPassword = $someString
             		# OPTIONAL
             		clusterName = $someString
             		# OPTIONAL
             		numNodes = $someInt
             		# OPTIONAL
             		dnsSearchDomains = @(
             			$someString
             		)
             		# OPTIONAL
             		dnsNameServers = @(
             			$someString
             		)
             		# OPTIONAL
             		ntpServers = @(
             			$someString
             		)
             		# OPTIONAL
             		azureEsConfig = @{
             			# OPTIONAL
             			storageAccount = $someString
             			# OPTIONAL
             			resourceGroup = $someString
             			# OPTIONAL
             			storageSecret = $someString
             			# OPTIONAL
             			containerName = $someString
             			# OPTIONAL
             			shouldCreateContainer = $someBoolean
             			# OPTIONAL
             			enableImmutability = $someBoolean
             		}
             		# OPTIONAL
             		awsEsConfig = @{
             			# OPTIONAL
             			bucketName = $someString
             			# OPTIONAL
             			shouldCreateBucket = $someBoolean
             			# OPTIONAL
             			enableObjectLock = $someBoolean
             			# OPTIONAL
             			enableImmutability = $someBoolean
             		}
             	}
             	# OPTIONAL
             	vmConfig = @{
             		# OPTIONAL
             		cdmVersion = $someString
             		# OPTIONAL
             		nodeSizeGb = $someInt
             		# OPTIONAL
             		subnet = $someString
             		# OPTIONAL
             		tags = $someString
             		# OPTIONAL
             		imageId = $someString
             		# OPTIONAL
             		instanceProfileName = $someString
             		# OPTIONAL
             		cdmProduct = $someString
             		# OPTIONAL
             		vmType = $someVmType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.VmType]) for enum values.
             		# OPTIONAL
             		securityGroups = @(
             			$someString
             		)
             		# OPTIONAL
             		instanceType = $someAwsInstanceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsInstanceType]) for enum values.
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CcProvisionJobReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateComputeSetting operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: CreateComputeSetting
             
             $query = New-RscMutationAws -CreateComputeSetting
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	name = $someString
             	# OPTIONAL
             	subnetId = $someString
             	# OPTIONAL
             	vpcId = $someString
             	# OPTIONAL
             	securityGroupId = $someString
             	# OPTIONAL
             	cloudAccountId = $someString
             	# OPTIONAL
             	region = $someAwsRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsRegion]) for enum values.
             	# OPTIONAL
             	isSecurityGroupPolarisManaged = $someBoolean
             	# OPTIONAL
             	clusterInterfaceCidrs = @(
             		@{
             			# OPTIONAL
             			clusterName = $someString
             			# OPTIONAL
             			clusterId = $someString
             			# OPTIONAL
             			interfaceCidr = @(
             				@{
             					# OPTIONAL
             					interfaceType = $someInterfaceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.InterfaceType]) for enum values.
             					# OPTIONAL
             					cidr = $someString
             					# OPTIONAL
             					selected = $someBoolean
             				}
             			)
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsComputeSettings
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateExocomputeConfigs operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: CreateExocomputeConfigs
             
             $query = New-RscMutationAws -CreateExocomputeConfigs
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	cloudAccountId = $someString
             	# REQUIRED
             	configs = @(
             		@{
             			# REQUIRED
             			region = $someAwsCloudAccountRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsCloudAccountRegion]) for enum values.
             			# OPTIONAL
             			clusterSecurityGroupId = $someString
             			# REQUIRED
             			vpcId = $someString
             			# OPTIONAL
             			nodeSecurityGroupId = $someString
             			# REQUIRED
             			subnets = @(
             				@{
             					# REQUIRED
             					subnetId = $someString
             					# REQUIRED
             					availabilityZone = $someString
             				}
             			)
             			# REQUIRED
             			isRscManaged = $someBoolean
             		}
             	)
             	# OPTIONAL
             	triggerHealthCheck = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateAwsExocomputeConfigsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateReaderTarget operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: CreateReaderTarget
             
             $query = New-RscMutationAws -CreateReaderTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	cloudAccountId = $someString
             	# REQUIRED
             	bucketName = $someString
             	# REQUIRED
             	storageClass = $someAwsStorageClass # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsStorageClass]) for enum values.
             	# REQUIRED
             	region = $someAwsRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsRegion]) for enum values.
             	# OPTIONAL
             	kmsMasterKeyId = $someString
             	# OPTIONAL
             	rsaKey = $someString
             	# OPTIONAL
             	encryptionPassword = $someString
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	isConsolidationEnabled = $someBoolean
             	# OPTIONAL
             	proxySettings = @{
             		# OPTIONAL
             		proxyServer = $someString
             		# OPTIONAL
             		portNumber = $someInt
             		# OPTIONAL
             		username = $someString
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		protocol = $someString
             	}
             	# OPTIONAL
             	awsComputeSettingsId = $someString
             	# OPTIONAL
             	cloudComputeSettings = @{
             		# OPTIONAL
             		subnetId = $someString
             		# OPTIONAL
             		vpcId = $someString
             		# OPTIONAL
             		securityGroupId = $someString
             		# OPTIONAL
             		computeProxySettings = @{
             			# OPTIONAL
             			proxyServer = $someString
             			# OPTIONAL
             			portNumber = $someInt
             			# OPTIONAL
             			username = $someString
             			# OPTIONAL
             			password = $someString
             			# OPTIONAL
             			protocol = $someString
             		}
             	}
             	# OPTIONAL
             	awsRetrievalTier = $someAwsRetrievalTier # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsRetrievalTier]) for enum values.
             	# REQUIRED
             	readerRetrievalMethod = $someReaderRetrievalMethod # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ReaderRetrievalMethod]) for enum values.
             	# OPTIONAL
             	s3Endpoint = $someString
             	# OPTIONAL
             	kmsEndpoint = $someString
             	# OPTIONAL
             	computeProxySettings = @{
             		# OPTIONAL
             		proxyServer = $someString
             		# OPTIONAL
             		portNumber = $someInt
             		# OPTIONAL
             		username = $someString
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		protocol = $someString
             	}
             	# REQUIRED
             	bypassProxy = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Target
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateTarget operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: CreateTarget
             
             $query = New-RscMutationAws -CreateTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	cloudAccountId = $someString
             	# REQUIRED
             	bucketName = $someString
             	# REQUIRED
             	storageClass = $someAwsStorageClass # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsStorageClass]) for enum values.
             	# REQUIRED
             	region = $someAwsRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsRegion]) for enum values.
             	# OPTIONAL
             	kmsMasterKeyId = $someString
             	# OPTIONAL
             	rsaKey = $someString
             	# OPTIONAL
             	encryptionPassword = $someString
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	isConsolidationEnabled = $someBoolean
             	# OPTIONAL
             	proxySettings = @{
             		# OPTIONAL
             		proxyServer = $someString
             		# OPTIONAL
             		portNumber = $someInt
             		# OPTIONAL
             		username = $someString
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		protocol = $someString
             	}
             	# OPTIONAL
             	awsComputeSettingsId = $someString
             	# OPTIONAL
             	cloudComputeSettings = @{
             		# OPTIONAL
             		subnetId = $someString
             		# OPTIONAL
             		vpcId = $someString
             		# OPTIONAL
             		securityGroupId = $someString
             		# OPTIONAL
             		computeProxySettings = @{
             			# OPTIONAL
             			proxyServer = $someString
             			# OPTIONAL
             			portNumber = $someInt
             			# OPTIONAL
             			username = $someString
             			# OPTIONAL
             			password = $someString
             			# OPTIONAL
             			protocol = $someString
             		}
             	}
             	# OPTIONAL
             	computeProxySettings = @{
             		# OPTIONAL
             		proxyServer = $someString
             		# OPTIONAL
             		portNumber = $someInt
             		# OPTIONAL
             		username = $someString
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		protocol = $someString
             	}
             	# OPTIONAL
             	awsRetrievalTier = $someAwsRetrievalTier # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsRetrievalTier]) for enum values.
             	# OPTIONAL
             	immutabilitySettings = @{
             		# OPTIONAL
             		lockDurationDays = $someInt
             	}
             	# OPTIONAL
             	s3Endpoint = $someString
             	# OPTIONAL
             	kmsEndpoint = $someString
             	# REQUIRED
             	bypassProxy = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Target
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteCluster operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: DeleteCluster
             
             $query = New-RscMutationAws -DeleteCluster
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	cloudAccountId = $someString
             	# OPTIONAL
             	clusterName = $someString
             	# OPTIONAL
             	numNodes = $someInt
             	# OPTIONAL
             	isEsType = $someBoolean
             	# OPTIONAL
             	bucketName = $someString
             	# OPTIONAL
             	isNewContainer = $someBoolean
             	# OPTIONAL
             	clusterUuid = $someString
             	# OPTIONAL
             	region = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CcProvisionJobReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteComputeSetting operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: DeleteComputeSetting
             
             $query = New-RscMutationAws -DeleteComputeSetting
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteExocomputeConfigs operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: DeleteExocomputeConfigs
             
             $query = New-RscMutationAws -DeleteExocomputeConfigs
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	configIdsToBeDeleted = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: DeleteAwsExocomputeConfigsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ExcludeNativeEbsVolumesFromSnapshot operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: ExcludeNativeEbsVolumesFromSnapshot
             
             $query = New-RscMutationAws -ExcludeNativeEbsVolumesFromSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	awsNativeEc2InstanceId = $someString
             	# REQUIRED
             	volumeIdExclusions = @(
             		@{
             			# REQUIRED
             			volumeId = $someString
             			# REQUIRED
             			isExcluded = $someBoolean
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the FinalizeCloudAccountDeletion operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: FinalizeCloudAccountDeletion
             
             $query = New-RscMutationAws -FinalizeCloudAccountDeletion
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	cloudAccountId = $someString
             	# REQUIRED
             	feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: FinalizeAwsCloudAccountDeletionReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the FinalizeCloudAccountProtection operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: FinalizeCloudAccountProtection
             
             $query = New-RscMutationAws -FinalizeCloudAccountProtection
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	action = $someCloudAccountAction # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountAction]) for enum values.
             	# REQUIRED
             	features = @(
             		$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	)
             	# OPTIONAL
             	awsAdminAccount = @{
             		# OPTIONAL
             		id = $someString
             		# OPTIONAL
             		nativeId = $someString
             		# OPTIONAL
             		accountName = $someString
             		# OPTIONAL
             		seamlessFlowEnabled = $someBoolean
             		# OPTIONAL
             		cloudType = $someAwsCloudType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsCloudType]) for enum values.
             	}
             	# REQUIRED
             	awsChildAccounts = @(
             		@{
             			# OPTIONAL
             			id = $someString
             			# OPTIONAL
             			nativeId = $someString
             			# OPTIONAL
             			accountName = $someString
             			# OPTIONAL
             			seamlessFlowEnabled = $someBoolean
             			# OPTIONAL
             			cloudType = $someAwsCloudType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsCloudType]) for enum values.
             		}
             	)
             	# OPTIONAL
             	awsRegions = @(
             		$someAwsCloudAccountRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsCloudAccountRegion]) for enum values.
             	)
             	# OPTIONAL
             	stackName = $someString
             	# OPTIONAL
             	stackSetName = $someString
             	# OPTIONAL
             	externalId = $someString
             	# OPTIONAL
             	featureVersion = @(
             		@{
             			# REQUIRED
             			feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             			# REQUIRED
             			version = $someInt
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: FinalizeAwsCloudAccountProtectionReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PatchAuthenticationServerBasedCloudAccount operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: PatchAuthenticationServerBasedCloudAccount
             
             $query = New-RscMutationAws -PatchAuthenticationServerBasedCloudAccount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	awsCloudAccountId = $someString
             	# REQUIRED
             	feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	# OPTIONAL
             	awsRegions = @{
             		# REQUIRED
             		regions = @(
             			$someAwsAuthServerBasedCloudAccountRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsAuthServerBasedCloudAccountRegion]) for enum values.
             		)
             	}
             	# OPTIONAL
             	roleName = @{
             		# REQUIRED
             		name = $someString
             	}
             	# OPTIONAL
             	authServerUserClientCertId = @{
             		# REQUIRED
             		id = $someInt64
             	}
             	# OPTIONAL
             	authServerCaCertId = @{
             		# REQUIRED
             		id = $someInt64
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PatchIamUserBasedCloudAccount operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: PatchIamUserBasedCloudAccount
             
             $query = New-RscMutationAws -PatchIamUserBasedCloudAccount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	awsCloudAccountId = $someString
             	# REQUIRED
             	feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	# OPTIONAL
             	awsRegions = @{
             		# REQUIRED
             		regions = @(
             			$someAwsCloudAccountRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsCloudAccountRegion]) for enum values.
             		)
             	}
             	# OPTIONAL
             	awsUserKeys = @{
             		# REQUIRED
             		accessKey = $someString
             		# REQUIRED
             		secretKey = $someString
             	}
             	# OPTIONAL
             	awsRoleArn = @{
             		# REQUIRED
             		roleArn = $someString
             	}
             	# OPTIONAL
             	externalArtifactMap = @(
             		@{
             			# OPTIONAL
             			externalArtifactKey = $someAwsCloudExternalArtifact # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsCloudExternalArtifact]) for enum values.
             			# OPTIONAL
             			externalArtifactValue = $someString
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PrepareCloudAccountDeletion operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: PrepareCloudAccountDeletion
             
             $query = New-RscMutationAws -PrepareCloudAccountDeletion
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	cloudAccountId = $someString
             	# REQUIRED
             	feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: PrepareAwsCloudAccountDeletionReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PrepareFeatureUpdateForCloudAccount operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: PrepareFeatureUpdateForCloudAccount
             
             $query = New-RscMutationAws -PrepareFeatureUpdateForCloudAccount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	cloudAccountId = $someString
             	# REQUIRED
             	features = @(
             		$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: PrepareFeatureUpdateForAwsCloudAccountReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RegisterFeatureArtifacts operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: RegisterFeatureArtifacts
             
             $query = New-RscMutationAws -RegisterFeatureArtifacts
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	awsArtifacts = @(
             		@{
             			# REQUIRED
             			awsNativeId = $someString
             			# REQUIRED
             			externalArtifacts = @(
             				@{
             					# REQUIRED
             					externalArtifactValue = $someString
             					# OPTIONAL
             					externalArtifactKey = $someAwsCloudExternalArtifact # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsCloudExternalArtifact]) for enum values.
             				}
             			)
             			# REQUIRED
             			features = @(
             				$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             			)
             		}
             	)
             	# OPTIONAL
             	cloudType = $someAwsCloudType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsCloudType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RegisterAwsFeatureArtifactsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartCreateNativeEbsVolumeSnapshotsJob operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: StartCreateNativeEbsVolumeSnapshotsJob
             
             $query = New-RscMutationAws -StartCreateNativeEbsVolumeSnapshotsJob
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	ebsVolumeIds = @(
             		$someString
             	)
             	# OPTIONAL
             	retentionSlaId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartExocomputeDisableJob operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: StartExocomputeDisableJob
             
             $query = New-RscMutationAws -StartExocomputeDisableJob
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	cloudAccountId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartExportNativeEbsVolumeSnapshotJob operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: StartExportNativeEbsVolumeSnapshotJob
             
             $query = New-RscMutationAws -StartExportNativeEbsVolumeSnapshotJob
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snapshotId = $someString
             	# REQUIRED
             	destinationAwsAccountRubrikId = $someString
             	# REQUIRED
             	destinationRegionNativeId = $someAwsNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegion]) for enum values.
             	# REQUIRED
             	volumeName = $someString
             	# REQUIRED
             	volumeSize = $someInt
             	# REQUIRED
             	volumeType = $someAwsNativeEbsVolumeType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeEbsVolumeType]) for enum values.
             	# REQUIRED
             	availabilityZone = $someString
             	# REQUIRED
             	iops = $someInt
             	# REQUIRED
             	shouldCopyTags = $someBoolean
             	# REQUIRED
             	shouldReplaceAttached = $someBoolean
             	# OPTIONAL
             	kmsKeyId = $someString
             	# OPTIONAL
             	snapshotType = $someSnapshotType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnapshotType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartNativeAccountDisableJob operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: StartNativeAccountDisableJob
             
             $query = New-RscMutationAws -StartNativeAccountDisableJob
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	awsAccountRubrikId = $someString
             	# REQUIRED
             	shouldDeleteNativeSnapshots = $someBoolean
             	# REQUIRED
             	awsNativeProtectionFeature = $someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartNativeEc2InstanceSnapshotsJob operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: StartNativeEc2InstanceSnapshotsJob
             
             $query = New-RscMutationAws -StartNativeEc2InstanceSnapshotsJob
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	ec2InstanceIds = @(
             		$someString
             	)
             	# OPTIONAL
             	retentionSlaId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartNativeRdsInstanceSnapshotsJob operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: StartNativeRdsInstanceSnapshotsJob
             
             $query = New-RscMutationAws -StartNativeRdsInstanceSnapshotsJob
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	rdsInstanceIds = @(
             		$someString
             	)
             	# OPTIONAL
             	retentionSlaId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartRefreshNativeAccountsJob operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: StartRefreshNativeAccountsJob
             
             $query = New-RscMutationAws -StartRefreshNativeAccountsJob
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	awsAccountRubrikIds = @(
             		$someString
             	)
             	# REQUIRED
             	awsNativeProtectionFeatures = @(
             		$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartRestoreNativeEc2InstanceSnapshotJob operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: StartRestoreNativeEc2InstanceSnapshotJob
             
             $query = New-RscMutationAws -StartRestoreNativeEc2InstanceSnapshotJob
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snapshotId = $someString
             	# REQUIRED
             	shouldPowerOn = $someBoolean
             	# REQUIRED
             	shouldRestoreTags = $someBoolean
             	# OPTIONAL
             	snapshotTypeToUseIfSourceExpired = $someSnapshotTypeToUseIfSourceExpired # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnapshotTypeToUseIfSourceExpired]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateAccount operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: UpdateAccount
             
             $query = New-RscMutationAws -UpdateAccount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	name = $someString
             	# OPTIONAL
             	description = $someString
             	# REQUIRED
             	accessKey = $someString
             	# REQUIRED
             	secretKey = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CloudAccount
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateAutomaticTargetMapping operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: UpdateAutomaticTargetMapping
             
             $query = New-RscMutationAws -UpdateAutomaticTargetMapping
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	name = $someString
             	# OPTIONAL
             	cloudAccountId = $someString
             	# OPTIONAL
             	storageClass = $someAwsStorageClass # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsStorageClass]) for enum values.
             	# OPTIONAL
             	isConsolidationEnabled = $someBoolean
             	# OPTIONAL
             	proxySettings = @{
             		# OPTIONAL
             		proxyServer = $someString
             		# OPTIONAL
             		portNumber = $someInt
             		# OPTIONAL
             		username = $someString
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		protocol = $someString
             	}
             	# OPTIONAL
             	clusterUuidList = @(
             		$someString
             	)
             	# OPTIONAL
             	awsComputeSettingsId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: TargetMapping
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateCloudAccount operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: UpdateCloudAccount
             
             $query = New-RscMutationAws -UpdateCloudAccount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	cloudAccountId = $someString
             	# OPTIONAL
             	awsAccountName = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateCloudAccountFeature operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: UpdateCloudAccountFeature
             
             $query = New-RscMutationAws -UpdateCloudAccountFeature
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	cloudAccountId = $someString
             	# REQUIRED
             	action = $someCloudAccountAction # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountAction]) for enum values.
             	# REQUIRED
             	feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	# OPTIONAL
             	awsRegions = @(
             		$someAwsCloudAccountRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsCloudAccountRegion]) for enum values.
             	)
             	# OPTIONAL
             	roleArn = $someString
             	# OPTIONAL
             	stackArn = $someString
             	# OPTIONAL
             	awsAccountName = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateAwsCloudAccountFeatureReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateCloudNativeStorageSetting operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: UpdateCloudNativeStorageSetting
             
             $query = New-RscMutationAws -UpdateCloudNativeStorageSetting
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	name = $someString
             	# OPTIONAL
             	storageClass = $someAwsStorageClass # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsStorageClass]) for enum values.
             	# OPTIONAL
             	kmsMasterKeyId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateCloudNativeAwsStorageSettingReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateComputeSetting operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: UpdateComputeSetting
             
             $query = New-RscMutationAws -UpdateComputeSetting
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	id = $someString
             	# OPTIONAL
             	name = $someString
             	# OPTIONAL
             	subnetId = $someString
             	# OPTIONAL
             	vpcId = $someString
             	# OPTIONAL
             	securityGroupId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsComputeSettings
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateExocomputeConfigs operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: UpdateExocomputeConfigs
             
             $query = New-RscMutationAws -UpdateExocomputeConfigs
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	cloudAccountId = $someString
             	# REQUIRED
             	configs = @(
             		@{
             			# REQUIRED
             			region = $someAwsCloudAccountRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsCloudAccountRegion]) for enum values.
             			# OPTIONAL
             			clusterSecurityGroupId = $someString
             			# REQUIRED
             			vpcId = $someString
             			# OPTIONAL
             			nodeSecurityGroupId = $someString
             			# REQUIRED
             			subnets = @(
             				@{
             					# REQUIRED
             					subnetId = $someString
             					# REQUIRED
             					availabilityZone = $someString
             				}
             			)
             			# REQUIRED
             			isRscManaged = $someBoolean
             		}
             	)
             	# OPTIONAL
             	triggerHealthCheck = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateAwsExocomputeConfigsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateTarget operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: UpdateTarget
             
             $query = New-RscMutationAws -UpdateTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	name = $someString
             	# OPTIONAL
             	cloudAccountId = $someString
             	# OPTIONAL
             	storageClass = $someAwsStorageClass # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsStorageClass]) for enum values.
             	# OPTIONAL
             	isConsolidationEnabled = $someBoolean
             	# OPTIONAL
             	proxySettings = @{
             		# OPTIONAL
             		proxyServer = $someString
             		# OPTIONAL
             		portNumber = $someInt
             		# OPTIONAL
             		username = $someString
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		protocol = $someString
             	}
             	# OPTIONAL
             	awsComputeSettingsId = $someString
             	# OPTIONAL
             	cloudComputeSettings = @{
             		# OPTIONAL
             		subnetId = $someString
             		# OPTIONAL
             		vpcId = $someString
             		# OPTIONAL
             		securityGroupId = $someString
             		# OPTIONAL
             		computeProxySettings = @{
             			# OPTIONAL
             			proxyServer = $someString
             			# OPTIONAL
             			portNumber = $someInt
             			# OPTIONAL
             			username = $someString
             			# OPTIONAL
             			password = $someString
             			# OPTIONAL
             			protocol = $someString
             		}
             	}
             	# OPTIONAL
             	computeProxySettings = @{
             		# OPTIONAL
             		proxyServer = $someString
             		# OPTIONAL
             		portNumber = $someInt
             		# OPTIONAL
             		username = $someString
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		protocol = $someString
             	}
             	# OPTIONAL
             	awsRetrievalTier = $someAwsRetrievalTier # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsRetrievalTier]) for enum values.
             	# OPTIONAL
             	immutabilitySettings = @{
             		# OPTIONAL
             		lockDurationDays = $someInt
             	}
             	# OPTIONAL
             	s3Endpoint = $someString
             	# OPTIONAL
             	kmsEndpoint = $someString
             	# OPTIONAL
             	bypassProxy = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Target
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpgradeCloudAccountFeaturesWithoutCft operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: UpgradeCloudAccountFeaturesWithoutCft
             
             $query = New-RscMutationAws -UpgradeCloudAccountFeaturesWithoutCft
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	awsCloudAccountId = $someString
             	# REQUIRED
             	features = @(
             		$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpgradeIamUserBasedCloudAccountPermissions operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: UpgradeIamUserBasedCloudAccountPermissions
             
             $query = New-RscMutationAws -UpgradeIamUserBasedCloudAccountPermissions
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	awsCloudAccountId = $someString
             	# REQUIRED
             	features = @(
             		$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ValidateAndCreateCloudAccount operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: ValidateAndCreateCloudAccount
             
             $query = New-RscMutationAws -ValidateAndCreateCloudAccount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	action = $someCloudAccountAction # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountAction]) for enum values.
             	# REQUIRED
             	features = @(
             		$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	)
             	# OPTIONAL
             	awsAdminAccount = @{
             		# OPTIONAL
             		id = $someString
             		# OPTIONAL
             		nativeId = $someString
             		# OPTIONAL
             		accountName = $someString
             		# OPTIONAL
             		seamlessFlowEnabled = $someBoolean
             		# OPTIONAL
             		cloudType = $someAwsCloudType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsCloudType]) for enum values.
             	}
             	# REQUIRED
             	awsChildAccounts = @(
             		@{
             			# OPTIONAL
             			id = $someString
             			# OPTIONAL
             			nativeId = $someString
             			# OPTIONAL
             			accountName = $someString
             			# OPTIONAL
             			seamlessFlowEnabled = $someBoolean
             			# OPTIONAL
             			cloudType = $someAwsCloudType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsCloudType]) for enum values.
             		}
             	)
             	# OPTIONAL
             	awsRoleCustomization = @{
             		# OPTIONAL
             		crossAccountRoleName = $someString
             		# OPTIONAL
             		crossAccountRolePath = $someString
             		# OPTIONAL
             		masterRoleName = $someString
             		# OPTIONAL
             		masterRolePath = $someString
             		# OPTIONAL
             		workerRoleName = $someString
             		# OPTIONAL
             		workerRolePath = $someString
             		# OPTIONAL
             		instanceProfileName = $someString
             		# OPTIONAL
             		instanceProfilePath = $someString
             		# OPTIONAL
             		ec2RecoveryRolePath = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ValidateAndCreateAwsCloudAccountReply
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationAzure">
             <summary>
             Create a new RscQuery object for any of the 51
             operations in the 'Azure' API domain:
             AddCloudAccount, AddCloudAccountExocomputeConfigurations, AddCloudAccountWithoutOauth, BackupAdDirectory, CompleteAdAppSetup, CompleteAdAppUpdate, CompleteCloudAccountOauth, CreateAccount, CreateAutomaticTargetMapping, CreateCloudNativeRcvStorageSetting, CreateCloudNativeStorageSetting, CreateCluster, CreateReaderTarget, CreateSaasAppAad, CreateTarget, DeleteAdDirectory, DeleteCloudAccount, DeleteCloudAccountExocomputeConfigurations, DeleteCloudAccountWithoutOauth, DeleteCluster, ExcludeNativeManagedDisksFromSnapshot, MapCloudAccountExocomputeSubscription, MapCloudAccountToPersistentStorageLocation, OauthConsentComplete, OauthConsentKickoff, RestoreAdObjectsWithPasswords, SetCloudAccountCustomerAppCredentials, StartAdAppSetup, StartAdAppUpdate, StartCloudAccountOauth, StartCreateNativeManagedDiskSnapshotsJob, StartCreateNativeVirtualMachineSnapshotsJob, StartDisableCloudAccountJob, StartDisableNativeSubscriptionProtectionJob, StartExportNativeManagedDiskJob, StartExportNativeVirtualMachineJob, StartExportSqlDatabaseDbJob, StartExportSqlManagedInstanceDbJob, StartRefreshNativeSubscriptionsJob, StartRestoreNativeVirtualMachineJob, UnmapCloudAccountExocomputeSubscription, UnmapPersistentStorageSubscription, UpdateAccount, UpdateAutomaticTargetMapping, UpdateCloudAccount, UpdateCloudNativeRcvStorageSetting, UpdateCloudNativeStorageSetting, UpdateCustomerAppPermissionForSql, UpdateTarget, UpgradeCloudAccount, or UpgradeCloudAccountPermissionsWithoutOauth.
             </summary>
             <description>
             New-RscMutationAzure creates a new
             mutation object for operations
             in the 'Azure' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 51 operations
             in the 'Azure' API domain. Select the operation this
             query is for by specifying the appropriate switch parameter;
             one of: -AddCloudAccount, -AddCloudAccountExocomputeConfigurations, -AddCloudAccountWithoutOauth, -BackupAdDirectory, -CompleteAdAppSetup, -CompleteAdAppUpdate, -CompleteCloudAccountOauth, -CreateAccount, -CreateAutomaticTargetMapping, -CreateCloudNativeRcvStorageSetting, -CreateCloudNativeStorageSetting, -CreateCluster, -CreateReaderTarget, -CreateSaasAppAad, -CreateTarget, -DeleteAdDirectory, -DeleteCloudAccount, -DeleteCloudAccountExocomputeConfigurations, -DeleteCloudAccountWithoutOauth, -DeleteCluster, -ExcludeNativeManagedDisksFromSnapshot, -MapCloudAccountExocomputeSubscription, -MapCloudAccountToPersistentStorageLocation, -OauthConsentComplete, -OauthConsentKickoff, -RestoreAdObjectsWithPasswords, -SetCloudAccountCustomerAppCredentials, -StartAdAppSetup, -StartAdAppUpdate, -StartCloudAccountOauth, -StartCreateNativeManagedDiskSnapshotsJob, -StartCreateNativeVirtualMachineSnapshotsJob, -StartDisableCloudAccountJob, -StartDisableNativeSubscriptionProtectionJob, -StartExportNativeManagedDiskJob, -StartExportNativeVirtualMachineJob, -StartExportSqlDatabaseDbJob, -StartExportSqlManagedInstanceDbJob, -StartRefreshNativeSubscriptionsJob, -StartRestoreNativeVirtualMachineJob, -UnmapCloudAccountExocomputeSubscription, -UnmapPersistentStorageSubscription, -UpdateAccount, -UpdateAutomaticTargetMapping, -UpdateCloudAccount, -UpdateCloudNativeRcvStorageSetting, -UpdateCloudNativeStorageSetting, -UpdateCustomerAppPermissionForSql, -UpdateTarget, -UpgradeCloudAccount, -UpgradeCloudAccountPermissionsWithoutOauth.
             Alternatively, you can specify the operation by setting the
             -Op parameter, for example: -Op AddCloudAccount,
             which is equivalent to specifying -AddCloudAccount.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationAzure -AddCloudAccount).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationAzure -AddCloudAccount).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AddCloudAccount operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: AddCloudAccount
             
             $query = New-RscMutationAzure -AddCloudAccount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	sessionId = $someString
             	# REQUIRED
             	tenantDomainName = $someString
             	# REQUIRED
             	subscriptions = @(
             		@{
             			# REQUIRED
             			features = @(
             				@{
             					# OPTIONAL
             					resourceGroup = @{
             						# REQUIRED
             						name = $someString
             						# OPTIONAL
             						tags = @{
             							# REQUIRED
             							tagList = @(
             								@{
             									# REQUIRED
             									key = $someString
             									# REQUIRED
             									value = $someString
             								}
             							)
             						}
             						# REQUIRED
             						region = $someAzureCloudAccountRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureCloudAccountRegion]) for enum values.
             					}
             					# REQUIRED
             					featureType = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             					# OPTIONAL
             					permissionsGroups = @(
             						$somePermissionsGroup # Call [Enum]::GetValues([RubrikSecurityCloud.Types.PermissionsGroup]) for enum values.
             					)
             				}
             			)
             			# REQUIRED
             			subscription = @{
             				# REQUIRED
             				nativeId = $someString
             				# REQUIRED
             				name = $someString
             			}
             		}
             	)
             	# REQUIRED
             	regions = @(
             		$someAzureCloudAccountRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureCloudAccountRegion]) for enum values.
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AddAzureCloudAccountReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AddCloudAccountExocomputeConfigurations operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: AddCloudAccountExocomputeConfigurations
             
             $query = New-RscMutationAzure -AddCloudAccountExocomputeConfigurations
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	cloudAccountId = $someString
             	# REQUIRED
             	azureExocomputeRegionConfigs = @(
             		@{
             			# REQUIRED
             			region = $someAzureCloudAccountRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureCloudAccountRegion]) for enum values.
             			# REQUIRED
             			subnetNativeId = $someString
             			# REQUIRED
             			isRscManaged = $someBoolean
             			# OPTIONAL
             			podSubnetNativeId = $someString
             		}
             	)
             	# OPTIONAL
             	triggerHealthCheck = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AddAzureCloudAccountExocomputeConfigurationsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AddCloudAccountWithoutOauth operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: AddCloudAccountWithoutOauth
             
             $query = New-RscMutationAzure -AddCloudAccountWithoutOauth
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	tenantDomainName = $someString
             	# REQUIRED
             	subscriptions = @(
             		@{
             			# REQUIRED
             			features = @(
             				@{
             					# REQUIRED
             					policyVersion = $someInt
             					# OPTIONAL
             					resourceGroup = @{
             						# REQUIRED
             						name = $someString
             						# OPTIONAL
             						tags = @{
             							# REQUIRED
             							tagList = @(
             								@{
             									# REQUIRED
             									key = $someString
             									# REQUIRED
             									value = $someString
             								}
             							)
             						}
             						# REQUIRED
             						region = $someAzureCloudAccountRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureCloudAccountRegion]) for enum values.
             					}
             					# OPTIONAL
             					specificFeatureInput = @{
             						# REQUIRED
             						userAssignedManagedIdentityInput = @{
             							# REQUIRED
             							name = $someString
             							# REQUIRED
             							resourceGroupName = $someString
             							# REQUIRED
             							principalId = $someString
             							# REQUIRED
             							region = $someAzureCloudAccountRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureCloudAccountRegion]) for enum values.
             						}
             					}
             					# REQUIRED
             					featureType = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             					# OPTIONAL
             					permissionsGroups = @(
             						$somePermissionsGroup # Call [Enum]::GetValues([RubrikSecurityCloud.Types.PermissionsGroup]) for enum values.
             					)
             				}
             			)
             			# REQUIRED
             			subscription = @{
             				# REQUIRED
             				nativeId = $someString
             				# REQUIRED
             				name = $someString
             			}
             		}
             	)
             	# REQUIRED
             	regions = @(
             		$someAzureCloudAccountRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureCloudAccountRegion]) for enum values.
             	)
             	# OPTIONAL
             	azureCloudType = $someAzureCloudType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureCloudType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AddAzureCloudAccountWithoutOauthReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BackupAdDirectory operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: BackupAdDirectory
             
             $query = New-RscMutationAzure -BackupAdDirectory
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	workloadFids = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;CreateOnDemandJobReply&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CompleteAdAppSetup operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: CompleteAdAppSetup
             
             $query = New-RscMutationAzure -CompleteAdAppSetup
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	domainName = $someString
             	# REQUIRED
             	stateToken = $someString
             	# OPTIONAL
             	kmsSpec = @{
             		# OPTIONAL
             		cloudType = $someO365AzureCloudType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.O365AzureCloudType]) for enum values.
             		# OPTIONAL
             		tenantId = $someString
             		# OPTIONAL
             		kmsId = $someString
             		# OPTIONAL
             		appId = $someString
             		# OPTIONAL
             		appSecret = $someString
             		# OPTIONAL
             		keyName = $someString
             		# OPTIONAL
             		kekNameColossus = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CompleteAzureAdAppSetupReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CompleteAdAppUpdate operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: CompleteAdAppUpdate
             
             $query = New-RscMutationAzure -CompleteAdAppUpdate
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	workloadFid = $someString
             	# REQUIRED
             	stateToken = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CompleteCloudAccountOauth operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: CompleteCloudAccountOauth
             
             $query = New-RscMutationAzure -CompleteCloudAccountOauth
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	sessionId = $someString
             	# REQUIRED
             	tenantDomainName = $someString
             	# REQUIRED
             	authorizationCode = $someString
             	# REQUIRED
             	redirectUrl = $someString
             	# REQUIRED
             	features = @(
             		$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	)
             	# OPTIONAL
             	appId = $someString
             	# OPTIONAL
             	appSecretKey = $someString
             	# REQUIRED
             	shouldSkipPermissionChecks = $someBoolean
             	# OPTIONAL
             	azureCloudType = $someAzureCloudType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureCloudType]) for enum values.
             	# OPTIONAL
             	resource = $someAzureOauthResource # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureOauthResource]) for enum values.
             	# OPTIONAL
             	performBasicOauth = $someBoolean
             	# OPTIONAL
             	shouldKeepRefreshToken = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CompleteAzureCloudAccountOauthReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateAccount operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: CreateAccount
             
             $query = New-RscMutationAzure -CreateAccount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	name = $someString
             	# OPTIONAL
             	description = $someString
             	# REQUIRED
             	subscriptionId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CloudAccount
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateAutomaticTargetMapping operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: CreateAutomaticTargetMapping
             
             $query = New-RscMutationAzure -CreateAutomaticTargetMapping
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	storageAccountName = $someString
             	# REQUIRED
             	accessKey = $someString
             	# REQUIRED
             	containerNamePrefix = $someString
             	# REQUIRED
             	cloudAccountId = $someString
             	# REQUIRED
             	instanceType = $someInstanceTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.InstanceTypeEnum]) for enum values.
             	# REQUIRED
             	rsaKey = $someString
             	# OPTIONAL
             	computeSettings = @{
             		# OPTIONAL
             		appId = $someString
             		# OPTIONAL
             		appSecretKey = $someString
             		# OPTIONAL
             		region = $someAzureRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureRegion]) for enum values.
             		# OPTIONAL
             		generalPurposeStorageName = $someString
             		# OPTIONAL
             		generalPurposeStorageContainer = $someString
             		# OPTIONAL
             		resourceGroup = $someString
             		# OPTIONAL
             		virtualNetworkId = $someString
             		# OPTIONAL
             		subnetId = $someString
             		# OPTIONAL
             		securityGroupId = $someString
             		# OPTIONAL
             		computeProxySettings = @{
             			# OPTIONAL
             			proxyServer = $someString
             			# OPTIONAL
             			portNumber = $someInt
             			# OPTIONAL
             			username = $someString
             			# OPTIONAL
             			password = $someString
             			# OPTIONAL
             			protocol = $someString
             		}
             		# OPTIONAL
             		cloudAccountId = $someString
             	}
             	# OPTIONAL
             	proxySettings = @{
             		# OPTIONAL
             		proxyServer = $someString
             		# OPTIONAL
             		portNumber = $someInt
             		# OPTIONAL
             		username = $someString
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		protocol = $someString
             	}
             	# OPTIONAL
             	clusterUuidList = @(
             		$someString
             	)
             	# REQUIRED
             	isConsolidationEnabled = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: TargetMapping
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateCloudNativeRcvStorageSetting operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: CreateCloudNativeRcvStorageSetting
             
             $query = New-RscMutationAzure -CreateCloudNativeRcvStorageSetting
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	region = $someAzureRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureRegion]) for enum values.
             	# REQUIRED
             	cloudNativeLocTemplateType = $someCloudNativeLocTemplateType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudNativeLocTemplateType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateCloudNativeRcvAzureStorageSettingReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateCloudNativeStorageSetting operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: CreateCloudNativeStorageSetting
             
             $query = New-RscMutationAzure -CreateCloudNativeStorageSetting
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	cloudAccountId = $someString
             	# REQUIRED
             	storageAccountName = $someString
             	# REQUIRED
             	containerName = $someString
             	# OPTIONAL
             	storageAccountTags = @{
             		# REQUIRED
             		tagList = @(
             			@{
             				# REQUIRED
             				key = $someString
             				# REQUIRED
             				value = $someString
             			}
             		)
             	}
             	# OPTIONAL
             	storageAccountRegion = $someAzureRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureRegion]) for enum values.
             	# REQUIRED
             	storageTier = $someAzureStorageTier # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureStorageTier]) for enum values.
             	# REQUIRED
             	redundancy = $someAzureRedundancy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureRedundancy]) for enum values.
             	# REQUIRED
             	subscriptionNativeId = $someString
             	# REQUIRED
             	cloudNativeLocTemplateType = $someCloudNativeLocTemplateType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudNativeLocTemplateType]) for enum values.
             	# OPTIONAL
             	cmkInfo = @(
             		@{
             			# OPTIONAL
             			keyVaultName = $someString
             			# OPTIONAL
             			keyName = $someString
             			# OPTIONAL
             			region = $someAzureRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureRegion]) for enum values.
             		}
             	)
             	# OPTIONAL
             	azureCloudType = $someAzureCloudType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureCloudType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateCloudNativeAzureStorageSettingReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateCluster operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: CreateCluster
             
             $query = New-RscMutationAzure -CreateCluster
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	cloudAccountId = $someString
             	# OPTIONAL
             	isEsType = $someBoolean
             	# OPTIONAL
             	keepClusterOnFailure = $someBoolean
             	# OPTIONAL
             	clusterConfig = @{
             		# OPTIONAL
             		userEmail = $someString
             		# OPTIONAL
             		adminPassword = $someString
             		# OPTIONAL
             		clusterName = $someString
             		# OPTIONAL
             		numNodes = $someInt
             		# OPTIONAL
             		dnsSearchDomains = @(
             			$someString
             		)
             		# OPTIONAL
             		dnsNameServers = @(
             			$someString
             		)
             		# OPTIONAL
             		ntpServers = @(
             			$someString
             		)
             		# OPTIONAL
             		azureEsConfig = @{
             			# OPTIONAL
             			storageAccount = $someString
             			# OPTIONAL
             			resourceGroup = $someString
             			# OPTIONAL
             			storageSecret = $someString
             			# OPTIONAL
             			containerName = $someString
             			# OPTIONAL
             			shouldCreateContainer = $someBoolean
             			# OPTIONAL
             			enableImmutability = $someBoolean
             		}
             		# OPTIONAL
             		awsEsConfig = @{
             			# OPTIONAL
             			bucketName = $someString
             			# OPTIONAL
             			shouldCreateBucket = $someBoolean
             			# OPTIONAL
             			enableObjectLock = $someBoolean
             			# OPTIONAL
             			enableImmutability = $someBoolean
             		}
             	}
             	# OPTIONAL
             	vmConfig = @{
             		# OPTIONAL
             		resourceGroup = $someString
             		# OPTIONAL
             		cdmVersion = $someString
             		# OPTIONAL
             		location = $someString
             		# OPTIONAL
             		nodeSizeGb = $someInt
             		# OPTIONAL
             		networkResourceGroup = $someString
             		# OPTIONAL
             		vnetResourceGroup = $someString
             		# OPTIONAL
             		networkSecurityGroup = $someString
             		# OPTIONAL
             		networkSecurityResourceGroup = $someString
             		# OPTIONAL
             		vnet = $someString
             		# OPTIONAL
             		subnet = $someString
             		# OPTIONAL
             		tags = $someString
             		# OPTIONAL
             		vmImage = $someString
             		# OPTIONAL
             		cdmProduct = $someString
             		# OPTIONAL
             		vmType = $someVmType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.VmType]) for enum values.
             		# OPTIONAL
             		instanceType = $someAzureInstanceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureInstanceType]) for enum values.
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CcProvisionJobReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateReaderTarget operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: CreateReaderTarget
             
             $query = New-RscMutationAzure -CreateReaderTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	storageAccountName = $someString
             	# REQUIRED
             	accessKey = $someString
             	# REQUIRED
             	containerName = $someString
             	# REQUIRED
             	cloudAccountId = $someString
             	# REQUIRED
             	instanceType = $someInstanceTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.InstanceTypeEnum]) for enum values.
             	# REQUIRED
             	rsaKey = $someString
             	# OPTIONAL
             	computeSettings = @{
             		# OPTIONAL
             		appId = $someString
             		# OPTIONAL
             		appSecretKey = $someString
             		# OPTIONAL
             		region = $someAzureRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureRegion]) for enum values.
             		# OPTIONAL
             		generalPurposeStorageName = $someString
             		# OPTIONAL
             		generalPurposeStorageContainer = $someString
             		# OPTIONAL
             		resourceGroup = $someString
             		# OPTIONAL
             		virtualNetworkId = $someString
             		# OPTIONAL
             		subnetId = $someString
             		# OPTIONAL
             		securityGroupId = $someString
             		# OPTIONAL
             		computeProxySettings = @{
             			# OPTIONAL
             			proxyServer = $someString
             			# OPTIONAL
             			portNumber = $someInt
             			# OPTIONAL
             			username = $someString
             			# OPTIONAL
             			password = $someString
             			# OPTIONAL
             			protocol = $someString
             		}
             		# OPTIONAL
             		cloudAccountId = $someString
             	}
             	# OPTIONAL
             	proxySettings = @{
             		# OPTIONAL
             		proxyServer = $someString
             		# OPTIONAL
             		portNumber = $someInt
             		# OPTIONAL
             		username = $someString
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		protocol = $someString
             	}
             	# REQUIRED
             	isConsolidationEnabled = $someBoolean
             	# OPTIONAL
             	immutabilitySettings = @{
             		# OPTIONAL
             		lockDurationDays = $someInt
             	}
             	# REQUIRED
             	readerRetrievalMethod = $someReaderRetrievalMethod # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ReaderRetrievalMethod]) for enum values.
             	# OPTIONAL
             	retrievalTier = $someAzureRetrievalTier # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureRetrievalTier]) for enum values.
             	# REQUIRED
             	bypassProxy = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Target
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateSaasAppAad operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: CreateSaasAppAad
             
             $query = New-RscMutationAzure -CreateSaasAppAad
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateAzureSaasAppAadReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateTarget operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: CreateTarget
             
             $query = New-RscMutationAzure -CreateTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	storageAccountName = $someString
             	# REQUIRED
             	accessKey = $someString
             	# REQUIRED
             	containerName = $someString
             	# REQUIRED
             	cloudAccountId = $someString
             	# REQUIRED
             	instanceType = $someInstanceTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.InstanceTypeEnum]) for enum values.
             	# REQUIRED
             	rsaKey = $someString
             	# OPTIONAL
             	computeSettings = @{
             		# OPTIONAL
             		appId = $someString
             		# OPTIONAL
             		appSecretKey = $someString
             		# OPTIONAL
             		region = $someAzureRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureRegion]) for enum values.
             		# OPTIONAL
             		generalPurposeStorageName = $someString
             		# OPTIONAL
             		generalPurposeStorageContainer = $someString
             		# OPTIONAL
             		resourceGroup = $someString
             		# OPTIONAL
             		virtualNetworkId = $someString
             		# OPTIONAL
             		subnetId = $someString
             		# OPTIONAL
             		securityGroupId = $someString
             		# OPTIONAL
             		computeProxySettings = @{
             			# OPTIONAL
             			proxyServer = $someString
             			# OPTIONAL
             			portNumber = $someInt
             			# OPTIONAL
             			username = $someString
             			# OPTIONAL
             			password = $someString
             			# OPTIONAL
             			protocol = $someString
             		}
             		# OPTIONAL
             		cloudAccountId = $someString
             	}
             	# OPTIONAL
             	proxySettings = @{
             		# OPTIONAL
             		proxyServer = $someString
             		# OPTIONAL
             		portNumber = $someInt
             		# OPTIONAL
             		username = $someString
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		protocol = $someString
             	}
             	# REQUIRED
             	isConsolidationEnabled = $someBoolean
             	# OPTIONAL
             	immutabilitySettings = @{
             		# OPTIONAL
             		lockDurationDays = $someInt
             	}
             	# OPTIONAL
             	retrievalTier = $someAzureRetrievalTier # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureRetrievalTier]) for enum values.
             	# REQUIRED
             	bypassProxy = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Target
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteAdDirectory operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: DeleteAdDirectory
             
             $query = New-RscMutationAzure -DeleteAdDirectory
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	workloadFid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateOnDemandJobReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteCloudAccount operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: DeleteCloudAccount
             
             $query = New-RscMutationAzure -DeleteCloudAccount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	sessionId = $someString
             	# REQUIRED
             	features = @(
             		$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	)
             	# REQUIRED
             	azureSubscriptionRubrikIds = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: DeleteAzureCloudAccountReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteCloudAccountExocomputeConfigurations operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: DeleteCloudAccountExocomputeConfigurations
             
             $query = New-RscMutationAzure -DeleteCloudAccountExocomputeConfigurations
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	cloudAccountIds = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: DeleteAzureCloudAccountExocomputeConfigurationsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteCloudAccountWithoutOauth operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: DeleteCloudAccountWithoutOauth
             
             $query = New-RscMutationAzure -DeleteCloudAccountWithoutOauth
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	features = @(
             		$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	)
             	# REQUIRED
             	azureSubscriptionRubrikIds = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: DeleteAzureCloudAccountWithoutOauthReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteCluster operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: DeleteCluster
             
             $query = New-RscMutationAzure -DeleteCluster
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	cloudAccountId = $someString
             	# OPTIONAL
             	clusterName = $someString
             	# OPTIONAL
             	numNodes = $someInt
             	# OPTIONAL
             	resourceGroupName = $someString
             	# OPTIONAL
             	networkResourceGroup = $someString
             	# OPTIONAL
             	isEsType = $someBoolean
             	# OPTIONAL
             	storageAccount = $someString
             	# OPTIONAL
             	containerName = $someString
             	# OPTIONAL
             	storageResourceGroup = $someString
             	# OPTIONAL
             	isNewContainer = $someBoolean
             	# OPTIONAL
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CcProvisionJobReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ExcludeNativeManagedDisksFromSnapshot operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: ExcludeNativeManagedDisksFromSnapshot
             
             $query = New-RscMutationAzure -ExcludeNativeManagedDisksFromSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	virtualMachineRubrikId = $someString
             	# REQUIRED
             	managedDiskExclusions = @(
             		@{
             			# REQUIRED
             			managedDiskRubrikId = $someString
             			# REQUIRED
             			isExcludedFromSnapshot = $someBoolean
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the MapCloudAccountExocomputeSubscription operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: MapCloudAccountExocomputeSubscription
             
             $query = New-RscMutationAzure -MapCloudAccountExocomputeSubscription
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	cloudAccountIds = @(
             		$someString
             	)
             	# REQUIRED
             	exocomputeCloudAccountId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MapAzureCloudAccountExocomputeSubscriptionReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the MapCloudAccountToPersistentStorageLocation operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: MapCloudAccountToPersistentStorageLocation
             
             $query = New-RscMutationAzure -MapCloudAccountToPersistentStorageLocation
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	cloudAccountIds = @(
             		$someString
             	)
             	# REQUIRED
             	persistentStorageId = $someString
             	# REQUIRED
             	azureNativeProtectionFeature = $someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MapAzureCloudAccountToPersistentStorageLocationReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the OauthConsentComplete operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: OauthConsentComplete
             
             $query = New-RscMutationAzure -OauthConsentComplete
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	tenantId = $someString
             	# REQUIRED
             	code = $someString
             	# REQUIRED
             	stateToken = $someString
             	# REQUIRED
             	redirectUrl = $someString
             	# OPTIONAL
             	azureAppId = $someString
             	# OPTIONAL
             	azureAppSecret = $someString
             	# REQUIRED
             	azureCloudType = $someO365AzureCloudType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.O365AzureCloudType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the OauthConsentKickoff operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: OauthConsentKickoff
             
             $query = New-RscMutationAzure -OauthConsentKickoff
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureOauthConsentKickoffReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RestoreAdObjectsWithPasswords operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: RestoreAdObjectsWithPasswords
             
             $query = New-RscMutationAzure -RestoreAdObjectsWithPasswords
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	workloadFid = $someString
             	# REQUIRED
             	snapshotFid = $someString
             	# REQUIRED
             	passwordByUserIdMap = @(
             		@{
             			# REQUIRED
             			userId = $someString
             			# REQUIRED
             			password = $someString
             		}
             	)
             	# REQUIRED
             	objectTypeToIdMap = @(
             		@{
             			# REQUIRED
             			objectId = $someString
             			# REQUIRED
             			azureAdObjectType = $someAzureAdObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureAdObjectType]) for enum values.
             		}
             	)
             	# REQUIRED
             	forceChangePasswordWithMfa = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RestoreAzureAdObjectsWithPasswordsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SetCloudAccountCustomerAppCredentials operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: SetCloudAccountCustomerAppCredentials
             
             $query = New-RscMutationAzure -SetCloudAccountCustomerAppCredentials
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	appId = $someString
             	# REQUIRED
             	appSecretKey = $someString
             	# OPTIONAL
             	appTenantId = $someString
             	# OPTIONAL
             	appName = $someString
             	# OPTIONAL
             	tenantDomainName = $someString
             	# REQUIRED
             	shouldReplace = $someBoolean
             	# REQUIRED
             	azureCloudType = $someAzureCloudType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureCloudType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartAdAppSetup operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: StartAdAppSetup
             
             $query = New-RscMutationAzure -StartAdAppSetup
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	domainName = $someString
             	# REQUIRED
             	region = $someAzureAdRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureAdRegion]) for enum values.
             	# OPTIONAL
             	azureAdApp = @{
             		# OPTIONAL
             		clientId = $someString
             		# OPTIONAL
             		clientSecret = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: StartAzureAdAppSetupReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartAdAppUpdate operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: StartAdAppUpdate
             
             $query = New-RscMutationAzure -StartAdAppUpdate
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	workloadFid = $someString
             	# OPTIONAL
             	azureAdApp = @{
             		# OPTIONAL
             		clientId = $someString
             		# OPTIONAL
             		clientSecret = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: StartAzureAdAppUpdateReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartCloudAccountOauth operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: StartCloudAccountOauth
             
             $query = New-RscMutationAzure -StartCloudAccountOauth
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	tenantDomainName = $someString
             	# OPTIONAL
             	azureCloudType = $someAzureCloudType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureCloudType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: StartAzureCloudAccountOauthReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartCreateNativeManagedDiskSnapshotsJob operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: StartCreateNativeManagedDiskSnapshotsJob
             
             $query = New-RscMutationAzure -StartCreateNativeManagedDiskSnapshotsJob
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	managedDiskRubrikIds = @(
             		$someString
             	)
             	# OPTIONAL
             	retentionSlaId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartCreateNativeVirtualMachineSnapshotsJob operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: StartCreateNativeVirtualMachineSnapshotsJob
             
             $query = New-RscMutationAzure -StartCreateNativeVirtualMachineSnapshotsJob
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	virtualMachineRubrikIds = @(
             		$someString
             	)
             	# OPTIONAL
             	retentionSlaId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartDisableCloudAccountJob operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: StartDisableCloudAccountJob
             
             $query = New-RscMutationAzure -StartDisableCloudAccountJob
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	# REQUIRED
             	cloudAccountIds = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartDisableNativeSubscriptionProtectionJob operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: StartDisableNativeSubscriptionProtectionJob
             
             $query = New-RscMutationAzure -StartDisableNativeSubscriptionProtectionJob
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	azureSubscriptionRubrikId = $someString
             	# REQUIRED
             	shouldDeleteNativeSnapshots = $someBoolean
             	# REQUIRED
             	azureNativeProtectionFeature = $someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartExportNativeManagedDiskJob operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: StartExportNativeManagedDiskJob
             
             $query = New-RscMutationAzure -StartExportNativeManagedDiskJob
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snapshotId = $someString
             	# REQUIRED
             	diskName = $someString
             	# OPTIONAL
             	diskEncryptionSetNativeId = $someString
             	# REQUIRED
             	diskStorageTier = $someAzureNativeManagedDiskType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeManagedDiskType]) for enum values.
             	# REQUIRED
             	diskSize = $someInt
             	# REQUIRED
             	resourceGroup = $someString
             	# REQUIRED
             	destinationRegion = $someAzureNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeRegion]) for enum values.
             	# OPTIONAL
             	destinationAvailabilityZone = $someString
             	# OPTIONAL
             	destinationSubscriptionRubrikId = $someString
             	# REQUIRED
             	shouldExportTags = $someBoolean
             	# REQUIRED
             	shouldReplaceAttachedManagedDisk = $someBoolean
             	# OPTIONAL
             	shouldUseReplica = $someBoolean
             	# OPTIONAL
             	snapshotType = $someAzureSnapshotType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureSnapshotType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartExportNativeVirtualMachineJob operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: StartExportNativeVirtualMachineJob
             
             $query = New-RscMutationAzure -StartExportNativeVirtualMachineJob
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snapshotId = $someString
             	# REQUIRED
             	virtualMachineName = $someString
             	# OPTIONAL
             	diskEncryptionSetNativeId = $someString
             	# REQUIRED
             	resourceGroupName = $someString
             	# REQUIRED
             	destinationRegion = $someAzureNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeRegion]) for enum values.
             	# OPTIONAL
             	destinationAvailabilityZone = $someString
             	# OPTIONAL
             	destinationSubscriptionRubrikId = $someString
             	# REQUIRED
             	virtualMachineSize = $someString
             	# REQUIRED
             	subnetNativeId = $someString
             	# OPTIONAL
             	networkSecurityGroupNativeId = $someString
             	# REQUIRED
             	shouldExportTags = $someBoolean
             	# REQUIRED
             	shouldPowerOff = $someBoolean
             	# OPTIONAL
             	shouldUseReplica = $someBoolean
             	# OPTIONAL
             	availabilitySetNativeId = $someString
             	# OPTIONAL
             	shouldEnableAcceleratedNetworking = $someBoolean
             	# OPTIONAL
             	snapshotType = $someAzureSnapshotType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureSnapshotType]) for enum values.
             	# OPTIONAL
             	recoveryDiskIds = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartExportSqlDatabaseDbJob operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: StartExportSqlDatabaseDbJob
             
             $query = New-RscMutationAzure -StartExportSqlDatabaseDbJob
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	sourceDatabaseRubrikId = $someString
             	# REQUIRED
             	destinationDatabaseName = $someString
             	# OPTIONAL
             	destinationServerRubrikId = $someString
             	# OPTIONAL
             	elasticPoolName = $someString
             	# REQUIRED
             	shouldExportTags = $someBoolean
             	# OPTIONAL
             	azureSqlDatabaseDbPitExportInput = @{
             		# REQUIRED
             		restorePointInTime = $someDateTime
             		# OPTIONAL
             		dbBackupRedundancy = $someAzureSqlBackupStorageRedundancyType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureSqlBackupStorageRedundancyType]) for enum values.
             	}
             	# OPTIONAL
             	azureSqlDatabaseDbLtrExportInput = @{
             		# REQUIRED
             		sourceSnapshotRubrikId = $someString
             		# REQUIRED
             		destinationResourceGroupName = $someString
             		# REQUIRED
             		destinationServerName = $someString
             		# REQUIRED
             		destinationRegionName = $someString
             		# OPTIONAL
             		dbBackupRedundancy = $someAzureSqlBackupStorageRedundancyType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureSqlBackupStorageRedundancyType]) for enum values.
             	}
             	# OPTIONAL
             	persistentBackupExportInput = @{
             		# REQUIRED
             		sourceSnapshotRubrikId = $someString
             		# OPTIONAL
             		destinationServerCredentials = @{
             			# REQUIRED
             			login = $someString
             			# REQUIRED
             			password = $someString
             		}
             		# OPTIONAL
             		authMechanism = $someSqlAuthenticationMechanism # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SqlAuthenticationMechanism]) for enum values.
             		# OPTIONAL
             		sessionId = $someString
             		# OPTIONAL
             		dbBackupRedundancy = $someAzureSqlBackupStorageRedundancyType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureSqlBackupStorageRedundancyType]) for enum values.
             	}
             	# OPTIONAL
             	serviceTier = $someString
             	# OPTIONAL
             	serviceObjectiveName = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartExportSqlManagedInstanceDbJob operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: StartExportSqlManagedInstanceDbJob
             
             $query = New-RscMutationAzure -StartExportSqlManagedInstanceDbJob
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	sourceManagedInstanceDatabaseRubrikId = $someString
             	# OPTIONAL
             	destinationManagedInstanceRubrikId = $someString
             	# REQUIRED
             	destinationDatabaseName = $someString
             	# REQUIRED
             	destinationManagedInstanceName = $someString
             	# REQUIRED
             	destinationResourceGroupName = $someString
             	# OPTIONAL
             	azureSqlManagedInstanceDbPitExportInput = @{
             		# REQUIRED
             		restorePointInTime = $someDateTime
             	}
             	# OPTIONAL
             	azureSqlManagedInstanceDbLtrExportInput = @{
             		# REQUIRED
             		sourceSnapshotRubrikId = $someString
             		# REQUIRED
             		destinationRegionName = $someString
             	}
             	# OPTIONAL
             	persistentBackupExportInput = @{
             		# REQUIRED
             		sourceSnapshotRubrikId = $someString
             		# OPTIONAL
             		destinationServerCredentials = @{
             			# REQUIRED
             			login = $someString
             			# REQUIRED
             			password = $someString
             		}
             		# OPTIONAL
             		authMechanism = $someSqlAuthenticationMechanism # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SqlAuthenticationMechanism]) for enum values.
             		# OPTIONAL
             		sessionId = $someString
             		# OPTIONAL
             		dbBackupRedundancy = $someAzureSqlBackupStorageRedundancyType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureSqlBackupStorageRedundancyType]) for enum values.
             	}
             	# OPTIONAL
             	serviceTier = $someString
             	# OPTIONAL
             	serviceObjectiveName = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartRefreshNativeSubscriptionsJob operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: StartRefreshNativeSubscriptionsJob
             
             $query = New-RscMutationAzure -StartRefreshNativeSubscriptionsJob
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	azureSubscriptionRubrikIds = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartRestoreNativeVirtualMachineJob operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: StartRestoreNativeVirtualMachineJob
             
             $query = New-RscMutationAzure -StartRestoreNativeVirtualMachineJob
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snapshotId = $someString
             	# REQUIRED
             	shouldPowerOn = $someBoolean
             	# REQUIRED
             	shouldRestoreTags = $someBoolean
             	# OPTIONAL
             	snapshotTypeToUseIfSourceExpired = $someSnapshotTypeForRestoreIfSourceExpired # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnapshotTypeForRestoreIfSourceExpired]) for enum values.
             	# OPTIONAL
             	recoveryDiskIds = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UnmapCloudAccountExocomputeSubscription operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: UnmapCloudAccountExocomputeSubscription
             
             $query = New-RscMutationAzure -UnmapCloudAccountExocomputeSubscription
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	cloudAccountIds = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UnmapAzureCloudAccountExocomputeSubscriptionReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UnmapPersistentStorageSubscription operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: UnmapPersistentStorageSubscription
             
             $query = New-RscMutationAzure -UnmapPersistentStorageSubscription
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	applicationCloudAccountIds = @(
             		$someString
             	)
             	# REQUIRED
             	feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	# REQUIRED
             	unmappingValidationType = $someUnmappingValidationType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmappingValidationType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateAccount operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: UpdateAccount
             
             $query = New-RscMutationAzure -UpdateAccount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	name = $someString
             	# OPTIONAL
             	description = $someString
             	# OPTIONAL
             	subscriptionId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CloudAccount
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateAutomaticTargetMapping operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: UpdateAutomaticTargetMapping
             
             $query = New-RscMutationAzure -UpdateAutomaticTargetMapping
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	name = $someString
             	# OPTIONAL
             	storageAccountName = $someString
             	# OPTIONAL
             	accessKey = $someString
             	# OPTIONAL
             	cloudAccountId = $someString
             	# OPTIONAL
             	computeSettings = @{
             		# OPTIONAL
             		appId = $someString
             		# OPTIONAL
             		appSecretKey = $someString
             		# OPTIONAL
             		region = $someAzureRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureRegion]) for enum values.
             		# OPTIONAL
             		generalPurposeStorageName = $someString
             		# OPTIONAL
             		generalPurposeStorageContainer = $someString
             		# OPTIONAL
             		resourceGroup = $someString
             		# OPTIONAL
             		virtualNetworkId = $someString
             		# OPTIONAL
             		subnetId = $someString
             		# OPTIONAL
             		securityGroupId = $someString
             		# OPTIONAL
             		computeProxySettings = @{
             			# OPTIONAL
             			proxyServer = $someString
             			# OPTIONAL
             			portNumber = $someInt
             			# OPTIONAL
             			username = $someString
             			# OPTIONAL
             			password = $someString
             			# OPTIONAL
             			protocol = $someString
             		}
             		# OPTIONAL
             		cloudAccountId = $someString
             	}
             	# OPTIONAL
             	proxySettings = @{
             		# OPTIONAL
             		proxyServer = $someString
             		# OPTIONAL
             		portNumber = $someInt
             		# OPTIONAL
             		username = $someString
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		protocol = $someString
             	}
             	# OPTIONAL
             	clusterUuidList = @(
             		$someString
             	)
             	# OPTIONAL
             	isConsolidationEnabled = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: TargetMapping
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateCloudAccount operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: UpdateCloudAccount
             
             $query = New-RscMutationAzure -UpdateCloudAccount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	subscriptions = @(
             		@{
             			# OPTIONAL
             			id = $someString
             			# OPTIONAL
             			name = $someString
             		}
             	)
             	# REQUIRED
             	features = @(
             		$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	)
             	# OPTIONAL
             	regionsToAdd = @(
             		$someAzureCloudAccountRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureCloudAccountRegion]) for enum values.
             	)
             	# OPTIONAL
             	regionsToRemove = @(
             		$someAzureCloudAccountRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureCloudAccountRegion]) for enum values.
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateAzureCloudAccountReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateCloudNativeRcvStorageSetting operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: UpdateCloudNativeRcvStorageSetting
             
             $query = New-RscMutationAzure -UpdateCloudNativeRcvStorageSetting
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	name = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateCloudNativeRcvAzureStorageSettingReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateCloudNativeStorageSetting operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: UpdateCloudNativeStorageSetting
             
             $query = New-RscMutationAzure -UpdateCloudNativeStorageSetting
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	storageAccountTags = @{
             		# REQUIRED
             		tagList = @(
             			@{
             				# REQUIRED
             				key = $someString
             				# REQUIRED
             				value = $someString
             			}
             		)
             	}
             	# REQUIRED
             	storageTier = $someAzureStorageTier # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureStorageTier]) for enum values.
             	# OPTIONAL
             	cmkInfo = @(
             		@{
             			# OPTIONAL
             			keyVaultName = $someString
             			# OPTIONAL
             			keyName = $someString
             			# OPTIONAL
             			region = $someAzureRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureRegion]) for enum values.
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateCloudNativeAzureStorageSettingReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateCustomerAppPermissionForSql operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: UpdateCustomerAppPermissionForSql
             
             $query = New-RscMutationAzure -UpdateCustomerAppPermissionForSql
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateTarget operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: UpdateTarget
             
             $query = New-RscMutationAzure -UpdateTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	name = $someString
             	# OPTIONAL
             	storageAccountName = $someString
             	# OPTIONAL
             	accessKey = $someString
             	# OPTIONAL
             	cloudAccountId = $someString
             	# OPTIONAL
             	computeSettings = @{
             		# OPTIONAL
             		appId = $someString
             		# OPTIONAL
             		appSecretKey = $someString
             		# OPTIONAL
             		region = $someAzureRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureRegion]) for enum values.
             		# OPTIONAL
             		generalPurposeStorageName = $someString
             		# OPTIONAL
             		generalPurposeStorageContainer = $someString
             		# OPTIONAL
             		resourceGroup = $someString
             		# OPTIONAL
             		virtualNetworkId = $someString
             		# OPTIONAL
             		subnetId = $someString
             		# OPTIONAL
             		securityGroupId = $someString
             		# OPTIONAL
             		computeProxySettings = @{
             			# OPTIONAL
             			proxyServer = $someString
             			# OPTIONAL
             			portNumber = $someInt
             			# OPTIONAL
             			username = $someString
             			# OPTIONAL
             			password = $someString
             			# OPTIONAL
             			protocol = $someString
             		}
             		# OPTIONAL
             		cloudAccountId = $someString
             	}
             	# OPTIONAL
             	proxySettings = @{
             		# OPTIONAL
             		proxyServer = $someString
             		# OPTIONAL
             		portNumber = $someInt
             		# OPTIONAL
             		username = $someString
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		protocol = $someString
             	}
             	# OPTIONAL
             	isConsolidationEnabled = $someBoolean
             	# OPTIONAL
             	immutabilitySettings = @{
             		# OPTIONAL
             		lockDurationDays = $someInt
             	}
             	# OPTIONAL
             	retrievalTier = $someAzureRetrievalTier # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureRetrievalTier]) for enum values.
             	# REQUIRED
             	bypassProxy = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Target
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpgradeCloudAccount operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: UpgradeCloudAccount
             
             $query = New-RscMutationAzure -UpgradeCloudAccount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	sessionId = $someString
             	# REQUIRED
             	features = @(
             		$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	)
             	# OPTIONAL
             	featuresToUpgrade = @(
             		@{
             			# REQUIRED
             			featureType = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             			# REQUIRED
             			permissionsGroups = @(
             				$somePermissionsGroup # Call [Enum]::GetValues([RubrikSecurityCloud.Types.PermissionsGroup]) for enum values.
             			)
             		}
             	)
             	# REQUIRED
             	azureSubscriptionRubrikIds = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpgradeAzureCloudAccountReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpgradeCloudAccountPermissionsWithoutOauth operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: UpgradeCloudAccountPermissionsWithoutOauth
             
             $query = New-RscMutationAzure -UpgradeCloudAccountPermissionsWithoutOauth
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	cloudAccountId = $someString
             	# REQUIRED
             	feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	# OPTIONAL
             	featureToUpgrade = @{
             		# REQUIRED
             		featureType = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             		# REQUIRED
             		permissionsGroups = @(
             			$somePermissionsGroup # Call [Enum]::GetValues([RubrikSecurityCloud.Types.PermissionsGroup]) for enum values.
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpgradeAzureCloudAccountPermissionsWithoutOauthReply
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationAzureO365">
             <summary>
             Create a new RscQuery object for any of the 1
             operations in the 'AzureO365' API domain:
             ['SetupExocompute'].
             </summary>
             <description>
             New-RscMutationAzureO365 creates a new
             mutation object for operations
             in the 'AzureO365' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 1 operations
             in the 'AzureO365' API domain. Select the operation this
             query is for by specifying the appropriate switch parameter;
             one of: -SetupExocompute.
             Alternatively, you can specify the operation by setting the
             -Op parameter, for example: -Op SetupExocompute,
             which is equivalent to specifying -SetupExocompute.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationAzureO365 -SetupExocompute).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationAzureO365 -SetupExocompute).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the SetupExocompute operation
             of the 'AzureO365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureO365
             # API Operation: SetupExocompute
             
             $query = New-RscMutationAzureO365 -SetupExocompute
             
             # REQUIRED
             $query.Var.tenantId = $someString
             # REQUIRED
             $query.Var.subscriptionId = $someString
             # REQUIRED
             $query.Var.exocomputeConfig = @{
             	# REQUIRED
             	regionName = $someString
             	# OPTIONAL
             	newGroupConfig = @{
             		# OPTIONAL
             		name = $someString
             	}
             	# OPTIONAL
             	existingGroupConfig = @{
             		# OPTIONAL
             		name = $someString
             	}
             	# OPTIONAL
             	newComputeConfig = @{
             		# OPTIONAL
             		vnetName = $someString
             		# OPTIONAL
             		subnetName = $someString
             		# OPTIONAL
             		securityGroupName = $someString
             	}
             	# OPTIONAL
             	existingComputeConfig = @{
             		# OPTIONAL
             		vnetId = $someString
             		# OPTIONAL
             		subnetId = $someString
             	}
             	# OPTIONAL
             	newStorageAccountConfig = @{
             		# OPTIONAL
             		name = $someString
             		# OPTIONAL
             		tier = $someStorageAccountTier # Call [Enum]::GetValues([RubrikSecurityCloud.Types.StorageAccountTier]) for enum values.
             		# OPTIONAL
             		sku = $someStorageAccountSku # Call [Enum]::GetValues([RubrikSecurityCloud.Types.StorageAccountSku]) for enum values.
             		# OPTIONAL
             		storages = @(
             			@{
             				# OPTIONAL
             				name = $someString
             				# OPTIONAL
             				tier = $someStorageAccountTier # Call [Enum]::GetValues([RubrikSecurityCloud.Types.StorageAccountTier]) for enum values.
             				# OPTIONAL
             				sku = $someStorageAccountSku # Call [Enum]::GetValues([RubrikSecurityCloud.Types.StorageAccountSku]) for enum values.
             				# OPTIONAL
             				containerImmutabilityStatus = $someColossusStorageContainerImmutabilityStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ColossusStorageContainerImmutabilityStatus]) for enum values.
             				# OPTIONAL
             				versioningEnabled = $someBoolean
             			}
             		)
             	}
             	# OPTIONAL
             	existingStorageAccountConfig = @{
             		# OPTIONAL
             		id = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SetupAzureO365ExocomputeResp
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationCassandra">
             <summary>
             Create a new RscQuery object for any of the 5
             operations in the 'Cassandra' API domain:
             BulkDeleteSources, CreateSource, DeleteSource, RecoverSource, or UpdateSource.
             </summary>
             <description>
             New-RscMutationCassandra creates a new
             mutation object for operations
             in the 'Cassandra' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 5 operations
             in the 'Cassandra' API domain. Select the operation this
             query is for by specifying the appropriate switch parameter;
             one of: -BulkDeleteSources, -CreateSource, -DeleteSource, -RecoverSource, -UpdateSource.
             Alternatively, you can specify the operation by setting the
             -Op parameter, for example: -Op BulkDeleteSources,
             which is equivalent to specifying -BulkDeleteSources.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationCassandra -BulkDeleteSources).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationCassandra -BulkDeleteSources).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the BulkDeleteSources operation
             of the 'Cassandra' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cassandra
             # API Operation: BulkDeleteSources
             
             $query = New-RscMutationCassandra -BulkDeleteSources
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	sourceType = $someV2BulkDeleteMosaicSourcesRequestSourceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.V2BulkDeleteMosaicSourcesRequestSourceType]) for enum values.
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	sourceData = @{
             		# OPTIONAL
             		async = $someBoolean
             		# REQUIRED
             		sourceNames = @(
             			$someString
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MosaicAsyncResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateSource operation
             of the 'Cassandra' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cassandra
             # API Operation: CreateSource
             
             $query = New-RscMutationCassandra -CreateSource
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	sourceData = @{
             		# OPTIONAL
             		async = $someBoolean
             		# OPTIONAL
             		cassandraYaml = @(
             			$someString
             		)
             		# OPTIONAL
             		dseYaml = @(
             			$someString
             		)
             		# OPTIONAL
             		enableSsl = $someBoolean
             		# OPTIONAL
             		httpsCertificate = $someString
             		# OPTIONAL
             		ignoreSecondaries = @(
             			$someString
             		)
             		# OPTIONAL
             		jmxPassword = $someString
             		# OPTIONAL
             		jmxUser = $someString
             		# OPTIONAL
             		parameterEncoded = $someBoolean
             		# OPTIONAL
             		sourceAuthKey = $someString
             		# OPTIONAL
             		sourceAuthKeyfile = $someString
             		# OPTIONAL
             		sourceAuthPassphrase = $someString
             		# OPTIONAL
             		sourceDriverPassword = $someString
             		# OPTIONAL
             		sourceDriverUser = $someString
             		# OPTIONAL
             		sourceHttpsPort = $someString
             		# OPTIONAL
             		sourcePassword = $someString
             		# OPTIONAL
             		sourcePort = $someString
             		# OPTIONAL
             		sourceRpcPort = $someString
             		# OPTIONAL
             		sourceSshPort = $someString
             		# OPTIONAL
             		sourceUser = $someString
             		# OPTIONAL
             		sslCaCerts = $someString
             		# OPTIONAL
             		sslCertfile = $someString
             		# OPTIONAL
             		sslKeyfile = $someString
             		# REQUIRED
             		sourceType = $someSourceSourceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SourceSourceType]) for enum values.
             		# OPTIONAL
             		sslCertReqs = $someSourceSslCertReqs # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SourceSslCertReqs]) for enum values.
             		# REQUIRED
             		sourceIp = @(
             			$someString
             		)
             		# REQUIRED
             		sourceName = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MosaicAsyncResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteSource operation
             of the 'Cassandra' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cassandra
             # API Operation: DeleteSource
             
             $query = New-RscMutationCassandra -DeleteSource
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	sourceType = $someV2DeleteMosaicSourceRequestSourceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.V2DeleteMosaicSourceRequestSourceType]) for enum values.
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	sourceName = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MosaicAsyncResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RecoverSource operation
             of the 'Cassandra' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cassandra
             # API Operation: RecoverSource
             
             $query = New-RscMutationCassandra -RecoverSource
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	recoveryData = @{
             		# OPTIONAL
             		destinationManagementObjects = @{
             			# OPTIONAL
             			databases = @(
             				@{
             					# OPTIONAL
             					dbName = $someString
             					# OPTIONAL
             					tables = @(
             						$someString
             					)
             				}
             			)
             		}
             		# OPTIONAL
             		destinationSourceName = $someString
             		# OPTIONAL
             		keyspaceConfig = $someString
             		# OPTIONAL
             		maxDiskUsage = $someString
             		# OPTIONAL
             		restoreDbUserPwd = $someString
             		# OPTIONAL
             		restoreDbUsername = $someString
             		# OPTIONAL
             		startTimestamp = $someInt
             		# OPTIONAL
             		targetEncryptionKey = $someString
             		# OPTIONAL
             		targetQuery = $someString
             		# OPTIONAL
             		sourceType = $someMosaicRetrieveRequestSourceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MosaicRetrieveRequestSourceType]) for enum values.
             		# REQUIRED
             		destinationPath = $someString
             		# REQUIRED
             		managementObjects = @{
             			# OPTIONAL
             			databases = @(
             				@{
             					# OPTIONAL
             					dbName = $someString
             					# OPTIONAL
             					tables = @(
             						$someString
             					)
             				}
             			)
             		}
             		# REQUIRED
             		parameterEncoded = $someBoolean
             		# REQUIRED
             		sourceName = $someString
             		# REQUIRED
             		versionTime = $someInt
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MosaicAsyncResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateSource operation
             of the 'Cassandra' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cassandra
             # API Operation: UpdateSource
             
             $query = New-RscMutationCassandra -UpdateSource
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	sourceData = @{
             		# OPTIONAL
             		async = $someBoolean
             		# OPTIONAL
             		cassandraYaml = @(
             			$someString
             		)
             		# OPTIONAL
             		dseYaml = @(
             			$someString
             		)
             		# OPTIONAL
             		enableSsl = $someBoolean
             		# OPTIONAL
             		httpsCertificate = $someString
             		# OPTIONAL
             		ignoreSecondaries = @(
             			$someString
             		)
             		# OPTIONAL
             		jmxPassword = $someString
             		# OPTIONAL
             		jmxUser = $someString
             		# OPTIONAL
             		parameterEncoded = $someBoolean
             		# OPTIONAL
             		sourceAuthKey = $someString
             		# OPTIONAL
             		sourceAuthKeyfile = $someString
             		# OPTIONAL
             		sourceAuthPassphrase = $someString
             		# OPTIONAL
             		sourceDriverPassword = $someString
             		# OPTIONAL
             		sourceDriverUser = $someString
             		# OPTIONAL
             		sourceHttpsPort = $someString
             		# OPTIONAL
             		sourcePassword = $someString
             		# OPTIONAL
             		sourcePort = $someString
             		# OPTIONAL
             		sourceRpcPort = $someString
             		# OPTIONAL
             		sourceSshPort = $someString
             		# OPTIONAL
             		sourceUser = $someString
             		# OPTIONAL
             		sslCaCerts = $someString
             		# OPTIONAL
             		sslCertfile = $someString
             		# OPTIONAL
             		sslKeyfile = $someString
             		# REQUIRED
             		sourceType = $someSourceSourceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SourceSourceType]) for enum values.
             		# OPTIONAL
             		sslCertReqs = $someSourceSslCertReqs # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SourceSslCertReqs]) for enum values.
             		# REQUIRED
             		sourceIp = @(
             			$someString
             		)
             		# REQUIRED
             		sourceName = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MosaicAsyncResponse
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationCluster">
             <summary>
             Create a new RscQuery object for any of the 12
             operations in the 'Cluster' API domain:
             AddNodesToCloud, ArchiveK8s, BulkDeleteFailover, CreateFailover, CreateK8s, DeleteFailover, RecoverCloud, RefreshK8s, RegisterCloud, RemoveCdm, UpdateDatabaseLogReportingProperties, or UpdateFailover.
             </summary>
             <description>
             New-RscMutationCluster creates a new
             mutation object for operations
             in the 'Cluster' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 12 operations
             in the 'Cluster' API domain. Select the operation this
             query is for by specifying the appropriate switch parameter;
             one of: -AddNodesToCloud, -ArchiveK8s, -BulkDeleteFailover, -CreateFailover, -CreateK8s, -DeleteFailover, -RecoverCloud, -RefreshK8s, -RegisterCloud, -RemoveCdm, -UpdateDatabaseLogReportingProperties, -UpdateFailover.
             Alternatively, you can specify the operation by setting the
             -Op parameter, for example: -Op AddNodesToCloud,
             which is equivalent to specifying -AddNodesToCloud.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationCluster -AddNodesToCloud).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationCluster -AddNodesToCloud).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AddNodesToCloud operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: AddNodesToCloud
             
             $query = New-RscMutationCluster -AddNodesToCloud
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	numberOfNodes = $someInt
             	# OPTIONAL
             	shouldKeepResourcesOnFailure = $someBoolean
             	# REQUIRED
             	cloudAccountId = $someString
             	# REQUIRED
             	vendor = $someCcpVendorType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CcpVendorType]) for enum values.
             	# REQUIRED
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CcProvisionJobReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ArchiveK8s operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: ArchiveK8s
             
             $query = New-RscMutationCluster -ArchiveK8s
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ArchiveK8sClusterReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BulkDeleteFailover operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: BulkDeleteFailover
             
             $query = New-RscMutationCluster -BulkDeleteFailover
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	preserveSnapshots = $someBoolean
             	# REQUIRED
             	ids = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ResponseSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateFailover operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: CreateFailover
             
             $query = New-RscMutationCluster -CreateFailover
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		configuredSlaDomainId = $someString
             		# REQUIRED
             		hostIds = @(
             			$someString
             		)
             		# REQUIRED
             		name = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateFailoverClusterReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateK8s operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: CreateK8s
             
             $query = New-RscMutationCluster -CreateK8s
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	cdmClusterId = $someString
             	# REQUIRED
             	hostList = @(
             		$someString
             	)
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	port = $someInt
             	# REQUIRED
             	rbsPortRanges = @(
             		@{
             			# OPTIONAL
             			portMin = $someInt
             			# OPTIONAL
             			portMax = $someInt
             		}
             	)
             	# OPTIONAL
             	userDrivenPortRanges = @(
             		@{
             			# OPTIONAL
             			portMin = $someInt
             			# OPTIONAL
             			portMax = $someInt
             		}
             	)
             	# REQUIRED
             	type = $someK8sClusterProtoType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.K8sClusterProtoType]) for enum values.
             	# OPTIONAL
             	proxyUrl = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateK8sClusterReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteFailover operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: DeleteFailover
             
             $query = New-RscMutationCluster -DeleteFailover
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	preserveSnapshots = $someBoolean
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ResponseSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RecoverCloud operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: RecoverCloud
             
             $query = New-RscMutationCluster -RecoverCloud
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	adminPassword = $someString
             	# OPTIONAL
             	userEmail = $someString
             	# REQUIRED
             	cloudAccountId = $someString
             	# REQUIRED
             	clusterUuid = $someString
             	# OPTIONAL
             	azureEsResourceGroup = $someString
             	# OPTIONAL
             	azureVmConfig = @{
             		# OPTIONAL
             		resourceGroup = $someString
             		# OPTIONAL
             		cdmVersion = $someString
             		# OPTIONAL
             		location = $someString
             		# OPTIONAL
             		nodeSizeGb = $someInt
             		# OPTIONAL
             		networkResourceGroup = $someString
             		# OPTIONAL
             		vnetResourceGroup = $someString
             		# OPTIONAL
             		networkSecurityGroup = $someString
             		# OPTIONAL
             		networkSecurityResourceGroup = $someString
             		# OPTIONAL
             		vnet = $someString
             		# OPTIONAL
             		subnet = $someString
             		# OPTIONAL
             		tags = $someString
             		# OPTIONAL
             		vmImage = $someString
             		# OPTIONAL
             		cdmProduct = $someString
             		# OPTIONAL
             		vmType = $someVmType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.VmType]) for enum values.
             		# OPTIONAL
             		instanceType = $someAzureInstanceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureInstanceType]) for enum values.
             	}
             	# OPTIONAL
             	awsVmConfig = @{
             		# OPTIONAL
             		cdmVersion = $someString
             		# OPTIONAL
             		nodeSizeGb = $someInt
             		# OPTIONAL
             		subnet = $someString
             		# OPTIONAL
             		tags = $someString
             		# OPTIONAL
             		imageId = $someString
             		# OPTIONAL
             		instanceProfileName = $someString
             		# OPTIONAL
             		cdmProduct = $someString
             		# OPTIONAL
             		vmType = $someVmType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.VmType]) for enum values.
             		# OPTIONAL
             		securityGroups = @(
             			$someString
             		)
             		# OPTIONAL
             		instanceType = $someAwsInstanceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsInstanceType]) for enum values.
             	}
             	# OPTIONAL
             	awsRegion = $someString
             	# REQUIRED
             	shouldDisableAwsApiTermination = $someBoolean
             	# REQUIRED
             	shouldKeepClusterOnFailure = $someBoolean
             	# OPTIONAL
             	ntpServers = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CcProvisionJobReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RefreshK8s operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: RefreshK8s
             
             $query = New-RscMutationCluster -RefreshK8s
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	k8sClusterId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateOnDemandJobReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RegisterCloud operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: RegisterCloud
             
             $query = New-RscMutationCluster -RegisterCloud
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RegisterCloudClusterReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RemoveCdm operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: RemoveCdm
             
             $query = New-RscMutationCluster -RemoveCdm
             
             # REQUIRED
             $query.Var.clusterUUID = $someString
             # REQUIRED
             $query.Var.isForce = $someBoolean
             # OPTIONAL
             $query.Var.expireInDays = $someInt64
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateDatabaseLogReportingProperties operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: UpdateDatabaseLogReportingProperties
             
             $query = New-RscMutationCluster -UpdateDatabaseLogReportingProperties
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	properties = @{
             		# OPTIONAL
             		enableDelayNotification = $someBoolean
             		# OPTIONAL
             		logDelayThresholdInMin = $someInt64
             		# OPTIONAL
             		logDelayNotificationFrequencyInMin = $someInt64
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: DbLogReportProperties
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateFailover operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: UpdateFailover
             
             $query = New-RscMutationCluster -UpdateFailover
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	updateProperties = @{
             		# OPTIONAL
             		configuredSlaDomainId = $someString
             		# REQUIRED
             		hostIds = @(
             			$someString
             		)
             		# REQUIRED
             		name = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateFailoverClusterReply
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationDb2">
             <summary>
             Create a new RscQuery object for any of the 11
             operations in the 'Db2' API domain:
             AddInstance, CreateOnDemandBackup, DeleteDatabase, DeleteInstance, DiscoverInstance, DownloadSnapshot, DownloadSnapshotsForPointInTimeRecovery, ExpireDownloadedSnapshots, PatchDatabase, PatchInstance, or RefreshDatabase.
             </summary>
             <description>
             New-RscMutationDb2 creates a new
             mutation object for operations
             in the 'Db2' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 11 operations
             in the 'Db2' API domain. Select the operation this
             query is for by specifying the appropriate switch parameter;
             one of: -AddInstance, -CreateOnDemandBackup, -DeleteDatabase, -DeleteInstance, -DiscoverInstance, -DownloadSnapshot, -DownloadSnapshotsForPointInTimeRecovery, -ExpireDownloadedSnapshots, -PatchDatabase, -PatchInstance, -RefreshDatabase.
             Alternatively, you can specify the operation by setting the
             -Op parameter, for example: -Op AddInstance,
             which is equivalent to specifying -AddInstance.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationDb2 -AddInstance).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationDb2 -AddInstance).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AddInstance operation
             of the 'Db2' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Db2
             # API Operation: AddInstance
             
             $query = New-RscMutationDb2 -AddInstance
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	db2InstanceRequestConfig = @{
             		# REQUIRED
             		hostIds = @(
             			$someString
             		)
             		# REQUIRED
             		instanceName = $someString
             		# REQUIRED
             		password = $someString
             		# REQUIRED
             		username = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AddDb2InstanceReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateOnDemandBackup operation
             of the 'Db2' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Db2
             # API Operation: CreateOnDemandBackup
             
             $query = New-RscMutationDb2 -CreateOnDemandBackup
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	config = @{
             		# OPTIONAL
             		slaId = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteDatabase operation
             of the 'Db2' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Db2
             # API Operation: DeleteDatabase
             
             $query = New-RscMutationDb2 -DeleteDatabase
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteInstance operation
             of the 'Db2' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Db2
             # API Operation: DeleteInstance
             
             $query = New-RscMutationDb2 -DeleteInstance
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DiscoverInstance operation
             of the 'Db2' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Db2
             # API Operation: DiscoverInstance
             
             $query = New-RscMutationDb2 -DiscoverInstance
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DownloadSnapshot operation
             of the 'Db2' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Db2
             # API Operation: DownloadSnapshot
             
             $query = New-RscMutationDb2 -DownloadSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	locationId = $someString
             	# REQUIRED
             	snapshotId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DownloadSnapshotsForPointInTimeRecovery operation
             of the 'Db2' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Db2
             # API Operation: DownloadSnapshotsForPointInTimeRecovery
             
             $query = New-RscMutationDb2 -DownloadSnapshotsForPointInTimeRecovery
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	downloadConfig = @{
             		# OPTIONAL
             		pointInTime = $someDateTime
             		# REQUIRED
             		preferredLocationId = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ExpireDownloadedSnapshots operation
             of the 'Db2' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Db2
             # API Operation: ExpireDownloadedSnapshots
             
             $query = New-RscMutationDb2 -ExpireDownloadedSnapshots
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	afterTime = $someDateTime
             	# OPTIONAL
             	beforeTime = $someDateTime
             	# OPTIONAL
             	shouldExpireLogsOnly = $someBoolean
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PatchDatabase operation
             of the 'Db2' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Db2
             # API Operation: PatchDatabase
             
             $query = New-RscMutationDb2 -PatchDatabase
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	db2DatabaseConfig = @{
             		# OPTIONAL
             		backupParallelism = $someInt
             		# OPTIONAL
             		backupSessions = $someInt
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: PatchDb2DatabaseReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PatchInstance operation
             of the 'Db2' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Db2
             # API Operation: PatchInstance
             
             $query = New-RscMutationDb2 -PatchInstance
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	db2InstanceRequestConfig = @{
             		# OPTIONAL
             		hostIds = @(
             			$someString
             		)
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		username = $someString
             		# OPTIONAL
             		instanceName = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: PatchDb2InstanceReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RefreshDatabase operation
             of the 'Db2' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Db2
             # API Operation: RefreshDatabase
             
             $query = New-RscMutationDb2 -RefreshDatabase
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationHyperv">
             <summary>
             Create a new RscQuery object for any of the 23
             operations in the 'Hyperv' API domain:
             BatchExportVm, BatchInstantRecoverVm, BatchMountVm, BatchOnDemandBackupVm, CreateVirtualMachineSnapshotMount, DeleteAllSnapshots, DeleteVirtualMachineSnapshot, DeleteVirtualMachineSnapshotMount, DownloadSnapshotFromLocation, DownloadVirtualMachineSnapshot, DownloadVirtualMachineSnapshotFiles, ExportVirtualMachine, InstantRecoverVirtualMachineSnapshot, OnDemandSnapshot, RefreshScvmm, RefreshServer, RegisterAgentVirtualMachine, RegisterScvmm, RestoreVirtualMachineSnapshotFiles, ScvmmDelete, ScvmmUpdate, UpdateVirtualMachine, or UpdateVirtualMachineSnapshotMount.
             </summary>
             <description>
             New-RscMutationHyperv creates a new
             mutation object for operations
             in the 'Hyperv' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 23 operations
             in the 'Hyperv' API domain. Select the operation this
             query is for by specifying the appropriate switch parameter;
             one of: -BatchExportVm, -BatchInstantRecoverVm, -BatchMountVm, -BatchOnDemandBackupVm, -CreateVirtualMachineSnapshotMount, -DeleteAllSnapshots, -DeleteVirtualMachineSnapshot, -DeleteVirtualMachineSnapshotMount, -DownloadSnapshotFromLocation, -DownloadVirtualMachineSnapshot, -DownloadVirtualMachineSnapshotFiles, -ExportVirtualMachine, -InstantRecoverVirtualMachineSnapshot, -OnDemandSnapshot, -RefreshScvmm, -RefreshServer, -RegisterAgentVirtualMachine, -RegisterScvmm, -RestoreVirtualMachineSnapshotFiles, -ScvmmDelete, -ScvmmUpdate, -UpdateVirtualMachine, -UpdateVirtualMachineSnapshotMount.
             Alternatively, you can specify the operation by setting the
             -Op parameter, for example: -Op BatchExportVm,
             which is equivalent to specifying -BatchExportVm.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationHyperv -BatchExportVm).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationHyperv -BatchExportVm).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the BatchExportVm operation
             of the 'Hyperv' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: BatchExportVm
             
             $query = New-RscMutationHyperv -BatchExportVm
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	config = @{
             		# REQUIRED
             		snapshots = @(
             			@{
             				# OPTIONAL
             				snapshotAfterDate = $someDateTime
             				# OPTIONAL
             				snapshotBeforeDate = $someDateTime
             				# OPTIONAL
             				snapshotId = $someString
             				# OPTIONAL
             				vmNamePrefix = $someString
             				# REQUIRED
             				exportConfig = @{
             					# OPTIONAL
             					disableNetwork = $someBoolean
             					# OPTIONAL
             					hostId = $someString
             					# OPTIONAL
             					powerOn = $someBoolean
             					# OPTIONAL
             					removeNetworkDevices = $someBoolean
             					# OPTIONAL
             					vmName = $someString
             					# REQUIRED
             					path = $someString
             				}
             				# REQUIRED
             				vmId = $someString
             			}
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchExportHypervVmReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BatchInstantRecoverVm operation
             of the 'Hyperv' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: BatchInstantRecoverVm
             
             $query = New-RscMutationHyperv -BatchInstantRecoverVm
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	config = @{
             		# REQUIRED
             		snapshots = @(
             			@{
             				# OPTIONAL
             				snapshotAfterDate = $someDateTime
             				# OPTIONAL
             				snapshotBeforeDate = $someDateTime
             				# OPTIONAL
             				snapshotId = $someString
             				# REQUIRED
             				instantRecoveryConfig = @{
             					# OPTIONAL
             					hostId = $someString
             					# OPTIONAL
             					vmName = $someString
             				}
             				# REQUIRED
             				vmId = $someString
             			}
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchInstantRecoverHypervVmReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BatchMountVm operation
             of the 'Hyperv' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: BatchMountVm
             
             $query = New-RscMutationHyperv -BatchMountVm
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	config = @{
             		# REQUIRED
             		snapshots = @(
             			@{
             				# OPTIONAL
             				snapshotAfterDate = $someDateTime
             				# OPTIONAL
             				snapshotBeforeDate = $someDateTime
             				# OPTIONAL
             				snapshotId = $someString
             				# OPTIONAL
             				vmNamePrefix = $someString
             				# REQUIRED
             				mountConfig = @{
             					# OPTIONAL
             					disableNetwork = $someBoolean
             					# OPTIONAL
             					hostId = $someString
             					# OPTIONAL
             					powerOn = $someBoolean
             					# OPTIONAL
             					removeNetworkDevices = $someBoolean
             					# OPTIONAL
             					vmName = $someString
             				}
             				# REQUIRED
             				vmId = $someString
             			}
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchMountHypervVmReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BatchOnDemandBackupVm operation
             of the 'Hyperv' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: BatchOnDemandBackupVm
             
             $query = New-RscMutationHyperv -BatchOnDemandBackupVm
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	userNote = $someString
             	# REQUIRED
             	config = @{
             		# REQUIRED
             		vms = @(
             			@{
             				# OPTIONAL
             				backupConfig = @{
             					# OPTIONAL
             					slaId = $someString
             				}
             				# OPTIONAL
             				vmId = $someString
             			}
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchOnDemandBackupHypervVmReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateVirtualMachineSnapshotMount operation
             of the 'Hyperv' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: CreateVirtualMachineSnapshotMount
             
             $query = New-RscMutationHyperv -CreateVirtualMachineSnapshotMount
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	config = @{
             		# OPTIONAL
             		disableNetwork = $someBoolean
             		# OPTIONAL
             		hostId = $someString
             		# OPTIONAL
             		powerOn = $someBoolean
             		# OPTIONAL
             		removeNetworkDevices = $someBoolean
             		# OPTIONAL
             		vmName = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteAllSnapshots operation
             of the 'Hyperv' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: DeleteAllSnapshots
             
             $query = New-RscMutationHyperv -DeleteAllSnapshots
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteVirtualMachineSnapshot operation
             of the 'Hyperv' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: DeleteVirtualMachineSnapshot
             
             $query = New-RscMutationHyperv -DeleteVirtualMachineSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	location = $someInternalDeleteHypervVirtualMachineSnapshotRequestLocation # Call [Enum]::GetValues([RubrikSecurityCloud.Types.InternalDeleteHypervVirtualMachineSnapshotRequestLocation]) for enum values.
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteVirtualMachineSnapshotMount operation
             of the 'Hyperv' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: DeleteVirtualMachineSnapshotMount
             
             $query = New-RscMutationHyperv -DeleteVirtualMachineSnapshotMount
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	force = $someBoolean
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DownloadSnapshotFromLocation operation
             of the 'Hyperv' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: DownloadSnapshotFromLocation
             
             $query = New-RscMutationHyperv -DownloadSnapshotFromLocation
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	locationId = $someString
             	# REQUIRED
             	snapshotId = $someString
             	# REQUIRED
             	downloadConfig = @{
             		# OPTIONAL
             		slaId = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DownloadVirtualMachineSnapshot operation
             of the 'Hyperv' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: DownloadVirtualMachineSnapshot
             
             $query = New-RscMutationHyperv -DownloadVirtualMachineSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DownloadVirtualMachineSnapshotFiles operation
             of the 'Hyperv' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: DownloadVirtualMachineSnapshotFiles
             
             $query = New-RscMutationHyperv -DownloadVirtualMachineSnapshotFiles
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		legalHoldDownloadConfig = @{
             			# REQUIRED
             			isLegalHoldDownload = $someBoolean
             		}
             		# REQUIRED
             		paths = @(
             			$someString
             		)
             	}
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	userNote = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ExportVirtualMachine operation
             of the 'Hyperv' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: ExportVirtualMachine
             
             $query = New-RscMutationHyperv -ExportVirtualMachine
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		disableNetwork = $someBoolean
             		# OPTIONAL
             		hostId = $someString
             		# OPTIONAL
             		powerOn = $someBoolean
             		# OPTIONAL
             		removeNetworkDevices = $someBoolean
             		# OPTIONAL
             		vmName = $someString
             		# REQUIRED
             		path = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the InstantRecoverVirtualMachineSnapshot operation
             of the 'Hyperv' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: InstantRecoverVirtualMachineSnapshot
             
             $query = New-RscMutationHyperv -InstantRecoverVirtualMachineSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		hostId = $someString
             		# OPTIONAL
             		vmName = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the OnDemandSnapshot operation
             of the 'Hyperv' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: OnDemandSnapshot
             
             $query = New-RscMutationHyperv -OnDemandSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	config = @{
             		# OPTIONAL
             		slaId = $someString
             	}
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	userNote = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RefreshScvmm operation
             of the 'Hyperv' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: RefreshScvmm
             
             $query = New-RscMutationHyperv -RefreshScvmm
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RefreshServer operation
             of the 'Hyperv' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: RefreshServer
             
             $query = New-RscMutationHyperv -RefreshServer
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RegisterAgentVirtualMachine operation
             of the 'Hyperv' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: RegisterAgentVirtualMachine
             
             $query = New-RscMutationHyperv -RegisterAgentVirtualMachine
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RegisterScvmm operation
             of the 'Hyperv' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: RegisterScvmm
             
             $query = New-RscMutationHyperv -RegisterScvmm
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	scvmm = @{
             		# REQUIRED
             		hostname = $someString
             		# REQUIRED
             		runAsAccount = $someString
             		# REQUIRED
             		shouldDeployAgent = $someBoolean
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RestoreVirtualMachineSnapshotFiles operation
             of the 'Hyperv' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: RestoreVirtualMachineSnapshotFiles
             
             $query = New-RscMutationHyperv -RestoreVirtualMachineSnapshotFiles
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		targetVirtualMachineId = $someString
             		# REQUIRED
             		restoreConfig = @(
             			@{
             				# REQUIRED
             				path = $someString
             				# REQUIRED
             				restorePath = $someString
             			}
             		)
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ScvmmDelete operation
             of the 'Hyperv' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: ScvmmDelete
             
             $query = New-RscMutationHyperv -ScvmmDelete
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ResponseSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ScvmmUpdate operation
             of the 'Hyperv' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: ScvmmUpdate
             
             $query = New-RscMutationHyperv -ScvmmUpdate
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	updateProperties = @{
             		# OPTIONAL
             		configuredSlaDomainId = $someString
             		# OPTIONAL
             		hostname = $someString
             		# OPTIONAL
             		runAsAccount = $someString
             		# OPTIONAL
             		shouldDeployAgent = $someBoolean
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: HypervScvmmUpdateReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateVirtualMachine operation
             of the 'Hyperv' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: UpdateVirtualMachine
             
             $query = New-RscMutationHyperv -UpdateVirtualMachine
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	vmUpdateProperties = @{
             		# OPTIONAL
             		cloudInstantiationSpec = @{
             			# REQUIRED
             			imageRetentionInSeconds = $someInt64
             		}
             		# OPTIONAL
             		configuredSlaDomainId = $someString
             		# OPTIONAL
             		virtualDiskIdsExcludedFromSnapshot = @(
             			$someString
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateHypervVirtualMachineReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateVirtualMachineSnapshotMount operation
             of the 'Hyperv' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: UpdateVirtualMachineSnapshotMount
             
             $query = New-RscMutationHyperv -UpdateVirtualMachineSnapshotMount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# REQUIRED
             		powerStatus = $someBoolean
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateHypervVirtualMachineSnapshotMountReply
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationLdap">
             <summary>
             Create a new RscQuery object for any of the 4
             operations in the 'LDAP' API domain:
             DeletePrincipals, RemoveIntegration, SetMfaSetting, or UpdateIntegration.
             </summary>
             <description>
             New-RscMutationLdap creates a new
             mutation object for operations
             in the 'LDAP' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 4 operations
             in the 'LDAP' API domain. Select the operation this
             query is for by specifying the appropriate switch parameter;
             one of: -DeletePrincipals, -RemoveIntegration, -SetMfaSetting, -UpdateIntegration.
             Alternatively, you can specify the operation by setting the
             -Op parameter, for example: -Op DeletePrincipals,
             which is equivalent to specifying -DeletePrincipals.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationLdap -DeletePrincipals).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationLdap -DeletePrincipals).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the DeletePrincipals operation
             of the 'LDAP' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    LDAP
             # API Operation: DeletePrincipals
             
             $query = New-RscMutationLdap -DeletePrincipals
             
             # REQUIRED
             $query.Var.principalIds = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RemoveIntegration operation
             of the 'LDAP' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    LDAP
             # API Operation: RemoveIntegration
             
             $query = New-RscMutationLdap -RemoveIntegration
             
             # REQUIRED
             $query.Var.id = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SetMfaSetting operation
             of the 'LDAP' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    LDAP
             # API Operation: SetMfaSetting
             
             $query = New-RscMutationLdap -SetMfaSetting
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	ldapId = $someString
             	# OPTIONAL
             	isTotpEnforced = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateIntegration operation
             of the 'LDAP' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    LDAP
             # API Operation: UpdateIntegration
             
             $query = New-RscMutationLdap -UpdateIntegration
             
             # OPTIONAL
             $query.Var.id = $someString
             # REQUIRED
             $query.Var.name = $someString
             # REQUIRED
             $query.Var.bindUserName = $someString
             # REQUIRED
             $query.Var.bindUserPassword = $someString
             # OPTIONAL
             $query.Var.baseDn = $someString
             # OPTIONAL
             $query.Var.trustedCerts = $someString
             # OPTIONAL
             $query.Var.dynamicDnsName = $someString
             # OPTIONAL
             $query.Var.ldapServers = @(
             	@{
             		# OPTIONAL
             		hostname = $someString
             		# OPTIONAL
             		port = $someInt
             		# OPTIONAL
             		useTls = $someBoolean
             }
             )
             # OPTIONAL
             $query.Var.userSearchFilter = $someString
             # OPTIONAL
             $query.Var.userNameAttr = $someString
             # OPTIONAL
             $query.Var.groupMembershipAttr = $someString
             # OPTIONAL
             $query.Var.groupSearchFilter = $someString
             # OPTIONAL
             $query.Var.groupMemberAttr = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationManagedVolume">
             <summary>
             Create a new RscQuery object for any of the 11
             operations in the 'Managed Volume' API domain:
             Add, BeginSnapshot, Delete, DeleteSnapshotExport, DownloadFiles, DownloadFromLocation, EndSnapshot, ExportSnapshot, Resize, TakeOnDemandSnapshot, or Update.
             </summary>
             <description>
             New-RscMutationManagedVolume creates a new
             mutation object for operations
             in the 'Managed Volume' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 11 operations
             in the 'Managed Volume' API domain. Select the operation this
             query is for by specifying the appropriate switch parameter;
             one of: -Add, -BeginSnapshot, -Delete, -DeleteSnapshotExport, -DownloadFiles, -DownloadFromLocation, -EndSnapshot, -ExportSnapshot, -Resize, -TakeOnDemandSnapshot, -Update.
             Alternatively, you can specify the operation by setting the
             -Op parameter, for example: -Op Add,
             which is equivalent to specifying -Add.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationManagedVolume -Add).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationManagedVolume -Add).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the Add operation
             of the 'Managed Volume' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Managed Volume
             # API Operation: Add
             
             $query = New-RscMutationManagedVolume -Add
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	managedVolumeConfig = @{
             		# OPTIONAL
             		numChannels = $someInt
             		# OPTIONAL
             		subnet = $someString
             		# OPTIONAL
             		slaClientConfig = @{
             			# OPTIONAL
             			postBackupScriptOnBackupFailure = @{
             				# OPTIONAL
             				timeout = $someInt64
             				# REQUIRED
             				scriptCommand = $someString
             			}
             			# OPTIONAL
             			postBackupScriptOnBackupSuccess = @{
             				# OPTIONAL
             				timeout = $someInt64
             				# REQUIRED
             				scriptCommand = $someString
             			}
             			# OPTIONAL
             			preBackupScript = @{
             				# OPTIONAL
             				timeout = $someInt64
             				# REQUIRED
             				scriptCommand = $someString
             			}
             			# OPTIONAL
             			shouldCancelBackupOnPreBackupScriptFailure = $someBoolean
             			# OPTIONAL
             			shouldEnableLogExport = $someBoolean
             			# REQUIRED
             			backupScript = @{
             				# OPTIONAL
             				timeout = $someInt64
             				# REQUIRED
             				scriptCommand = $someString
             			}
             			# REQUIRED
             			channelHostMountPaths = @(
             				$someString
             			)
             			# REQUIRED
             			clientHostId = $someString
             			# REQUIRED
             			username = $someString
             		}
             		# OPTIONAL
             		applicationTag = $someManagedVolumeApplicationTag # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedVolumeApplicationTag]) for enum values.
             		# OPTIONAL
             		mvType = $someCdmManagedVolumeType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CdmManagedVolumeType]) for enum values.
             		# REQUIRED
             		exportConfig = @{
             			# OPTIONAL
             			subnet = $someString
             			# OPTIONAL
             			managedVolumePatchConfig = @{
             				# OPTIONAL
             				hostPatterns = @(
             					$someString
             				)
             				# OPTIONAL
             				nodeHint = @(
             					$someString
             				)
             				# OPTIONAL
             				smbDomainName = $someString
             				# OPTIONAL
             				smbValidIps = @(
             					$someString
             				)
             				# OPTIONAL
             				smbValidUsers = @(
             					$someString
             				)
             			}
             			# OPTIONAL
             			shareType = $someManagedVolumeShareType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedVolumeShareType]) for enum values.
             		}
             		# REQUIRED
             		name = $someString
             		# REQUIRED
             		volumeSize = $someInt64
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AddManagedVolumeReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BeginSnapshot operation
             of the 'Managed Volume' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Managed Volume
             # API Operation: BeginSnapshot
             
             $query = New-RscMutationManagedVolume -BeginSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	config = @{
             		# OPTIONAL
             		isAsync = $someBoolean
             		# OPTIONAL
             		managedVolumeSnapshotReferenceWrapper = @{
             			# OPTIONAL
             			reference = @{
             				# OPTIONAL
             				managedVolumeSnapshotReferenceDefinition = @{
             					# OPTIONAL
             					managedVolumeSnapshotReferencePatch = @{
             						# OPTIONAL
             						expiryDurationInMinutes = $someInt
             					}
             					# REQUIRED
             					ownerId = $someString
             				}
             				# REQUIRED
             				refId = $someString
             			}
             		}
             	}
             	# OPTIONAL
             	ownerId = $someString
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BeginManagedVolumeSnapshotReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Delete operation
             of the 'Managed Volume' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Managed Volume
             # API Operation: Delete
             
             $query = New-RscMutationManagedVolume -Delete
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	preserveSnapshots = $someBoolean
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: DeleteManagedVolumeReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteSnapshotExport operation
             of the 'Managed Volume' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Managed Volume
             # API Operation: DeleteSnapshotExport
             
             $query = New-RscMutationManagedVolume -DeleteSnapshotExport
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DownloadFiles operation
             of the 'Managed Volume' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Managed Volume
             # API Operation: DownloadFiles
             
             $query = New-RscMutationManagedVolume -DownloadFiles
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		legalHoldDownloadConfig = @{
             			# REQUIRED
             			isLegalHoldDownload = $someBoolean
             		}
             		# REQUIRED
             		paths = @(
             			$someString
             		)
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DownloadFromLocation operation
             of the 'Managed Volume' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Managed Volume
             # API Operation: DownloadFromLocation
             
             $query = New-RscMutationManagedVolume -DownloadFromLocation
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	downloadConfig = @{
             		# OPTIONAL
             		slaId = $someString
             	}
             	# REQUIRED
             	locationId = $someString
             	# REQUIRED
             	snapshotId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the EndSnapshot operation
             of the 'Managed Volume' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Managed Volume
             # API Operation: EndSnapshot
             
             $query = New-RscMutationManagedVolume -EndSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	params = @{
             		# OPTIONAL
             		isAsync = $someBoolean
             		# OPTIONAL
             		retentionConfig = @{
             			# OPTIONAL
             			slaId = $someString
             		}
             	}
             	# OPTIONAL
             	endSnapshotDelayInSeconds = $someInt
             	# OPTIONAL
             	ownerId = $someString
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: EndManagedVolumeSnapshotReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ExportSnapshot operation
             of the 'Managed Volume' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Managed Volume
             # API Operation: ExportSnapshot
             
             $query = New-RscMutationManagedVolume -ExportSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	params = @{
             		# OPTIONAL
             		shouldDownloadToLocal = $someBoolean
             		# OPTIONAL
             		managedVolumeExportConfig = @{
             			# OPTIONAL
             			subnet = $someString
             			# OPTIONAL
             			managedVolumePatchConfig = @{
             				# OPTIONAL
             				hostPatterns = @(
             					$someString
             				)
             				# OPTIONAL
             				nodeHint = @(
             					$someString
             				)
             				# OPTIONAL
             				smbDomainName = $someString
             				# OPTIONAL
             				smbValidIps = @(
             					$someString
             				)
             				# OPTIONAL
             				smbValidUsers = @(
             					$someString
             				)
             			}
             			# OPTIONAL
             			shareType = $someManagedVolumeShareType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedVolumeShareType]) for enum values.
             		}
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Resize operation
             of the 'Managed Volume' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Managed Volume
             # API Operation: Resize
             
             $query = New-RscMutationManagedVolume -Resize
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	size = @{
             		# OPTIONAL
             		newSize = $someInt64
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TakeOnDemandSnapshot operation
             of the 'Managed Volume' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Managed Volume
             # API Operation: TakeOnDemandSnapshot
             
             $query = New-RscMutationManagedVolume -TakeOnDemandSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	config = @{
             		# OPTIONAL
             		retentionConfig = @{
             			# OPTIONAL
             			slaId = $someString
             		}
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Update operation
             of the 'Managed Volume' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Managed Volume
             # API Operation: Update
             
             $query = New-RscMutationManagedVolume -Update
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	update = @{
             		# OPTIONAL
             		config = @{
             			# OPTIONAL
             			hostPatterns = @(
             				$someString
             			)
             			# OPTIONAL
             			nodeHint = @(
             				$someString
             			)
             			# OPTIONAL
             			smbDomainName = $someString
             			# OPTIONAL
             			smbValidIps = @(
             				$someString
             			)
             			# OPTIONAL
             			smbValidUsers = @(
             				$someString
             			)
             		}
             		# OPTIONAL
             		configuredSlaDomainId = $someString
             		# OPTIONAL
             		name = $someString
             		# OPTIONAL
             		volumeSize = $someInt64
             		# OPTIONAL
             		slaClientConfig = @{
             			# OPTIONAL
             			backupScriptCommand = $someString
             			# OPTIONAL
             			backupScriptTimeout = $someInt64
             			# OPTIONAL
             			channelHostMountPaths = @(
             				$someString
             			)
             			# OPTIONAL
             			clientHostId = $someString
             			# OPTIONAL
             			postBackupScriptOnBackupFailureCommand = $someString
             			# OPTIONAL
             			postBackupScriptOnBackupFailureTimeout = $someInt64
             			# OPTIONAL
             			postBackupScriptOnBackupSuccessCommand = $someString
             			# OPTIONAL
             			postBackupScriptOnBackupSuccessTimeout = $someInt64
             			# OPTIONAL
             			preBackupScriptCommand = $someString
             			# OPTIONAL
             			preBackupScriptTimeout = $someInt64
             			# OPTIONAL
             			shouldCancelBackupOnPreBackupScriptFailure = $someBoolean
             			# OPTIONAL
             			username = $someString
             			# REQUIRED
             			shouldDisablePostBackupScriptOnBackupFailure = $someBoolean
             			# REQUIRED
             			shouldDisablePostBackupScriptOnBackupSuccess = $someBoolean
             			# REQUIRED
             			shouldDisablePreBackupScript = $someBoolean
             		}
             		# OPTIONAL
             		subnet = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateManagedVolumeReply
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationMongo">
             <summary>
             Create a new RscQuery object for any of the 12
             operations in the 'Mongo' API domain:
             AddSource, AssignSlaToDbCollection, BulkDeletedbSources, CreatedbSource, DeleteSource, DeletedbSource, DiscoverSource, PatchSource, RecoverSource, RecoverdbSource, RetryAddSource, or UpdatedbSource.
             </summary>
             <description>
             New-RscMutationMongo creates a new
             mutation object for operations
             in the 'Mongo' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 12 operations
             in the 'Mongo' API domain. Select the operation this
             query is for by specifying the appropriate switch parameter;
             one of: -AddSource, -AssignSlaToDbCollection, -BulkDeletedbSources, -CreatedbSource, -DeleteSource, -DeletedbSource, -DiscoverSource, -PatchSource, -RecoverSource, -RecoverdbSource, -RetryAddSource, -UpdatedbSource.
             Alternatively, you can specify the operation by setting the
             -Op parameter, for example: -Op AddSource,
             which is equivalent to specifying -AddSource.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationMongo -AddSource).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationMongo -AddSource).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AddSource operation
             of the 'Mongo' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mongo
             # API Operation: AddSource
             
             $query = New-RscMutationMongo -AddSource
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	mongoSourceAddRequestConfig = @{
             		# OPTIONAL
             		caCertfilePath = $someString
             		# OPTIONAL
             		ignoreSecondaries = @(
             			$someString
             		)
             		# OPTIONAL
             		sourceDriverPassword = $someString
             		# OPTIONAL
             		sourceDriverUser = $someString
             		# OPTIONAL
             		sslKeyfilePath = $someString
             		# OPTIONAL
             		sslCertfilePath = $someString
             		# REQUIRED
             		mongoType = $someMongoType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MongoType]) for enum values.
             		# OPTIONAL
             		sslCertificateRequired = $someMongoSslCertificateRequirement # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MongoSslCertificateRequirement]) for enum values.
             		# REQUIRED
             		mongoClientHosts = @(
             			@{
             				# REQUIRED
             				configurationPort = $someInt
             				# REQUIRED
             				hostId = $someString
             			}
             		)
             		# REQUIRED
             		sourceName = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AddMongoSourceReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AssignSlaToDbCollection operation
             of the 'Mongo' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mongo
             # API Operation: AssignSlaToDbCollection
             
             $query = New-RscMutationMongo -AssignSlaToDbCollection
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	input = @{
             		# REQUIRED
             		ids = @(
             			$someString
             		)
             		# REQUIRED
             		slaId = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BulkDeletedbSources operation
             of the 'Mongo' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mongo
             # API Operation: BulkDeletedbSources
             
             $query = New-RscMutationMongo -BulkDeletedbSources
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	sourceType = $someV2BulkDeleteMosaicSourcesRequestSourceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.V2BulkDeleteMosaicSourcesRequestSourceType]) for enum values.
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	sourceData = @{
             		# OPTIONAL
             		async = $someBoolean
             		# REQUIRED
             		sourceNames = @(
             			$someString
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MosaicAsyncResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreatedbSource operation
             of the 'Mongo' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mongo
             # API Operation: CreatedbSource
             
             $query = New-RscMutationMongo -CreatedbSource
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	sourceData = @{
             		# OPTIONAL
             		async = $someBoolean
             		# OPTIONAL
             		cassandraYaml = @(
             			$someString
             		)
             		# OPTIONAL
             		dseYaml = @(
             			$someString
             		)
             		# OPTIONAL
             		enableSsl = $someBoolean
             		# OPTIONAL
             		httpsCertificate = $someString
             		# OPTIONAL
             		ignoreSecondaries = @(
             			$someString
             		)
             		# OPTIONAL
             		jmxPassword = $someString
             		# OPTIONAL
             		jmxUser = $someString
             		# OPTIONAL
             		parameterEncoded = $someBoolean
             		# OPTIONAL
             		sourceAuthKey = $someString
             		# OPTIONAL
             		sourceAuthKeyfile = $someString
             		# OPTIONAL
             		sourceAuthPassphrase = $someString
             		# OPTIONAL
             		sourceDriverPassword = $someString
             		# OPTIONAL
             		sourceDriverUser = $someString
             		# OPTIONAL
             		sourceHttpsPort = $someString
             		# OPTIONAL
             		sourcePassword = $someString
             		# OPTIONAL
             		sourcePort = $someString
             		# OPTIONAL
             		sourceRpcPort = $someString
             		# OPTIONAL
             		sourceSshPort = $someString
             		# OPTIONAL
             		sourceUser = $someString
             		# OPTIONAL
             		sslCaCerts = $someString
             		# OPTIONAL
             		sslCertfile = $someString
             		# OPTIONAL
             		sslKeyfile = $someString
             		# REQUIRED
             		sourceType = $someSourceSourceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SourceSourceType]) for enum values.
             		# OPTIONAL
             		sslCertReqs = $someSourceSslCertReqs # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SourceSslCertReqs]) for enum values.
             		# REQUIRED
             		sourceIp = @(
             			$someString
             		)
             		# REQUIRED
             		sourceName = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MosaicAsyncResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteSource operation
             of the 'Mongo' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mongo
             # API Operation: DeleteSource
             
             $query = New-RscMutationMongo -DeleteSource
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeletedbSource operation
             of the 'Mongo' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mongo
             # API Operation: DeletedbSource
             
             $query = New-RscMutationMongo -DeletedbSource
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	sourceType = $someV2DeleteMosaicSourceRequestSourceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.V2DeleteMosaicSourceRequestSourceType]) for enum values.
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	sourceName = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MosaicAsyncResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DiscoverSource operation
             of the 'Mongo' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mongo
             # API Operation: DiscoverSource
             
             $query = New-RscMutationMongo -DiscoverSource
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PatchSource operation
             of the 'Mongo' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mongo
             # API Operation: PatchSource
             
             $query = New-RscMutationMongo -PatchSource
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	mongoSourcePatchRequestConfig = @{
             		# OPTIONAL
             		caCertfilePath = $someString
             		# OPTIONAL
             		ignoreSecondaries = @(
             			$someString
             		)
             		# OPTIONAL
             		sourceDriverPassword = $someString
             		# OPTIONAL
             		sourceDriverUser = $someString
             		# OPTIONAL
             		sslKeyfilePath = $someString
             		# OPTIONAL
             		sslCertfilePath = $someString
             		# OPTIONAL
             		sslCertificateRequired = $someMongoSslCertificateRequirement # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MongoSslCertificateRequirement]) for enum values.
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RecoverSource operation
             of the 'Mongo' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mongo
             # API Operation: RecoverSource
             
             $query = New-RscMutationMongo -RecoverSource
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	input = @{
             		# OPTIONAL
             		prefix = $someString
             		# OPTIONAL
             		restoreDbPassword = $someString
             		# OPTIONAL
             		restoreDbUsername = $someString
             		# OPTIONAL
             		shouldDropExistingCollection = $someBoolean
             		# OPTIONAL
             		sourceCollectionIds = @(
             			$someString
             		)
             		# OPTIONAL
             		sourceDatabaseIds = @(
             			$someString
             		)
             		# OPTIONAL
             		targetCollectionName = $someString
             		# OPTIONAL
             		targetDatabaseName = $someString
             		# OPTIONAL
             		versionTime = $someDateTime
             		# OPTIONAL
             		restoreThrottleInBytesPerSecond = $someInt64
             		# OPTIONAL
             		isRestoreWithIndex = $someBoolean
             		# REQUIRED
             		sourceMongoClusterId = $someString
             		# REQUIRED
             		targetMongoClusterId = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RecoverdbSource operation
             of the 'Mongo' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mongo
             # API Operation: RecoverdbSource
             
             $query = New-RscMutationMongo -RecoverdbSource
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	recoveryData = @{
             		# OPTIONAL
             		destinationManagementObjects = @{
             			# OPTIONAL
             			databases = @(
             				@{
             					# OPTIONAL
             					dbName = $someString
             					# OPTIONAL
             					tables = @(
             						$someString
             					)
             				}
             			)
             		}
             		# OPTIONAL
             		destinationSourceName = $someString
             		# OPTIONAL
             		keyspaceConfig = $someString
             		# OPTIONAL
             		maxDiskUsage = $someString
             		# OPTIONAL
             		restoreDbUserPwd = $someString
             		# OPTIONAL
             		restoreDbUsername = $someString
             		# OPTIONAL
             		startTimestamp = $someInt
             		# OPTIONAL
             		targetEncryptionKey = $someString
             		# OPTIONAL
             		targetQuery = $someString
             		# OPTIONAL
             		sourceType = $someMosaicRetrieveRequestSourceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MosaicRetrieveRequestSourceType]) for enum values.
             		# REQUIRED
             		destinationPath = $someString
             		# REQUIRED
             		managementObjects = @{
             			# OPTIONAL
             			databases = @(
             				@{
             					# OPTIONAL
             					dbName = $someString
             					# OPTIONAL
             					tables = @(
             						$someString
             					)
             				}
             			)
             		}
             		# REQUIRED
             		parameterEncoded = $someBoolean
             		# REQUIRED
             		sourceName = $someString
             		# REQUIRED
             		versionTime = $someInt
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MosaicAsyncResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RetryAddSource operation
             of the 'Mongo' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mongo
             # API Operation: RetryAddSource
             
             $query = New-RscMutationMongo -RetryAddSource
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	mongoSourceRequestConfig = @{
             		# OPTIONAL
             		caCertfilePath = $someString
             		# OPTIONAL
             		ignoreSecondaries = @(
             			$someString
             		)
             		# OPTIONAL
             		sourceDriverPassword = $someString
             		# OPTIONAL
             		sourceDriverUser = $someString
             		# OPTIONAL
             		sslKeyfilePath = $someString
             		# OPTIONAL
             		sslCertfilePath = $someString
             		# REQUIRED
             		mongoType = $someMongoType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MongoType]) for enum values.
             		# OPTIONAL
             		sslCertificateRequired = $someMongoSslCertificateRequirement # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MongoSslCertificateRequirement]) for enum values.
             		# REQUIRED
             		mongoClientHosts = @(
             			@{
             				# REQUIRED
             				configurationPort = $someInt
             				# REQUIRED
             				hostId = $someString
             			}
             		)
             		# REQUIRED
             		sourceName = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdatedbSource operation
             of the 'Mongo' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mongo
             # API Operation: UpdatedbSource
             
             $query = New-RscMutationMongo -UpdatedbSource
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	sourceData = @{
             		# OPTIONAL
             		async = $someBoolean
             		# OPTIONAL
             		cassandraYaml = @(
             			$someString
             		)
             		# OPTIONAL
             		dseYaml = @(
             			$someString
             		)
             		# OPTIONAL
             		enableSsl = $someBoolean
             		# OPTIONAL
             		httpsCertificate = $someString
             		# OPTIONAL
             		ignoreSecondaries = @(
             			$someString
             		)
             		# OPTIONAL
             		jmxPassword = $someString
             		# OPTIONAL
             		jmxUser = $someString
             		# OPTIONAL
             		parameterEncoded = $someBoolean
             		# OPTIONAL
             		sourceAuthKey = $someString
             		# OPTIONAL
             		sourceAuthKeyfile = $someString
             		# OPTIONAL
             		sourceAuthPassphrase = $someString
             		# OPTIONAL
             		sourceDriverPassword = $someString
             		# OPTIONAL
             		sourceDriverUser = $someString
             		# OPTIONAL
             		sourceHttpsPort = $someString
             		# OPTIONAL
             		sourcePassword = $someString
             		# OPTIONAL
             		sourcePort = $someString
             		# OPTIONAL
             		sourceRpcPort = $someString
             		# OPTIONAL
             		sourceSshPort = $someString
             		# OPTIONAL
             		sourceUser = $someString
             		# OPTIONAL
             		sslCaCerts = $someString
             		# OPTIONAL
             		sslCertfile = $someString
             		# OPTIONAL
             		sslKeyfile = $someString
             		# REQUIRED
             		sourceType = $someSourceSourceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SourceSourceType]) for enum values.
             		# OPTIONAL
             		sslCertReqs = $someSourceSslCertReqs # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SourceSslCertReqs]) for enum values.
             		# REQUIRED
             		sourceIp = @(
             			$someString
             		)
             		# REQUIRED
             		sourceName = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MosaicAsyncResponse
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationMssql">
             <summary>
             Create a new RscQuery object for any of the 17
             operations in the 'MSSQL' API domain:
             AssignSlaDomainProperties, AssignSlaDomainPropertiesAsync, BrowseDatabaseSnapshot, BulkCreateOnDemandBackup, BulkUpdateDbs, CreateLiveMount, CreateLogShippingConfiguration, CreateOnDemandBackup, DeleteDbSnapshots, DeleteLiveMount, DownloadDatabaseBackupFiles, DownloadDatabaseFilesFromArchivalLocation, ExportDatabase, RestoreDatabase, TakeLogBackup, UpdateDefaultProperties, or UpdateLogShippingConfiguration.
             </summary>
             <description>
             New-RscMutationMssql creates a new
             mutation object for operations
             in the 'MSSQL' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 17 operations
             in the 'MSSQL' API domain. Select the operation this
             query is for by specifying the appropriate switch parameter;
             one of: -AssignSlaDomainProperties, -AssignSlaDomainPropertiesAsync, -BrowseDatabaseSnapshot, -BulkCreateOnDemandBackup, -BulkUpdateDbs, -CreateLiveMount, -CreateLogShippingConfiguration, -CreateOnDemandBackup, -DeleteDbSnapshots, -DeleteLiveMount, -DownloadDatabaseBackupFiles, -DownloadDatabaseFilesFromArchivalLocation, -ExportDatabase, -RestoreDatabase, -TakeLogBackup, -UpdateDefaultProperties, -UpdateLogShippingConfiguration.
             Alternatively, you can specify the operation by setting the
             -Op parameter, for example: -Op AssignSlaDomainProperties,
             which is equivalent to specifying -AssignSlaDomainProperties.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationMssql -AssignSlaDomainProperties).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationMssql -AssignSlaDomainProperties).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AssignSlaDomainProperties operation
             of the 'MSSQL' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MSSQL
             # API Operation: AssignSlaDomainProperties
             
             $query = New-RscMutationMssql -AssignSlaDomainProperties
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	updateInfo = @{
             		# OPTIONAL
             		shouldApplyToExistingSnapshots = $someBoolean
             		# OPTIONAL
             		shouldApplyToNonPolicySnapshots = $someBoolean
             		# OPTIONAL
             		mssqlSlaPatchProperties = @{
             			# OPTIONAL
             			configuredSlaDomainId = $someString
             			# OPTIONAL
             			useConfiguredDefaultLogRetention = $someBoolean
             			# OPTIONAL
             			mssqlSlaRelatedProperties = @{
             				# OPTIONAL
             				copyOnly = $someBoolean
             				# OPTIONAL
             				logBackupFrequencyInSeconds = $someInt
             				# OPTIONAL
             				logRetentionHours = $someInt
             				# OPTIONAL
             				hasLogConfigFromSla = $someBoolean
             				# OPTIONAL
             				hostLogRetention = $someInt
             			}
             		}
             		# OPTIONAL
             		existingSnapshotRetention = $someExistingSnapshotRetention # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ExistingSnapshotRetention]) for enum values.
             		# REQUIRED
             		ids = @(
             			$someString
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ResponseSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AssignSlaDomainPropertiesAsync operation
             of the 'MSSQL' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MSSQL
             # API Operation: AssignSlaDomainPropertiesAsync
             
             $query = New-RscMutationMssql -AssignSlaDomainPropertiesAsync
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	updateInfo = @{
             		# OPTIONAL
             		shouldApplyToExistingSnapshots = $someBoolean
             		# OPTIONAL
             		shouldApplyToNonPolicySnapshots = $someBoolean
             		# OPTIONAL
             		mssqlSlaPatchProperties = @{
             			# OPTIONAL
             			configuredSlaDomainId = $someString
             			# OPTIONAL
             			useConfiguredDefaultLogRetention = $someBoolean
             			# OPTIONAL
             			mssqlSlaRelatedProperties = @{
             				# OPTIONAL
             				copyOnly = $someBoolean
             				# OPTIONAL
             				logBackupFrequencyInSeconds = $someInt
             				# OPTIONAL
             				logRetentionHours = $someInt
             				# OPTIONAL
             				hasLogConfigFromSla = $someBoolean
             				# OPTIONAL
             				hostLogRetention = $someInt
             			}
             		}
             		# OPTIONAL
             		existingSnapshotRetention = $someExistingSnapshotRetention # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ExistingSnapshotRetention]) for enum values.
             		# REQUIRED
             		ids = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	userNote = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AssignMssqlSlaDomainPropertiesAsyncReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BrowseDatabaseSnapshot operation
             of the 'MSSQL' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MSSQL
             # API Operation: BrowseDatabaseSnapshot
             
             $query = New-RscMutationMssql -BrowseDatabaseSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		endPoint = @{
             			# OPTIONAL
             			lsnPoint = @{
             				# OPTIONAL
             				recoveryForkGuid = $someString
             				# REQUIRED
             				lsn = $someString
             			}
             			# OPTIONAL
             			timestampMs = $someInt64
             			# OPTIONAL
             			date = $someDateTime
             		}
             		# OPTIONAL
             		legalHoldDownloadConfig = @{
             			# REQUIRED
             			isLegalHoldDownload = $someBoolean
             		}
             		# OPTIONAL
             		recoveryPoint = @{
             			# OPTIONAL
             			lsnPoint = @{
             				# OPTIONAL
             				recoveryForkGuid = $someString
             				# REQUIRED
             				lsn = $someString
             			}
             			# OPTIONAL
             			timestampMs = $someInt64
             			# OPTIONAL
             			date = $someDateTime
             		}
             		# OPTIONAL
             		startPoint = @{
             			# OPTIONAL
             			lsnPoint = @{
             				# OPTIONAL
             				recoveryForkGuid = $someString
             				# REQUIRED
             				lsn = $someString
             			}
             			# OPTIONAL
             			timestampMs = $someInt64
             			# OPTIONAL
             			date = $someDateTime
             		}
             		# OPTIONAL
             		backupType = $someMssqlBackupType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MssqlBackupType]) for enum values.
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BrowseMssqlDatabaseSnapshotReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BulkCreateOnDemandBackup operation
             of the 'MSSQL' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MSSQL
             # API Operation: BulkCreateOnDemandBackup
             
             $query = New-RscMutationMssql -BulkCreateOnDemandBackup
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		availabilityGroupIds = @(
             			$someString
             		)
             		# OPTIONAL
             		databaseIds = @(
             			$someString
             		)
             		# OPTIONAL
             		forceFullSnapshot = $someBoolean
             		# OPTIONAL
             		hostIds = @(
             			$someString
             		)
             		# OPTIONAL
             		instanceIds = @(
             			$someString
             		)
             		# OPTIONAL
             		windowsClusterIds = @(
             			$someString
             		)
             		# OPTIONAL
             		baseOnDemandSnapshotConfig = @{
             			# OPTIONAL
             			slaId = $someString
             		}
             	}
             	# OPTIONAL
             	userNote = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BulkUpdateDbs operation
             of the 'MSSQL' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MSSQL
             # API Operation: BulkUpdateDbs
             
             $query = New-RscMutationMssql -BulkUpdateDbs
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	dbsUpdateProperties = @(
             		@{
             			# REQUIRED
             			databaseId = $someString
             			# REQUIRED
             			updateProperties = @{
             				# OPTIONAL
             				configuredSlaDomainId = $someString
             				# OPTIONAL
             				maxDataStreams = $someInt
             				# OPTIONAL
             				postBackupScript = @{
             					# REQUIRED
             					scriptErrorAction = $someScriptErrorAction # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ScriptErrorAction]) for enum values.
             					# REQUIRED
             					scriptPath = $someString
             					# REQUIRED
             					timeoutMs = $someInt64
             				}
             				# OPTIONAL
             				preBackupScript = @{
             					# REQUIRED
             					scriptErrorAction = $someScriptErrorAction # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ScriptErrorAction]) for enum values.
             					# REQUIRED
             					scriptPath = $someString
             					# REQUIRED
             					timeoutMs = $someInt64
             				}
             				# OPTIONAL
             				isPaused = $someBoolean
             				# OPTIONAL
             				shouldForceFull = $someBoolean
             				# OPTIONAL
             				mssqlNonSlaProperties = @{
             					# OPTIONAL
             					copyOnly = $someBoolean
             					# OPTIONAL
             					logBackupFrequencyInSeconds = $someInt
             					# OPTIONAL
             					logRetentionHours = $someInt
             				}
             				# OPTIONAL
             				mssqlSlaPatchProperties = @{
             					# OPTIONAL
             					configuredSlaDomainId = $someString
             					# OPTIONAL
             					useConfiguredDefaultLogRetention = $someBoolean
             					# OPTIONAL
             					mssqlSlaRelatedProperties = @{
             						# OPTIONAL
             						copyOnly = $someBoolean
             						# OPTIONAL
             						logBackupFrequencyInSeconds = $someInt
             						# OPTIONAL
             						logRetentionHours = $someInt
             						# OPTIONAL
             						hasLogConfigFromSla = $someBoolean
             						# OPTIONAL
             						hostLogRetention = $someInt
             					}
             				}
             				# OPTIONAL
             				mssqlSlaRelatedProperties = @{
             					# OPTIONAL
             					copyOnly = $someBoolean
             					# OPTIONAL
             					logBackupFrequencyInSeconds = $someInt
             					# OPTIONAL
             					logRetentionHours = $someInt
             					# OPTIONAL
             					hasLogConfigFromSla = $someBoolean
             					# OPTIONAL
             					hostLogRetention = $someInt
             				}
             			}
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BulkUpdateMssqlDbsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateLiveMount operation
             of the 'MSSQL' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MSSQL
             # API Operation: CreateLiveMount
             
             $query = New-RscMutationMssql -CreateLiveMount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		targetInstanceId = $someString
             		# OPTIONAL
             		recoveryModel = $someMssqlDatabaseRecoveryModel # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MssqlDatabaseRecoveryModel]) for enum values.
             		# REQUIRED
             		mountedDatabaseName = $someString
             		# REQUIRED
             		recoveryPoint = @{
             			# OPTIONAL
             			lsnPoint = @{
             				# OPTIONAL
             				recoveryForkGuid = $someString
             				# REQUIRED
             				lsn = $someString
             			}
             			# OPTIONAL
             			timestampMs = $someInt64
             			# OPTIONAL
             			date = $someDateTime
             		}
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateLogShippingConfiguration operation
             of the 'MSSQL' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MSSQL
             # API Operation: CreateLogShippingConfiguration
             
             $query = New-RscMutationMssql -CreateLogShippingConfiguration
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		makeupReseedLimit = $someInt
             		# OPTIONAL
             		mssqlLogShippingCreateConfig = @{
             			# OPTIONAL
             			maxDataStreams = $someInt
             			# OPTIONAL
             			targetDataFilePath = $someString
             			# OPTIONAL
             			targetFilePaths = @(
             				@{
             					# OPTIONAL
             					newFilename = $someString
             					# OPTIONAL
             					newLogicalName = $someString
             					# REQUIRED
             					exportPath = $someString
             					# REQUIRED
             					logicalName = $someString
             				}
             			)
             			# OPTIONAL
             			targetLogFilePath = $someString
             			# OPTIONAL
             			mssqlLogShippingTargetStateOptions = @{
             				# OPTIONAL
             				shouldDisconnectStandbyUsers = $someBoolean
             				# REQUIRED
             				state = $someMssqlLogShippingOkState # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MssqlLogShippingOkState]) for enum values.
             			}
             			# REQUIRED
             			targetDatabaseName = $someString
             			# REQUIRED
             			targetInstanceId = $someString
             		}
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateOnDemandBackup operation
             of the 'MSSQL' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MSSQL
             # API Operation: CreateOnDemandBackup
             
             $query = New-RscMutationMssql -CreateOnDemandBackup
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		forceFullSnapshot = $someBoolean
             		# OPTIONAL
             		baseOnDemandSnapshotConfig = @{
             			# OPTIONAL
             			slaId = $someString
             		}
             	}
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	userNote = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteDbSnapshots operation
             of the 'MSSQL' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MSSQL
             # API Operation: DeleteDbSnapshots
             
             $query = New-RscMutationMssql -DeleteDbSnapshots
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ResponseSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteLiveMount operation
             of the 'MSSQL' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MSSQL
             # API Operation: DeleteLiveMount
             
             $query = New-RscMutationMssql -DeleteLiveMount
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	force = $someBoolean
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DownloadDatabaseBackupFiles operation
             of the 'MSSQL' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MSSQL
             # API Operation: DownloadDatabaseBackupFiles
             
             $query = New-RscMutationMssql -DownloadDatabaseBackupFiles
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		legalHoldDownloadConfig = @{
             			# REQUIRED
             			isLegalHoldDownload = $someBoolean
             		}
             		# REQUIRED
             		items = @(
             			$someString
             		)
             	}
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	userNote = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DownloadDatabaseFilesFromArchivalLocation operation
             of the 'MSSQL' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MSSQL
             # API Operation: DownloadDatabaseFilesFromArchivalLocation
             
             $query = New-RscMutationMssql -DownloadDatabaseFilesFromArchivalLocation
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# REQUIRED
             		recoveryPoint = @{
             			# OPTIONAL
             			lsnPoint = @{
             				# OPTIONAL
             				recoveryForkGuid = $someString
             				# REQUIRED
             				lsn = $someString
             			}
             			# OPTIONAL
             			timestampMs = $someInt64
             			# OPTIONAL
             			date = $someDateTime
             		}
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ExportDatabase operation
             of the 'MSSQL' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MSSQL
             # API Operation: ExportDatabase
             
             $query = New-RscMutationMssql -ExportDatabase
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		allowOverwrite = $someBoolean
             		# OPTIONAL
             		finishRecovery = $someBoolean
             		# OPTIONAL
             		maxDataStreams = $someInt
             		# OPTIONAL
             		targetDataFilePath = $someString
             		# OPTIONAL
             		targetFilePaths = @(
             			@{
             				# OPTIONAL
             				newFilename = $someString
             				# OPTIONAL
             				newLogicalName = $someString
             				# REQUIRED
             				exportPath = $someString
             				# REQUIRED
             				logicalName = $someString
             			}
             		)
             		# OPTIONAL
             		targetLogFilePath = $someString
             		# REQUIRED
             		recoveryPoint = @{
             			# OPTIONAL
             			lsnPoint = @{
             				# OPTIONAL
             				recoveryForkGuid = $someString
             				# REQUIRED
             				lsn = $someString
             			}
             			# OPTIONAL
             			timestampMs = $someInt64
             			# OPTIONAL
             			date = $someDateTime
             		}
             		# REQUIRED
             		targetDatabaseName = $someString
             		# REQUIRED
             		targetInstanceId = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RestoreDatabase operation
             of the 'MSSQL' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MSSQL
             # API Operation: RestoreDatabase
             
             $query = New-RscMutationMssql -RestoreDatabase
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		finishRecovery = $someBoolean
             		# OPTIONAL
             		maxDataStreams = $someInt
             		# REQUIRED
             		recoveryPoint = @{
             			# OPTIONAL
             			lsnPoint = @{
             				# OPTIONAL
             				recoveryForkGuid = $someString
             				# REQUIRED
             				lsn = $someString
             			}
             			# OPTIONAL
             			timestampMs = $someInt64
             			# OPTIONAL
             			date = $someDateTime
             		}
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TakeLogBackup operation
             of the 'MSSQL' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MSSQL
             # API Operation: TakeLogBackup
             
             $query = New-RscMutationMssql -TakeLogBackup
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateDefaultProperties operation
             of the 'MSSQL' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MSSQL
             # API Operation: UpdateDefaultProperties
             
             $query = New-RscMutationMssql -UpdateDefaultProperties
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	defaultProperties = @{
             		# OPTIONAL
             		cbtStatus = $someBoolean
             		# OPTIONAL
             		logBackupFrequencyInSeconds = $someInt64
             		# OPTIONAL
             		logRetentionTimeInHours = $someInt
             		# OPTIONAL
             		shouldUseDefaultBackupLocation = $someBoolean
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateMssqlDefaultPropertiesReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateLogShippingConfiguration operation
             of the 'MSSQL' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MSSQL
             # API Operation: UpdateLogShippingConfiguration
             
             $query = New-RscMutationMssql -UpdateLogShippingConfiguration
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		makeupReseedLimit = $someInt
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateMssqlLogShippingConfigurationReply
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationNutanix">
             <summary>
             Create a new RscQuery object for any of the 25
             operations in the 'Nutanix' API domain:
             BatchExportVm, BatchMountVm, BulkOnDemandSnapshotVm, CreateCluster, CreateOnDemandBackup, CreatePrismCentral, DeleteCluster, DeleteMountV1, DeletePrismCentral, DeleteSnapshot, DeleteSnapshots, DownloadFilesSnapshot, DownloadSnapshot, DownloadVmFromLocation, ExportSnapshot, MigrateMountV1, MountSnapshotV1, PatchMountV1, RefreshCluster, RefreshPrismCentral, RegisterAgentVm, RestoreFilesSnapshot, UpdateCluster, UpdatePrismCentral, or UpdateVm.
             </summary>
             <description>
             New-RscMutationNutanix creates a new
             mutation object for operations
             in the 'Nutanix' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 25 operations
             in the 'Nutanix' API domain. Select the operation this
             query is for by specifying the appropriate switch parameter;
             one of: -BatchExportVm, -BatchMountVm, -BulkOnDemandSnapshotVm, -CreateCluster, -CreateOnDemandBackup, -CreatePrismCentral, -DeleteCluster, -DeleteMountV1, -DeletePrismCentral, -DeleteSnapshot, -DeleteSnapshots, -DownloadFilesSnapshot, -DownloadSnapshot, -DownloadVmFromLocation, -ExportSnapshot, -MigrateMountV1, -MountSnapshotV1, -PatchMountV1, -RefreshCluster, -RefreshPrismCentral, -RegisterAgentVm, -RestoreFilesSnapshot, -UpdateCluster, -UpdatePrismCentral, -UpdateVm.
             Alternatively, you can specify the operation by setting the
             -Op parameter, for example: -Op BatchExportVm,
             which is equivalent to specifying -BatchExportVm.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationNutanix -BatchExportVm).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationNutanix -BatchExportVm).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the BatchExportVm operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: BatchExportVm
             
             $query = New-RscMutationNutanix -BatchExportVm
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# REQUIRED
             		snapshots = @(
             			@{
             				# OPTIONAL
             				snapshotAfterDate = $someDateTime
             				# OPTIONAL
             				snapshotBeforeDate = $someDateTime
             				# OPTIONAL
             				snapshotId = $someString
             				# OPTIONAL
             				vmNamePrefix = $someString
             				# REQUIRED
             				exportConfig = @{
             					# OPTIONAL
             					nutanixClusterId = $someString
             					# OPTIONAL
             					powerOn = $someBoolean
             					# OPTIONAL
             					removeNetworkDevices = $someBoolean
             					# OPTIONAL
             					vmName = $someString
             					# OPTIONAL
             					keepMacAddresses = $someBoolean
             					# OPTIONAL
             					nicNetworkUuids = @(
             						$someString
             					)
             					# REQUIRED
             					containerNaturalId = $someString
             				}
             				# REQUIRED
             				vmId = $someString
             			}
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchExportNutanixVmReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BatchMountVm operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: BatchMountVm
             
             $query = New-RscMutationNutanix -BatchMountVm
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# REQUIRED
             		snapshots = @(
             			@{
             				# OPTIONAL
             				snapshotAfterDate = $someDateTime
             				# OPTIONAL
             				snapshotBeforeDate = $someDateTime
             				# OPTIONAL
             				snapshotId = $someString
             				# OPTIONAL
             				vmNamePrefix = $someString
             				# REQUIRED
             				mountConfig = @{
             					# OPTIONAL
             					containerNaturalId = $someString
             					# OPTIONAL
             					nutanixClusterId = $someString
             					# OPTIONAL
             					shouldMigrateImmediately = $someBoolean
             					# OPTIONAL
             					shouldPowerOn = $someBoolean
             					# OPTIONAL
             					shouldRemoveNetwork = $someBoolean
             					# OPTIONAL
             					targetNetwork = $someString
             					# OPTIONAL
             					vmName = $someString
             					# OPTIONAL
             					keepMacAddresses = $someBoolean
             					# OPTIONAL
             					nicNetworkUuids = @(
             						$someString
             					)
             					# REQUIRED
             					shouldDisableMigration = $someBoolean
             				}
             				# REQUIRED
             				vmId = $someString
             			}
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchMountNutanixVmReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BulkOnDemandSnapshotVm operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: BulkOnDemandSnapshotVm
             
             $query = New-RscMutationNutanix -BulkOnDemandSnapshotVm
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# REQUIRED
             		vms = @(
             			@{
             				# REQUIRED
             				backupConfig = @{
             					# OPTIONAL
             					slaId = $someString
             				}
             				# REQUIRED
             				vmId = $someString
             			}
             		)
             	}
             	# OPTIONAL
             	userNote = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BulkOnDemandSnapshotNutanixVmReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateCluster operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: CreateCluster
             
             $query = New-RscMutationNutanix -CreateCluster
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	nutanixClusterConfig = @{
             		# REQUIRED
             		caCerts = $someString
             		# REQUIRED
             		hostname = $someString
             		# REQUIRED
             		nutanixClusterUuid = $someString
             		# REQUIRED
             		password = $someString
             		# REQUIRED
             		username = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateOnDemandBackup operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: CreateOnDemandBackup
             
             $query = New-RscMutationNutanix -CreateOnDemandBackup
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	config = @{
             		# OPTIONAL
             		slaId = $someString
             	}
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	userNote = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreatePrismCentral operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: CreatePrismCentral
             
             $query = New-RscMutationNutanix -CreatePrismCentral
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	prismCentralConfig = @{
             		# REQUIRED
             		caCerts = $someString
             		# REQUIRED
             		hostname = $someString
             		# REQUIRED
             		password = $someString
             		# REQUIRED
             		username = $someString
             	}
             	# REQUIRED
             	prismElementCdmTuple = @(
             		@{
             			# REQUIRED
             			nutanixClusterId = $someString
             			# REQUIRED
             			cdmClusterId = $someString
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteCluster operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: DeleteCluster
             
             $query = New-RscMutationNutanix -DeleteCluster
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteMountV1 operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: DeleteMountV1
             
             $query = New-RscMutationNutanix -DeleteMountV1
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeletePrismCentral operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: DeletePrismCentral
             
             $query = New-RscMutationNutanix -DeletePrismCentral
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteSnapshot operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: DeleteSnapshot
             
             $query = New-RscMutationNutanix -DeleteSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	location = $someInternalDeleteNutanixSnapshotRequestLocation # Call [Enum]::GetValues([RubrikSecurityCloud.Types.InternalDeleteNutanixSnapshotRequestLocation]) for enum values.
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteSnapshots operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: DeleteSnapshots
             
             $query = New-RscMutationNutanix -DeleteSnapshots
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DownloadFilesSnapshot operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: DownloadFilesSnapshot
             
             $query = New-RscMutationNutanix -DownloadFilesSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		legalHoldDownloadConfig = @{
             			# REQUIRED
             			isLegalHoldDownload = $someBoolean
             		}
             		# REQUIRED
             		paths = @(
             			$someString
             		)
             	}
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	userNote = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DownloadSnapshot operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: DownloadSnapshot
             
             $query = New-RscMutationNutanix -DownloadSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DownloadVmFromLocation operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: DownloadVmFromLocation
             
             $query = New-RscMutationNutanix -DownloadVmFromLocation
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	downloadConfig = @{
             		# OPTIONAL
             		slaId = $someString
             	}
             	# REQUIRED
             	locationId = $someString
             	# REQUIRED
             	snapshotId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ExportSnapshot operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: ExportSnapshot
             
             $query = New-RscMutationNutanix -ExportSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		nutanixClusterId = $someString
             		# OPTIONAL
             		powerOn = $someBoolean
             		# OPTIONAL
             		removeNetworkDevices = $someBoolean
             		# OPTIONAL
             		vmName = $someString
             		# OPTIONAL
             		keepMacAddresses = $someBoolean
             		# OPTIONAL
             		nicNetworkUuids = @(
             			$someString
             		)
             		# REQUIRED
             		containerNaturalId = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the MigrateMountV1 operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: MigrateMountV1
             
             $query = New-RscMutationNutanix -MigrateMountV1
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the MountSnapshotV1 operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: MountSnapshotV1
             
             $query = New-RscMutationNutanix -MountSnapshotV1
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		containerNaturalId = $someString
             		# OPTIONAL
             		nutanixClusterId = $someString
             		# OPTIONAL
             		shouldMigrateImmediately = $someBoolean
             		# OPTIONAL
             		shouldPowerOn = $someBoolean
             		# OPTIONAL
             		shouldRemoveNetwork = $someBoolean
             		# OPTIONAL
             		targetNetwork = $someString
             		# OPTIONAL
             		vmName = $someString
             		# OPTIONAL
             		keepMacAddresses = $someBoolean
             		# OPTIONAL
             		nicNetworkUuids = @(
             			$someString
             		)
             		# REQUIRED
             		shouldDisableMigration = $someBoolean
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PatchMountV1 operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: PatchMountV1
             
             $query = New-RscMutationNutanix -PatchMountV1
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# REQUIRED
             		shouldPowerOn = $someBoolean
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: PatchNutanixMountV1Reply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RefreshCluster operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: RefreshCluster
             
             $query = New-RscMutationNutanix -RefreshCluster
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RefreshPrismCentral operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: RefreshPrismCentral
             
             $query = New-RscMutationNutanix -RefreshPrismCentral
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RegisterAgentVm operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: RegisterAgentVm
             
             $query = New-RscMutationNutanix -RegisterAgentVm
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RestoreFilesSnapshot operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: RestoreFilesSnapshot
             
             $query = New-RscMutationNutanix -RestoreFilesSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		targetVirtualMachineId = $someString
             		# REQUIRED
             		restoreConfig = @(
             			@{
             				# REQUIRED
             				path = $someString
             				# REQUIRED
             				restorePath = $someString
             			}
             		)
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateCluster operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: UpdateCluster
             
             $query = New-RscMutationNutanix -UpdateCluster
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	patchProperties = @{
             		# OPTIONAL
             		caCerts = $someString
             		# OPTIONAL
             		configuredSlaDomainId = $someString
             		# OPTIONAL
             		hostname = $someString
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		username = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateNutanixClusterReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdatePrismCentral operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: UpdatePrismCentral
             
             $query = New-RscMutationNutanix -UpdatePrismCentral
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	patchProperties = @{
             		# OPTIONAL
             		caCerts = $someString
             		# OPTIONAL
             		configuredSlaDomainId = $someString
             		# OPTIONAL
             		hostname = $someString
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		username = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateNutanixPrismCentralReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateVm operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: UpdateVm
             
             $query = New-RscMutationNutanix -UpdateVm
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	vmPatchProperties = @{
             		# OPTIONAL
             		configuredSlaDomainId = $someString
             		# OPTIONAL
             		excludedDiskIds = @(
             			$someString
             		)
             		# OPTIONAL
             		isPaused = $someBoolean
             		# OPTIONAL
             		postBackupScript = @{
             			# REQUIRED
             			failureHandling = $someNutanixVirtualMachineScriptDetailFailureHandling # Call [Enum]::GetValues([RubrikSecurityCloud.Types.NutanixVirtualMachineScriptDetailFailureHandling]) for enum values.
             			# REQUIRED
             			scriptPath = $someString
             			# REQUIRED
             			timeoutMs = $someInt64
             		}
             		# OPTIONAL
             		postSnapScript = @{
             			# REQUIRED
             			failureHandling = $someNutanixVirtualMachineScriptDetailFailureHandling # Call [Enum]::GetValues([RubrikSecurityCloud.Types.NutanixVirtualMachineScriptDetailFailureHandling]) for enum values.
             			# REQUIRED
             			scriptPath = $someString
             			# REQUIRED
             			timeoutMs = $someInt64
             		}
             		# OPTIONAL
             		preBackupScript = @{
             			# REQUIRED
             			failureHandling = $someNutanixVirtualMachineScriptDetailFailureHandling # Call [Enum]::GetValues([RubrikSecurityCloud.Types.NutanixVirtualMachineScriptDetailFailureHandling]) for enum values.
             			# REQUIRED
             			scriptPath = $someString
             			# REQUIRED
             			timeoutMs = $someInt64
             		}
             		# OPTIONAL
             		snapshotConsistencyMandate = $someCdmNutanixSnapshotConsistencyMandate # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CdmNutanixSnapshotConsistencyMandate]) for enum values.
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationO365">
             <summary>
             Create a new RscQuery object for any of the 31
             operations in the 'O365' API domain:
             AddOrg, BackupMailbox, BackupOnedrive, BackupSharePointSite, BackupSharepointDrive, BackupSharepointList, BackupTeam, CreateAppComplete, CreateAppKickoff, DeleteAzureApp, DeleteOrg, DeleteServiceAccount, EnableSharePoint, EnableTeams, ExportMailbox, InsertCustomerApp, OauthConsentComplete, OauthConsentKickoff, PdlGroups, RefreshOrg, RestoreMailbox, RestoreSnappable, RestoreTeamsConversations, RestoreTeamsFiles, SaaSSetupKickoff, SaasSetupComplete, SetServiceAccount, SetupKickoff, UpdateAppAuthStatus, UpdateAppPermissions, or UpdateOrgCustomName.
             </summary>
             <description>
             New-RscMutationO365 creates a new
             mutation object for operations
             in the 'O365' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 31 operations
             in the 'O365' API domain. Select the operation this
             query is for by specifying the appropriate switch parameter;
             one of: -AddOrg, -BackupMailbox, -BackupOnedrive, -BackupSharePointSite, -BackupSharepointDrive, -BackupSharepointList, -BackupTeam, -CreateAppComplete, -CreateAppKickoff, -DeleteAzureApp, -DeleteOrg, -DeleteServiceAccount, -EnableSharePoint, -EnableTeams, -ExportMailbox, -InsertCustomerApp, -OauthConsentComplete, -OauthConsentKickoff, -PdlGroups, -RefreshOrg, -RestoreMailbox, -RestoreSnappable, -RestoreTeamsConversations, -RestoreTeamsFiles, -SaaSSetupKickoff, -SaasSetupComplete, -SetServiceAccount, -SetupKickoff, -UpdateAppAuthStatus, -UpdateAppPermissions, -UpdateOrgCustomName.
             Alternatively, you can specify the operation by setting the
             -Op parameter, for example: -Op AddOrg,
             which is equivalent to specifying -AddOrg.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationO365 -AddOrg).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationO365 -AddOrg).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AddOrg operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: AddOrg
             
             $query = New-RscMutationO365 -AddOrg
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	tenantId = $someString
             	# REQUIRED
             	stateToken = $someString
             	# REQUIRED
             	exocomputeClusterId = $someString
             	# REQUIRED
             	appTypes = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AddO365OrgResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BackupMailbox operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: BackupMailbox
             
             $query = New-RscMutationO365 -BackupMailbox
             
             # REQUIRED
             $query.Var.mailboxIds = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BackupOnedrive operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: BackupOnedrive
             
             $query = New-RscMutationO365 -BackupOnedrive
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snappableUuids = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BackupSharePointSite operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: BackupSharePointSite
             
             $query = New-RscMutationO365 -BackupSharePointSite
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	siteFid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateOnDemandJobReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BackupSharepointDrive operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: BackupSharepointDrive
             
             $query = New-RscMutationO365 -BackupSharepointDrive
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snappableUuids = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BackupSharepointList operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: BackupSharepointList
             
             $query = New-RscMutationO365 -BackupSharepointList
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snappableUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateOnDemandJobReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BackupTeam operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: BackupTeam
             
             $query = New-RscMutationO365 -BackupTeam
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snappableUuids = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateAppComplete operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: CreateAppComplete
             
             $query = New-RscMutationO365 -CreateAppComplete
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	appClientId = $someString
             	# REQUIRED
             	stateToken = $someString
             	# REQUIRED
             	tenantId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateAppKickoff operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: CreateAppKickoff
             
             $query = New-RscMutationO365 -CreateAppKickoff
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	orgId = $someString
             	# REQUIRED
             	appType = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateO365AppKickoffResp
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteAzureApp operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: DeleteAzureApp
             
             $query = New-RscMutationO365 -DeleteAzureApp
             
             # REQUIRED
             $query.Var.o365AppClientId = $someString
             # REQUIRED
             $query.Var.o365AppType = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteOrg operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: DeleteOrg
             
             $query = New-RscMutationO365 -DeleteOrg
             
             # REQUIRED
             $query.Var.orgId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateOnDemandJobReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteServiceAccount operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: DeleteServiceAccount
             
             $query = New-RscMutationO365 -DeleteServiceAccount
             
             # REQUIRED
             $query.Var.orgId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the EnableSharePoint operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: EnableSharePoint
             
             $query = New-RscMutationO365 -EnableSharePoint
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	exocomputeClusterId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the EnableTeams operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: EnableTeams
             
             $query = New-RscMutationO365 -EnableTeams
             
             # REQUIRED
             $query.Var.exocomputeClusterId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ExportMailbox operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: ExportMailbox
             
             $query = New-RscMutationO365 -ExportMailbox
             
             # REQUIRED
             $query.Var.exportConfig = @{
             	# OPTIONAL
             	orgUuid = $someString
             	# REQUIRED
             	fromMailboxUuid = $someString
             	# REQUIRED
             	toMailboxUuid = $someString
             	# OPTIONAL
             	snapshotUuid = $someString
             	# REQUIRED
             	exportConfigs = @(
             		@{
             			# REQUIRED
             			SnapshotUUID = $someString
             			# OPTIONAL
             			EmailID = $someString
             			# OPTIONAL
             			FolderID = $someString
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateOnDemandJobReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the InsertCustomerApp operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: InsertCustomerApp
             
             $query = New-RscMutationO365 -InsertCustomerApp
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	appType = $someString
             	# REQUIRED
             	appClientId = $someString
             	# REQUIRED
             	appClientSecret = $someString
             	# REQUIRED
             	subscriptionId = $someString
             	# OPTIONAL
             	base64AppCertificate = $someString
             	# OPTIONAL
             	base64AppPrivateKey = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the OauthConsentComplete operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: OauthConsentComplete
             
             $query = New-RscMutationO365 -OauthConsentComplete
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	tenantId = $someString
             	# REQUIRED
             	code = $someString
             	# REQUIRED
             	stateToken = $someString
             	# REQUIRED
             	redirectUrl = $someString
             	# REQUIRED
             	resourceNaturalId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365OauthConsentCompleteReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the OauthConsentKickoff operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: OauthConsentKickoff
             
             $query = New-RscMutationO365 -OauthConsentKickoff
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	orgId = $someString
             	# REQUIRED
             	appType = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365OauthConsentKickoffReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PdlGroups operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: PdlGroups
             
             $query = New-RscMutationO365 -PdlGroups
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	orgId = $someString
             	# REQUIRED
             	pdlAndWorkloadPairs = @(
             		@{
             			# REQUIRED
             			pdl = $someString
             			# REQUIRED
             			workload = $someWorkloadLevelHierarchy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.WorkloadLevelHierarchy]) for enum values.
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365PdlGroupsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RefreshOrg operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: RefreshOrg
             
             $query = New-RscMutationO365 -RefreshOrg
             
             # REQUIRED
             $query.Var.orgId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateOnDemandJobReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RestoreMailbox operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: RestoreMailbox
             
             $query = New-RscMutationO365 -RestoreMailbox
             
             # REQUIRED
             $query.Var.restoreConfig = @{
             	# OPTIONAL
             	orgUuid = $someString
             	# REQUIRED
             	mailboxUuid = $someString
             	# OPTIONAL
             	snapshotUuid = $someString
             	# REQUIRED
             	restoreConfigs = @(
             		@{
             			# REQUIRED
             			SnapshotUUID = $someString
             			# OPTIONAL
             			EmailID = $someString
             			# OPTIONAL
             			FolderID = $someString
             		}
             	)
             	# REQUIRED
             	actionType = $someO365RestoreActionType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.O365RestoreActionType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateOnDemandJobReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RestoreSnappable operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: RestoreSnappable
             
             $query = New-RscMutationO365 -RestoreSnappable
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snappableType = $someSnappableType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnappableType]) for enum values.
             	# REQUIRED
             	sourceSnappableUuid = $someString
             	# REQUIRED
             	destinationSnappableUuid = $someString
             	# REQUIRED
             	restoreConfig = @{
             		# OPTIONAL
             		SharePointDriveRestoreConfig = @{
             			# REQUIRED
             			driveRestoreConfig = @{
             				# REQUIRED
             				filesToRestore = @(
             					@{
             						# REQUIRED
             						fileId = $someString
             						# REQUIRED
             						fileName = $someString
             						# REQUIRED
             						fileSnapshotsToRestore = @(
             							@{
             								# REQUIRED
             								snapshotId = $someString
             								# REQUIRED
             								snapshotNum = $someInt
             								# REQUIRED
             								fileSize = $someInt64
             							}
             						)
             						# OPTIONAL
             						channelInfo = @{
             							# REQUIRED
             							TeamID = $someString
             							# OPTIONAL
             							ChannelID = $someString
             							# OPTIONAL
             							ChannelName = $someString
             							# OPTIONAL
             							ChannelFolderName = $someString
             							# OPTIONAL
             							ChannelNaturalId = $someString
             							# REQUIRED
             							channelMembershipType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             						}
             					}
             				)
             				# REQUIRED
             				foldersToRestore = @(
             					@{
             						# REQUIRED
             						folderId = $someString
             						# REQUIRED
             						folderName = $someString
             						# REQUIRED
             						folderSize = $someInt64
             						# REQUIRED
             						snapshotId = $someString
             						# REQUIRED
             						snapshotNum = $someInt
             						# OPTIONAL
             						channelInfo = @{
             							# REQUIRED
             							TeamID = $someString
             							# OPTIONAL
             							ChannelID = $someString
             							# OPTIONAL
             							ChannelName = $someString
             							# OPTIONAL
             							ChannelFolderName = $someString
             							# OPTIONAL
             							ChannelNaturalId = $someString
             							# REQUIRED
             							channelMembershipType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             						}
             					}
             				)
             				# REQUIRED
             				restoreFolderPath = $someString
             			}
             			# OPTIONAL
             			docLibName = $someString
             			# OPTIONAL
             			parentSiteUuid = $someString
             		}
             		# OPTIONAL
             		sharePointListRestoreConfig = @{
             			# REQUIRED
             			itemsToRestore = @(
             				@{
             					# REQUIRED
             					itemId = $someString
             					# REQUIRED
             					itemName = $someString
             					# REQUIRED
             					itemSnapshotsToRestore = @(
             						@{
             							# REQUIRED
             							snapshotId = $someString
             							# REQUIRED
             							snapshotNum = $someInt
             						}
             					)
             				}
             			)
             			# REQUIRED
             			foldersToRestore = @(
             				@{
             					# REQUIRED
             					folderId = $someString
             					# REQUIRED
             					folderName = $someString
             					# REQUIRED
             					folderSize = $someInt64
             					# REQUIRED
             					snapshotId = $someString
             					# REQUIRED
             					snapshotNum = $someInt
             					# OPTIONAL
             					channelInfo = @{
             						# REQUIRED
             						TeamID = $someString
             						# OPTIONAL
             						ChannelID = $someString
             						# OPTIONAL
             						ChannelName = $someString
             						# OPTIONAL
             						ChannelFolderName = $someString
             						# OPTIONAL
             						ChannelNaturalId = $someString
             						# REQUIRED
             						channelMembershipType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             					}
             				}
             			)
             			# REQUIRED
             			restoreFolderPath = $someString
             			# OPTIONAL
             			listName = $someString
             			# OPTIONAL
             			parentSiteUuid = $someString
             		}
             		# OPTIONAL
             		sharePointFullRestoreConfig = @{
             			# OPTIONAL
             			spObjectToRestore = @{
             				# REQUIRED
             				objectSharepointId = $someString
             				# REQUIRED
             				objectName = $someString
             				# OPTIONAL
             				objectType = $someSnappableType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnappableType]) for enum values.
             				# REQUIRED
             				snapshotId = $someString
             				# REQUIRED
             				snapshotNum = $someInt
             			}
             			# OPTIONAL
             			spItemsToRestore = @{
             				# REQUIRED
             				sharepointId = $someString
             				# OPTIONAL
             				snappableType = $someSnappableType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnappableType]) for enum values.
             				# REQUIRED
             				listItems = @(
             					@{
             						# REQUIRED
             						itemId = $someString
             						# REQUIRED
             						itemName = $someString
             						# REQUIRED
             						itemSnapshotsToRestore = @(
             							@{
             								# REQUIRED
             								snapshotId = $someString
             								# REQUIRED
             								snapshotNum = $someInt
             							}
             						)
             					}
             				)
             				# REQUIRED
             				folderItems = @(
             					@{
             						# REQUIRED
             						folderId = $someString
             						# REQUIRED
             						folderName = $someString
             						# REQUIRED
             						folderSize = $someInt64
             						# REQUIRED
             						snapshotId = $someString
             						# REQUIRED
             						snapshotNum = $someInt
             						# OPTIONAL
             						channelInfo = @{
             							# REQUIRED
             							TeamID = $someString
             							# OPTIONAL
             							ChannelID = $someString
             							# OPTIONAL
             							ChannelName = $someString
             							# OPTIONAL
             							ChannelFolderName = $someString
             							# OPTIONAL
             							ChannelNaturalId = $someString
             							# REQUIRED
             							channelMembershipType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             						}
             					}
             				)
             				# REQUIRED
             				fileItems = @(
             					@{
             						# REQUIRED
             						fileId = $someString
             						# REQUIRED
             						fileName = $someString
             						# REQUIRED
             						fileSnapshotsToRestore = @(
             							@{
             								# REQUIRED
             								snapshotId = $someString
             								# REQUIRED
             								snapshotNum = $someInt
             								# REQUIRED
             								fileSize = $someInt64
             							}
             						)
             						# OPTIONAL
             						channelInfo = @{
             							# REQUIRED
             							TeamID = $someString
             							# OPTIONAL
             							ChannelID = $someString
             							# OPTIONAL
             							ChannelName = $someString
             							# OPTIONAL
             							ChannelFolderName = $someString
             							# OPTIONAL
             							ChannelNaturalId = $someString
             							# REQUIRED
             							channelMembershipType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             						}
             					}
             				)
             				# REQUIRED
             				arePageLibraryItems = $someBoolean
             			}
             			# OPTIONAL
             			targetObjectUuid = $someString
             			# OPTIONAL
             			targetObjectType = $someSnappableType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnappableType]) for enum values.
             			# REQUIRED
             			shouldCreateNewObject = $someBoolean
             			# OPTIONAL
             			newObjectType = $someSnappableType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnappableType]) for enum values.
             			# OPTIONAL
             			newObjectName = $someString
             		}
             		# OPTIONAL
             		OneDriveRestoreConfig = @{
             			# REQUIRED
             			filesToRestore = @(
             				@{
             					# REQUIRED
             					fileId = $someString
             					# REQUIRED
             					fileName = $someString
             					# REQUIRED
             					fileSnapshotsToRestore = @(
             						@{
             							# REQUIRED
             							snapshotId = $someString
             							# REQUIRED
             							snapshotNum = $someInt
             							# REQUIRED
             							fileSize = $someInt64
             						}
             					)
             					# OPTIONAL
             					channelInfo = @{
             						# REQUIRED
             						TeamID = $someString
             						# OPTIONAL
             						ChannelID = $someString
             						# OPTIONAL
             						ChannelName = $someString
             						# OPTIONAL
             						ChannelFolderName = $someString
             						# OPTIONAL
             						ChannelNaturalId = $someString
             						# REQUIRED
             						channelMembershipType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             					}
             				}
             			)
             			# REQUIRED
             			foldersToRestore = @(
             				@{
             					# REQUIRED
             					folderId = $someString
             					# REQUIRED
             					folderName = $someString
             					# REQUIRED
             					folderSize = $someInt64
             					# REQUIRED
             					snapshotId = $someString
             					# REQUIRED
             					snapshotNum = $someInt
             					# OPTIONAL
             					channelInfo = @{
             						# REQUIRED
             						TeamID = $someString
             						# OPTIONAL
             						ChannelID = $someString
             						# OPTIONAL
             						ChannelName = $someString
             						# OPTIONAL
             						ChannelFolderName = $someString
             						# OPTIONAL
             						ChannelNaturalId = $someString
             						# REQUIRED
             						channelMembershipType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             					}
             				}
             			)
             			# REQUIRED
             			restoreFolderPath = $someString
             		}
             		# OPTIONAL
             		TeamsRestoreConfig = @{
             			# OPTIONAL
             			filesRestoreConfig = @{
             				# REQUIRED
             				filesToRestore = @(
             					@{
             						# REQUIRED
             						fileId = $someString
             						# REQUIRED
             						fileName = $someString
             						# REQUIRED
             						fileSnapshotsToRestore = @(
             							@{
             								# REQUIRED
             								snapshotId = $someString
             								# REQUIRED
             								snapshotNum = $someInt
             								# REQUIRED
             								fileSize = $someInt64
             							}
             						)
             						# OPTIONAL
             						channelInfo = @{
             							# REQUIRED
             							TeamID = $someString
             							# OPTIONAL
             							ChannelID = $someString
             							# OPTIONAL
             							ChannelName = $someString
             							# OPTIONAL
             							ChannelFolderName = $someString
             							# OPTIONAL
             							ChannelNaturalId = $someString
             							# REQUIRED
             							channelMembershipType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             						}
             					}
             				)
             				# REQUIRED
             				foldersToRestore = @(
             					@{
             						# REQUIRED
             						folderId = $someString
             						# REQUIRED
             						folderName = $someString
             						# REQUIRED
             						folderSize = $someInt64
             						# REQUIRED
             						snapshotId = $someString
             						# REQUIRED
             						snapshotNum = $someInt
             						# OPTIONAL
             						channelInfo = @{
             							# REQUIRED
             							TeamID = $someString
             							# OPTIONAL
             							ChannelID = $someString
             							# OPTIONAL
             							ChannelName = $someString
             							# OPTIONAL
             							ChannelFolderName = $someString
             							# OPTIONAL
             							ChannelNaturalId = $someString
             							# REQUIRED
             							channelMembershipType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             						}
             					}
             				)
             				# REQUIRED
             				restoreFolderPath = $someString
             			}
             			# OPTIONAL
             			conversationsRestoreConfig = @{
             				# OPTIONAL
             				SearchFilter = @{
             					# OPTIONAL
             					PostedTime = @{
             						# OPTIONAL
             						FromTime = $someInt64
             						# OPTIONAL
             						UntilTime = $someInt64
             					}
             					# OPTIONAL
             					PostedBy = $someString
             					# OPTIONAL
             					SnapshotId = $someString
             				}
             				# OPTIONAL
             				ChannelInfoForFullRestore = @{
             					# REQUIRED
             					TeamID = $someString
             					# OPTIONAL
             					ChannelID = $someString
             					# OPTIONAL
             					ChannelName = $someString
             					# OPTIONAL
             					ChannelFolderName = $someString
             					# OPTIONAL
             					ChannelFolderId = $someString
             					# OPTIONAL
             					ChannelNaturalId = $someString
             				}
             				# REQUIRED
             				RefreshTokenEncrypted = $someString
             				# REQUIRED
             				O365AppID = $someString
             				# REQUIRED
             				ChannelsToRestore = @(
             					@{
             						# REQUIRED
             						TeamID = $someString
             						# OPTIONAL
             						ChannelID = $someString
             						# OPTIONAL
             						ChannelName = $someString
             						# OPTIONAL
             						ChannelFolderName = $someString
             						# OPTIONAL
             						ChannelFolderId = $someString
             						# OPTIONAL
             						ChannelNaturalId = $someString
             					}
             				)
             				# REQUIRED
             				ShouldRestoreFileAttachments = $someBoolean
             			}
             			# OPTIONAL
             			destChannelInfo = @{
             				# REQUIRED
             				TeamID = $someString
             				# OPTIONAL
             				ChannelID = $someString
             				# OPTIONAL
             				ChannelName = $someString
             				# OPTIONAL
             				ChannelFolderName = $someString
             				# OPTIONAL
             				ChannelNaturalId = $someString
             				# REQUIRED
             				channelMembershipType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             			}
             			# REQUIRED
             			shouldCreateDestChannel = $someBoolean
             			# REQUIRED
             			channelType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             			# REQUIRED
             			restoreLatestPermissions = $someBoolean
             			# REQUIRED
             			snapshotSequenceNum = $someInt
             		}
             		# OPTIONAL
             		MailboxRestoreConfig = @{
             			# OPTIONAL
             			SnapshotUUID = $someString
             			# REQUIRED
             			RestoreConfigs = @(
             				@{
             					# REQUIRED
             					SnapshotUUID = $someString
             					# OPTIONAL
             					EmailID = $someString
             					# OPTIONAL
             					FolderID = $someString
             				}
             			)
             		}
             		# OPTIONAL
             		calendarRestoreConfig = @{
             			# REQUIRED
             			eventsToRestore = @(
             				@{
             					# REQUIRED
             					eventId = $someString
             					# REQUIRED
             					snapshotId = $someString
             				}
             			)
             			# REQUIRED
             			calendarsToRestore = @(
             				@{
             					# REQUIRED
             					calendarId = $someString
             					# REQUIRED
             					snapshotId = $someString
             				}
             			)
             			# REQUIRED
             			calendarGroupsToRestore = @(
             				@{
             					# REQUIRED
             					calendarGroupId = $someString
             					# REQUIRED
             					snapshotId = $someString
             				}
             			)
             		}
             		# OPTIONAL
             		contactsRestoreConfig = @{
             			# REQUIRED
             			contactsToRestore = @(
             				@{
             					# REQUIRED
             					contactId = $someString
             					# REQUIRED
             					snapshotId = $someString
             					# REQUIRED
             					snapshotNum = $someInt
             				}
             			)
             			# REQUIRED
             			contactFoldersToRestore = @(
             				@{
             					# REQUIRED
             					contactFolderId = $someString
             					# REQUIRED
             					snapshotId = $someString
             					# REQUIRED
             					snapshotNum = $someInt
             				}
             			)
             		}
             	}
             	# REQUIRED
             	actionType = $someO365RestoreActionType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.O365RestoreActionType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateOnDemandJobReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RestoreTeamsConversations operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: RestoreTeamsConversations
             
             $query = New-RscMutationO365 -RestoreTeamsConversations
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	teamUuid = $someString
             	# OPTIONAL
             	destTeamsChannelInfo = @{
             		# REQUIRED
             		TeamID = $someString
             		# OPTIONAL
             		ChannelID = $someString
             		# OPTIONAL
             		ChannelName = $someString
             		# OPTIONAL
             		ChannelFolderName = $someString
             		# OPTIONAL
             		ChannelNaturalId = $someString
             		# REQUIRED
             		channelMembershipType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             	}
             	# REQUIRED
             	shouldCreateDestChannel = $someBoolean
             	# OPTIONAL
             	channelInfoForFullRestore = @{
             		# REQUIRED
             		naturalId = $someString
             		# REQUIRED
             		name = $someString
             		# REQUIRED
             		folderId = $someString
             		# REQUIRED
             		membershipType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             	}
             	# REQUIRED
             	shouldRestoreFileAttachments = $someBoolean
             	# REQUIRED
             	teamChannels = @(
             		@{
             			# REQUIRED
             			naturalId = $someString
             			# REQUIRED
             			name = $someString
             			# REQUIRED
             			folderId = $someString
             			# REQUIRED
             			membershipType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             		}
             	)
             	# OPTIONAL
             	teamsConversationsSearchFilter = @{
             		# OPTIONAL
             		postedTime = @{
             			# OPTIONAL
             			fromTime = $someDateTime
             			# OPTIONAL
             			untilTime = $someDateTime
             		}
             		# OPTIONAL
             		channelNaturalId = $someString
             		# OPTIONAL
             		postedBy = $someString
             		# OPTIONAL
             		snapshotId = $someString
             		# OPTIONAL
             		parentId = $someString
             		# OPTIONAL
             		convId = $someString
             		# OPTIONAL
             		snapshotNum = $someInt
             		# OPTIONAL
             		includeArchived = $someBoolean
             		# OPTIONAL
             		fetchAllPostSenders = $someString
             		# OPTIONAL
             		skipPostsAttachments = $someBoolean
             	}
             	# REQUIRED
             	refreshTokenEncrypted = $someString
             	# REQUIRED
             	o365AppId = $someString
             	# REQUIRED
             	channelRecoveryType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             	# REQUIRED
             	recoverWithLatestPermissions = $someBoolean
             	# REQUIRED
             	snapshotSequenceNum = $someInt
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateOnDemandJobReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RestoreTeamsFiles operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: RestoreTeamsFiles
             
             $query = New-RscMutationO365 -RestoreTeamsFiles
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	filesToRestore = @(
             		@{
             			# REQUIRED
             			fileId = $someString
             			# REQUIRED
             			fileName = $someString
             			# REQUIRED
             			fileSnapshotsToRestore = @(
             				@{
             					# REQUIRED
             					snapshotId = $someString
             					# REQUIRED
             					snapshotNum = $someInt
             					# REQUIRED
             					fileSize = $someInt64
             				}
             			)
             			# OPTIONAL
             			channelInfo = @{
             				# REQUIRED
             				TeamID = $someString
             				# OPTIONAL
             				ChannelID = $someString
             				# OPTIONAL
             				ChannelName = $someString
             				# OPTIONAL
             				ChannelFolderName = $someString
             				# OPTIONAL
             				ChannelNaturalId = $someString
             				# REQUIRED
             				channelMembershipType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             			}
             		}
             	)
             	# REQUIRED
             	foldersToRestore = @(
             		@{
             			# REQUIRED
             			folderId = $someString
             			# REQUIRED
             			folderName = $someString
             			# REQUIRED
             			folderSize = $someInt64
             			# REQUIRED
             			snapshotId = $someString
             			# REQUIRED
             			snapshotNum = $someInt
             			# OPTIONAL
             			channelInfo = @{
             				# REQUIRED
             				TeamID = $someString
             				# OPTIONAL
             				ChannelID = $someString
             				# OPTIONAL
             				ChannelName = $someString
             				# OPTIONAL
             				ChannelFolderName = $someString
             				# OPTIONAL
             				ChannelNaturalId = $someString
             				# REQUIRED
             				channelMembershipType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             			}
             		}
             	)
             	# OPTIONAL
             	destTeamsChannelInfo = @{
             		# REQUIRED
             		TeamID = $someString
             		# OPTIONAL
             		ChannelID = $someString
             		# OPTIONAL
             		ChannelName = $someString
             		# OPTIONAL
             		ChannelFolderName = $someString
             		# OPTIONAL
             		ChannelNaturalId = $someString
             		# REQUIRED
             		channelMembershipType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             	}
             	# REQUIRED
             	shouldCreateDestChannel = $someBoolean
             	# REQUIRED
             	actionType = $someO365RestoreActionType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.O365RestoreActionType]) for enum values.
             	# REQUIRED
             	channelRecoveryType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             	# REQUIRED
             	recoverWithLatestPermissions = $someBoolean
             	# REQUIRED
             	snapshotSequenceNum = $someInt
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateOnDemandJobReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SaaSSetupKickoff operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: SaaSSetupKickoff
             
             $query = New-RscMutationO365 -SaaSSetupKickoff
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365SaasSetupKickoffReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SaasSetupComplete operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: SaasSetupComplete
             
             $query = New-RscMutationO365 -SaasSetupComplete
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	tenantId = $someString
             	# REQUIRED
             	regionName = $someString
             	# REQUIRED
             	stateToken = $someString
             	# REQUIRED
             	appTypes = @(
             		$someString
             	)
             	# OPTIONAL
             	kmsSpec = @{
             		# OPTIONAL
             		cloudType = $someO365AzureCloudType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.O365AzureCloudType]) for enum values.
             		# OPTIONAL
             		tenantId = $someString
             		# OPTIONAL
             		kmsId = $someString
             		# OPTIONAL
             		appId = $someString
             		# OPTIONAL
             		appSecret = $someString
             		# OPTIONAL
             		keyName = $someString
             		# OPTIONAL
             		kekNameColossus = $someString
             	}
             	# REQUIRED
             	storeBackupInSameRegionAsData = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AddO365OrgResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SetServiceAccount operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: SetServiceAccount
             
             $query = New-RscMutationO365 -SetServiceAccount
             
             # REQUIRED
             $query.Var.username = $someString
             # REQUIRED
             $query.Var.appPassword = $someString
             # REQUIRED
             $query.Var.orgId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SetupKickoff operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: SetupKickoff
             
             $query = New-RscMutationO365 -SetupKickoff
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365SetupKickoffResp
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateAppAuthStatus operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: UpdateAppAuthStatus
             
             $query = New-RscMutationO365 -UpdateAppAuthStatus
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	o365OrgId = $someString
             	# REQUIRED
             	o365AppId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateO365AppAuthStatusReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateAppPermissions operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: UpdateAppPermissions
             
             $query = New-RscMutationO365 -UpdateAppPermissions
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	o365AppType = $someO365AppType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.O365AppType]) for enum values.
             	# REQUIRED
             	o365AppId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateOrgCustomName operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: UpdateOrgCustomName
             
             $query = New-RscMutationO365 -UpdateOrgCustomName
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	orgUuid = $someString
             	# REQUIRED
             	customName = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateO365OrgCustomNameReply
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationOracle">
             <summary>
             Create a new RscQuery object for any of the 18
             operations in the 'Oracle' API domain:
             BulkUpdateDatabases, BulkUpdateHosts, BulkUpdateRacs, CreatePdbRestore, DeleteAllDatabaseSnapshots, DeleteMount, DownloadDatabaseSnapshot, ExportDatabase, ExportTablespace, InstantRecoverSnapshot, MountDatabase, RefreshDatabase, RestoreLogs, TakeOnDemandDatabaseSnapshot, TakeOnDemandLogSnapshot, UpdateDataGuardGroup, ValidateAcoFile, or ValidateDatabaseBackups.
             </summary>
             <description>
             New-RscMutationOracle creates a new
             mutation object for operations
             in the 'Oracle' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 18 operations
             in the 'Oracle' API domain. Select the operation this
             query is for by specifying the appropriate switch parameter;
             one of: -BulkUpdateDatabases, -BulkUpdateHosts, -BulkUpdateRacs, -CreatePdbRestore, -DeleteAllDatabaseSnapshots, -DeleteMount, -DownloadDatabaseSnapshot, -ExportDatabase, -ExportTablespace, -InstantRecoverSnapshot, -MountDatabase, -RefreshDatabase, -RestoreLogs, -TakeOnDemandDatabaseSnapshot, -TakeOnDemandLogSnapshot, -UpdateDataGuardGroup, -ValidateAcoFile, -ValidateDatabaseBackups.
             Alternatively, you can specify the operation by setting the
             -Op parameter, for example: -Op BulkUpdateDatabases,
             which is equivalent to specifying -BulkUpdateDatabases.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationOracle -BulkUpdateDatabases).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationOracle -BulkUpdateDatabases).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the BulkUpdateDatabases operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: BulkUpdateDatabases
             
             $query = New-RscMutationOracle -BulkUpdateDatabases
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	bulkUpdateProperties = @{
             		# OPTIONAL
             		oracleUpdate = @{
             			# OPTIONAL
             			configuredSlaDomainId = $someString
             			# OPTIONAL
             			hostMount = $someString
             			# OPTIONAL
             			logBackupFrequencyInMinutes = $someInt
             			# OPTIONAL
             			logRetentionHours = $someInt
             			# OPTIONAL
             			numChannels = $someInt
             			# OPTIONAL
             			hostLogRetentionHours = $someInt
             			# OPTIONAL
             			configuredSlaDomainIdDeprecated = $someString
             			# OPTIONAL
             			nodeOrder = @(
             				@{
             					# REQUIRED
             					nodeName = $someString
             					# REQUIRED
             					order = $someInt
             				}
             			)
             			# OPTIONAL
             			shouldDistributeBackupsAutomatically = $someBoolean
             			# OPTIONAL
             			oracleUpdateCommon = @{
             				# OPTIONAL
             				hostLogRetentionHours = $someInt
             				# OPTIONAL
             				hostMount = $someString
             				# OPTIONAL
             				logBackupFrequencyInMinutes = $someInt
             				# OPTIONAL
             				logRetentionHours = $someInt
             				# OPTIONAL
             				numChannels = $someInt
             				# OPTIONAL
             				hasLogConfigFromSla = $someBoolean
             				# OPTIONAL
             				shouldEnableHighFileCountSupport = $someBoolean
             				# OPTIONAL
             				shouldUseSecureThriftForDataTransfer = $someBoolean
             				# OPTIONAL
             				sectionSizeInGb = $someInt
             			}
             		}
             		# REQUIRED
             		ids = @(
             			$someString
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BulkUpdateOracleDatabasesReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BulkUpdateHosts operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: BulkUpdateHosts
             
             $query = New-RscMutationOracle -BulkUpdateHosts
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	bulkUpdateProperties = @{
             		# OPTIONAL
             		oracleUpdate = @{
             			# OPTIONAL
             			configuredSlaDomainId = $someString
             			# OPTIONAL
             			hostMount = $someString
             			# OPTIONAL
             			logBackupFrequencyInMinutes = $someInt
             			# OPTIONAL
             			logRetentionHours = $someInt
             			# OPTIONAL
             			numChannels = $someInt
             			# OPTIONAL
             			hostLogRetentionHours = $someInt
             			# OPTIONAL
             			configuredSlaDomainIdDeprecated = $someString
             			# OPTIONAL
             			nodeOrder = @(
             				@{
             					# REQUIRED
             					nodeName = $someString
             					# REQUIRED
             					order = $someInt
             				}
             			)
             			# OPTIONAL
             			shouldDistributeBackupsAutomatically = $someBoolean
             			# OPTIONAL
             			oracleUpdateCommon = @{
             				# OPTIONAL
             				hostLogRetentionHours = $someInt
             				# OPTIONAL
             				hostMount = $someString
             				# OPTIONAL
             				logBackupFrequencyInMinutes = $someInt
             				# OPTIONAL
             				logRetentionHours = $someInt
             				# OPTIONAL
             				numChannels = $someInt
             				# OPTIONAL
             				hasLogConfigFromSla = $someBoolean
             				# OPTIONAL
             				shouldEnableHighFileCountSupport = $someBoolean
             				# OPTIONAL
             				shouldUseSecureThriftForDataTransfer = $someBoolean
             				# OPTIONAL
             				sectionSizeInGb = $someInt
             			}
             		}
             		# REQUIRED
             		ids = @(
             			$someString
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BulkUpdateOracleHostsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BulkUpdateRacs operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: BulkUpdateRacs
             
             $query = New-RscMutationOracle -BulkUpdateRacs
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	bulkUpdateProperties = @{
             		# OPTIONAL
             		oracleUpdate = @{
             			# OPTIONAL
             			configuredSlaDomainId = $someString
             			# OPTIONAL
             			hostMount = $someString
             			# OPTIONAL
             			logBackupFrequencyInMinutes = $someInt
             			# OPTIONAL
             			logRetentionHours = $someInt
             			# OPTIONAL
             			numChannels = $someInt
             			# OPTIONAL
             			hostLogRetentionHours = $someInt
             			# OPTIONAL
             			configuredSlaDomainIdDeprecated = $someString
             			# OPTIONAL
             			nodeOrder = @(
             				@{
             					# REQUIRED
             					nodeName = $someString
             					# REQUIRED
             					order = $someInt
             				}
             			)
             			# OPTIONAL
             			shouldDistributeBackupsAutomatically = $someBoolean
             			# OPTIONAL
             			oracleUpdateCommon = @{
             				# OPTIONAL
             				hostLogRetentionHours = $someInt
             				# OPTIONAL
             				hostMount = $someString
             				# OPTIONAL
             				logBackupFrequencyInMinutes = $someInt
             				# OPTIONAL
             				logRetentionHours = $someInt
             				# OPTIONAL
             				numChannels = $someInt
             				# OPTIONAL
             				hasLogConfigFromSla = $someBoolean
             				# OPTIONAL
             				shouldEnableHighFileCountSupport = $someBoolean
             				# OPTIONAL
             				shouldUseSecureThriftForDataTransfer = $someBoolean
             				# OPTIONAL
             				sectionSizeInGb = $someInt
             			}
             		}
             		# REQUIRED
             		ids = @(
             			$someString
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BulkUpdateOracleRacsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreatePdbRestore operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: CreatePdbRestore
             
             $query = New-RscMutationOracle -CreatePdbRestore
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# REQUIRED
             		pdbsToRestore = @(
             			$someString
             		)
             		# REQUIRED
             		recoveryPoint = @{
             			# OPTIONAL
             			snapshotId = $someString
             			# OPTIONAL
             			timestampMs = $someInt64
             		}
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteAllDatabaseSnapshots operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: DeleteAllDatabaseSnapshots
             
             $query = New-RscMutationOracle -DeleteAllDatabaseSnapshots
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteMount operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: DeleteMount
             
             $query = New-RscMutationOracle -DeleteMount
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	force = $someBoolean
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DownloadDatabaseSnapshot operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: DownloadDatabaseSnapshot
             
             $query = New-RscMutationOracle -DownloadDatabaseSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snapshotId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ExportDatabase operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: ExportDatabase
             
             $query = New-RscMutationOracle -ExportDatabase
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	request = @{
             		# REQUIRED
             		config = @{
             			# OPTIONAL
             			restoreFilesPath = $someString
             			# OPTIONAL
             			shouldRestoreFilesOnly = $someBoolean
             			# OPTIONAL
             			targetMountPath = $someString
             			# OPTIONAL
             			advancedRecoveryConfigBase64 = $someString
             			# OPTIONAL
             			archiveLogPath = $someString
             			# OPTIONAL
             			cloneDbName = $someString
             			# OPTIONAL
             			customPfilePath = $someString
             			# OPTIONAL
             			numChannels = $someInt
             			# OPTIONAL
             			postScriptPath = $someString
             			# OPTIONAL
             			preScriptPath = $someString
             			# OPTIONAL
             			shouldStopRecoveryOnPreScriptFailure = $someBoolean
             			# OPTIONAL
             			pdbsToClone = @(
             				$someString
             			)
             			# OPTIONAL
             			shouldSkipDropDbInUndo = $someBoolean
             			# OPTIONAL
             			shouldAllowRenameToSource = $someBoolean
             			# REQUIRED
             			recoveryPoint = @{
             				# OPTIONAL
             				snapshotId = $someString
             				# OPTIONAL
             				timestampMs = $someInt64
             			}
             			# REQUIRED
             			targetOracleHostOrRacId = $someString
             		}
             		# REQUIRED
             		id = $someString
             	}
             	# OPTIONAL
             	advancedRecoveryConfigMap = @(
             		@{
             			# OPTIONAL
             			key = $someString
             			# OPTIONAL
             			value = $someString
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ExportTablespace operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: ExportTablespace
             
             $query = New-RscMutationOracle -ExportTablespace
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		exposeAllLogs = $someBoolean
             		# REQUIRED
             		auxiliaryDestinationPath = $someString
             		# REQUIRED
             		recoveryPoint = @{
             			# OPTIONAL
             			snapshotId = $someString
             			# OPTIONAL
             			timestampMs = $someInt64
             		}
             		# REQUIRED
             		tablespaceName = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the InstantRecoverSnapshot operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: InstantRecoverSnapshot
             
             $query = New-RscMutationOracle -InstantRecoverSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		numChannels = $someInt
             		# REQUIRED
             		recoveryPoint = @{
             			# OPTIONAL
             			snapshotId = $someString
             			# OPTIONAL
             			timestampMs = $someInt64
             		}
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the MountDatabase operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: MountDatabase
             
             $query = New-RscMutationOracle -MountDatabase
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	request = @{
             		# REQUIRED
             		config = @{
             			# OPTIONAL
             			shouldMountFilesOnly = $someBoolean
             			# OPTIONAL
             			targetMountPath = $someString
             			# OPTIONAL
             			advancedRecoveryConfigBase64 = $someString
             			# OPTIONAL
             			customPfilePath = $someString
             			# OPTIONAL
             			numChannels = $someInt
             			# OPTIONAL
             			postScriptPath = $someString
             			# OPTIONAL
             			preScriptPath = $someString
             			# OPTIONAL
             			shouldStopRecoveryOnPreScriptFailure = $someBoolean
             			# OPTIONAL
             			pdbsToLiveMount = @(
             				$someString
             			)
             			# OPTIONAL
             			targetRacHostIds = @(
             				$someString
             			)
             			# OPTIONAL
             			lmDbName = $someString
             			# OPTIONAL
             			targetRacPrimaryHostId = $someString
             			# OPTIONAL
             			shouldAllowRenameToSource = $someBoolean
             			# REQUIRED
             			recoveryPoint = @{
             				# OPTIONAL
             				snapshotId = $someString
             				# OPTIONAL
             				timestampMs = $someInt64
             			}
             			# REQUIRED
             			targetOracleHostOrRacId = $someString
             		}
             		# REQUIRED
             		id = $someString
             	}
             	# OPTIONAL
             	advancedRecoveryConfigMap = @(
             		@{
             			# OPTIONAL
             			key = $someString
             			# OPTIONAL
             			value = $someString
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RefreshDatabase operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: RefreshDatabase
             
             $query = New-RscMutationOracle -RefreshDatabase
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RestoreLogs operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: RestoreLogs
             
             $query = New-RscMutationOracle -RestoreLogs
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		targetMountPath = $someString
             		# REQUIRED
             		oracleLogRecoveryRange = @{
             			# OPTIONAL
             			oracleTimeRange = @{
             				# OPTIONAL
             				endTime = $someDateTime
             				# OPTIONAL
             				startTime = $someDateTime
             			}
             		}
             		# REQUIRED
             		shouldMountFilesOnly = $someBoolean
             		# REQUIRED
             		targetOracleHostOrRacId = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TakeOnDemandDatabaseSnapshot operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: TakeOnDemandDatabaseSnapshot
             
             $query = New-RscMutationOracle -TakeOnDemandDatabaseSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		forceFullSnapshot = $someBoolean
             		# OPTIONAL
             		baseOnDemandSnapshotConfig = @{
             			# OPTIONAL
             			slaId = $someString
             		}
             	}
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	userNote = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TakeOnDemandLogSnapshot operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: TakeOnDemandLogSnapshot
             
             $query = New-RscMutationOracle -TakeOnDemandLogSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateDataGuardGroup operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: UpdateDataGuardGroup
             
             $query = New-RscMutationOracle -UpdateDataGuardGroup
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	updateProperties = @{
             		# OPTIONAL
             		preferredDgMemberUniqueNames = @(
             			$someString
             		)
             		# OPTIONAL
             		shouldBackupFromPrimaryOnly = $someBoolean
             		# OPTIONAL
             		oracleUpdateCommon = @{
             			# OPTIONAL
             			hostLogRetentionHours = $someInt
             			# OPTIONAL
             			hostMount = $someString
             			# OPTIONAL
             			logBackupFrequencyInMinutes = $someInt
             			# OPTIONAL
             			logRetentionHours = $someInt
             			# OPTIONAL
             			numChannels = $someInt
             			# OPTIONAL
             			hasLogConfigFromSla = $someBoolean
             			# OPTIONAL
             			shouldEnableHighFileCountSupport = $someBoolean
             			# OPTIONAL
             			shouldUseSecureThriftForDataTransfer = $someBoolean
             			# OPTIONAL
             			sectionSizeInGb = $someInt
             		}
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: OracleDbDetail
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ValidateAcoFile operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: ValidateAcoFile
             
             $query = New-RscMutationOracle -ValidateAcoFile
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	acoContentsBase64 = $someString
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	isLiveMount = $someBoolean
             	# REQUIRED
             	dbId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ValidateOracleAcoFileReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ValidateDatabaseBackups operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: ValidateDatabaseBackups
             
             $query = New-RscMutationOracle -ValidateDatabaseBackups
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		numChannels = $someInt
             		# OPTIONAL
             		sgaMaxSizeInMb = $someInt64
             		# OPTIONAL
             		targetMountPath = $someString
             		# OPTIONAL
             		targetOracleHome = $someString
             		# REQUIRED
             		recoveryPoint = @{
             			# OPTIONAL
             			snapshotId = $someString
             			# OPTIONAL
             			timestampMs = $someInt64
             		}
             		# REQUIRED
             		targetOracleHostOrRacId = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationSla">
             <summary>
             Create a new RscQuery object for any of the 9
             operations in the 'SLA' API domain:
             Assign, AssignRetentionToSnappables, AssignRetentionToSnapshots, AssignsForSnappableHierarchies, CreateGlobal, ExportManagedVolumeSnapshot, GetPendingAssignments, Pause, or UpdateGlobal.
             </summary>
             <description>
             New-RscMutationSla creates a new
             mutation object for operations
             in the 'SLA' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 9 operations
             in the 'SLA' API domain. Select the operation this
             query is for by specifying the appropriate switch parameter;
             one of: -Assign, -AssignRetentionToSnappables, -AssignRetentionToSnapshots, -AssignsForSnappableHierarchies, -CreateGlobal, -ExportManagedVolumeSnapshot, -GetPendingAssignments, -Pause, -UpdateGlobal.
             Alternatively, you can specify the operation by setting the
             -Op parameter, for example: -Op Assign,
             which is equivalent to specifying -Assign.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationSla -Assign).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationSla -Assign).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the Assign operation
             of the 'SLA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    SLA
             # API Operation: Assign
             
             $query = New-RscMutationSla -Assign
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	slaDomainAssignType = $someSlaAssignTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SlaAssignTypeEnum]) for enum values.
             	# OPTIONAL
             	slaOptionalId = $someString
             	# REQUIRED
             	objectIds = @(
             		$someString
             	)
             	# OPTIONAL
             	applicableWorkloadType = $someWorkloadLevelHierarchy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.WorkloadLevelHierarchy]) for enum values.
             	# OPTIONAL
             	shouldApplyToExistingSnapshots = $someBoolean
             	# OPTIONAL
             	shouldApplyToNonPolicySnapshots = $someBoolean
             	# OPTIONAL
             	existingSnapshotRetention = $someGlobalExistingSnapshotRetention # Call [Enum]::GetValues([RubrikSecurityCloud.Types.GlobalExistingSnapshotRetention]) for enum values.
             	# OPTIONAL
             	userNote = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SlaAssignResult
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AssignRetentionToSnappables operation
             of the 'SLA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    SLA
             # API Operation: AssignRetentionToSnappables
             
             $query = New-RscMutationSla -AssignRetentionToSnappables
             
             # OPTIONAL
             $query.Var.globalSlaOptionalFid = $someString
             # REQUIRED
             $query.Var.globalSlaAssignType = $someSlaAssignTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SlaAssignTypeEnum]) for enum values.
             # REQUIRED
             $query.Var.objectIds = @(
             	$someString
             )
             # OPTIONAL
             $query.Var.applicableSnappableType = $someWorkloadLevelHierarchy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.WorkloadLevelHierarchy]) for enum values.
             # OPTIONAL
             $query.Var.shouldApplyToNonPolicySnapshots = $someBoolean
             # OPTIONAL
             $query.Var.userNote = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SlaAssignResult
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AssignRetentionToSnapshots operation
             of the 'SLA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    SLA
             # API Operation: AssignRetentionToSnapshots
             
             $query = New-RscMutationSla -AssignRetentionToSnapshots
             
             # OPTIONAL
             $query.Var.globalSlaOptionalFid = $someString
             # REQUIRED
             $query.Var.globalSlaAssignType = $someSlaAssignTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SlaAssignTypeEnum]) for enum values.
             # REQUIRED
             $query.Var.snapshotFids = @(
             	$someString
             )
             # OPTIONAL
             $query.Var.userNote = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SlaAssignResult
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AssignsForSnappableHierarchies operation
             of the 'SLA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    SLA
             # API Operation: AssignsForSnappableHierarchies
             
             $query = New-RscMutationSla -AssignsForSnappableHierarchies
             
             # OPTIONAL
             $query.Var.globalSlaOptionalFid = $someString
             # REQUIRED
             $query.Var.globalSlaAssignType = $someSlaAssignTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SlaAssignTypeEnum]) for enum values.
             # REQUIRED
             $query.Var.objectIds = @(
             	$someString
             )
             # OPTIONAL
             $query.Var.applicableSnappableTypes = @(
             	$someWorkloadLevelHierarchy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.WorkloadLevelHierarchy]) for enum values.
             )
             # OPTIONAL
             $query.Var.shouldApplyToExistingSnapshots = $someBoolean
             # OPTIONAL
             $query.Var.shouldApplyToNonPolicySnapshots = $someBoolean
             # OPTIONAL
             $query.Var.globalExistingSnapshotRetention = $someGlobalExistingSnapshotRetention # Call [Enum]::GetValues([RubrikSecurityCloud.Types.GlobalExistingSnapshotRetention]) for enum values.
             # OPTIONAL
             $query.Var.userNote = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;SlaAssignResult&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateGlobal operation
             of the 'SLA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    SLA
             # API Operation: CreateGlobal
             
             $query = New-RscMutationSla -CreateGlobal
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	name = $someString
             	# OPTIONAL
             	description = $someString
             	# OPTIONAL
             	snapshotSchedule = @{
             		# OPTIONAL
             		minute = @{
             			# OPTIONAL
             			basicSchedule = @{
             				# OPTIONAL
             				frequency = $someInt
             				# OPTIONAL
             				retention = $someInt
             				# OPTIONAL
             				retentionUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             		}
             		# OPTIONAL
             		hourly = @{
             			# OPTIONAL
             			basicSchedule = @{
             				# OPTIONAL
             				frequency = $someInt
             				# OPTIONAL
             				retention = $someInt
             				# OPTIONAL
             				retentionUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             		}
             		# OPTIONAL
             		daily = @{
             			# OPTIONAL
             			basicSchedule = @{
             				# OPTIONAL
             				frequency = $someInt
             				# OPTIONAL
             				retention = $someInt
             				# OPTIONAL
             				retentionUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             		}
             		# OPTIONAL
             		weekly = @{
             			# OPTIONAL
             			basicSchedule = @{
             				# OPTIONAL
             				frequency = $someInt
             				# OPTIONAL
             				retention = $someInt
             				# OPTIONAL
             				retentionUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			dayOfWeek = $someDayOfWeek # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DayOfWeek]) for enum values.
             		}
             		# OPTIONAL
             		monthly = @{
             			# OPTIONAL
             			basicSchedule = @{
             				# OPTIONAL
             				frequency = $someInt
             				# OPTIONAL
             				retention = $someInt
             				# OPTIONAL
             				retentionUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			dayOfMonth = $someDayOfMonth # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DayOfMonth]) for enum values.
             		}
             		# OPTIONAL
             		quarterly = @{
             			# OPTIONAL
             			basicSchedule = @{
             				# OPTIONAL
             				frequency = $someInt
             				# OPTIONAL
             				retention = $someInt
             				# OPTIONAL
             				retentionUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			dayOfQuarter = $someDayOfQuarter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DayOfQuarter]) for enum values.
             			# OPTIONAL
             			quarterStartMonth = $someMonth # Call [Enum]::GetValues([RubrikSecurityCloud.Types.Month]) for enum values.
             		}
             		# OPTIONAL
             		yearly = @{
             			# OPTIONAL
             			basicSchedule = @{
             				# OPTIONAL
             				frequency = $someInt
             				# OPTIONAL
             				retention = $someInt
             				# OPTIONAL
             				retentionUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			dayOfYear = $someDayOfYear # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DayOfYear]) for enum values.
             			# OPTIONAL
             			yearStartMonth = $someMonth # Call [Enum]::GetValues([RubrikSecurityCloud.Types.Month]) for enum values.
             		}
             	}
             	# OPTIONAL
             	replicationSpecInput = @{
             		# OPTIONAL
             		replicationType = $someReplicationType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ReplicationType]) for enum values.
             		# OPTIONAL
             		specificReplicationSpecInput = @{
             			# OPTIONAL
             			unidirectionalSpecInput = @{
             				# OPTIONAL
             				replicationTargetId = $someString
             				# OPTIONAL
             				retention = $someInt
             				# OPTIONAL
             				retentionUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			bidirectionalSpecInput = @{
             				# OPTIONAL
             				replicationSpec1 = @{
             					# OPTIONAL
             					replicationTargetId = $someString
             					# OPTIONAL
             					retention = $someInt
             					# OPTIONAL
             					retentionUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             				}
             				# OPTIONAL
             				replicationSpec2 = @{
             					# OPTIONAL
             					replicationTargetId = $someString
             					# OPTIONAL
             					retention = $someInt
             					# OPTIONAL
             					retentionUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             				}
             			}
             			# OPTIONAL
             			cloudRegionSpecInput = @{
             				# OPTIONAL
             				replicationTargetRegion = $someString
             				# OPTIONAL
             				cloudProvider = $someCloudProvider # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudProvider]) for enum values.
             				# OPTIONAL
             				retention = $someInt
             				# OPTIONAL
             				retentionUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			cloudLocationSpecInput = @{
             				# OPTIONAL
             				replicationTargetId = $someString
             				# OPTIONAL
             				cloudProvider = $someCloudProvider # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudProvider]) for enum values.
             				# OPTIONAL
             				retentionDuration = @{
             					# OPTIONAL
             					duration = $someInt
             					# OPTIONAL
             					unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             				}
             			}
             		}
             	}
             	# OPTIONAL
             	localRetentionLimit = @{
             		# OPTIONAL
             		duration = $someInt
             		# OPTIONAL
             		unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             	}
             	# OPTIONAL
             	firstFullBackupWindows = @(
             		@{
             			# OPTIONAL
             			durationInHours = $someInt
             			# OPTIONAL
             			startTimeAttributes = @{
             				# OPTIONAL
             				dayOfWeek = @{
             					# OPTIONAL
             					day = $someDayOfWeek # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DayOfWeek]) for enum values.
             				}
             				# OPTIONAL
             				hour = $someInt
             				# OPTIONAL
             				minute = $someInt
             			}
             		}
             	)
             	# OPTIONAL
             	backupWindows = @(
             		@{
             			# OPTIONAL
             			durationInHours = $someInt
             			# OPTIONAL
             			startTimeAttributes = @{
             				# OPTIONAL
             				dayOfWeek = @{
             					# OPTIONAL
             					day = $someDayOfWeek # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DayOfWeek]) for enum values.
             				}
             				# OPTIONAL
             				hour = $someInt
             				# OPTIONAL
             				minute = $someInt
             			}
             		}
             	)
             	# OPTIONAL
             	logConfig = @{
             		# OPTIONAL
             		slaLogFrequencyConfig = @{
             			# OPTIONAL
             			retention = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             		}
             	}
             	# OPTIONAL
             	objectSpecificConfigsInput = @{
             		# OPTIONAL
             		sapHanaConfigInput = @{
             			# OPTIONAL
             			incrementalFrequency = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			logRetention = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			differentialFrequency = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             		}
             		# OPTIONAL
             		awsRdsConfigInput = @{
             			# OPTIONAL
             			logRetention = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             		}
             		# OPTIONAL
             		vmwareVmConfigInput = @{
             			# OPTIONAL
             			logRetentionSeconds = $someInt64
             		}
             		# OPTIONAL
             		azureSqlDatabaseDbConfigInput = @{
             			# OPTIONAL
             			logRetentionInDays = $someInt
             		}
             		# OPTIONAL
             		azureSqlManagedInstanceDbConfigInput = @{
             			# OPTIONAL
             			logRetentionInDays = $someInt
             		}
             		# OPTIONAL
             		db2ConfigInput = @{
             			# OPTIONAL
             			incrementalFrequency = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			logRetention = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			differentialFrequency = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             		}
             		# OPTIONAL
             		mssqlConfigInput = @{
             			# OPTIONAL
             			frequency = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			logRetention = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             		}
             		# OPTIONAL
             		oracleConfigInput = @{
             			# OPTIONAL
             			frequency = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			logRetention = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			hostLogRetention = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             		}
             		# OPTIONAL
             		mongoConfigInput = @{
             			# OPTIONAL
             			logFrequency = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			logRetention = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             		}
             		# OPTIONAL
             		azureBlobConfigInput = @{
             			# OPTIONAL
             			continuousBackupRetentionInDays = $someInt
             		}
             		# OPTIONAL
             		awsNativeS3SlaConfigInput = @{
             			# OPTIONAL
             			archivalLocationId = $someString
             			# OPTIONAL
             			continuousBackupRetentionInDays = $someInt
             		}
             		# OPTIONAL
             		managedVolumeSlaConfigInput = @{
             			# OPTIONAL
             			logRetention = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             		}
             	}
             	# OPTIONAL
             	archivalSpecs = @(
             		@{
             			# OPTIONAL
             			archivalGroupId = $someString
             			# OPTIONAL
             			threshold = $someInt
             			# OPTIONAL
             			thresholdUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			# OPTIONAL
             			archivalTieringSpecInput = @{
             				# OPTIONAL
             				isInstantTieringEnabled = $someBoolean
             				# OPTIONAL
             				minAccessibleDurationInSeconds = $someInt64
             				# OPTIONAL
             				coldStorageClass = $someColdStorageClass # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ColdStorageClass]) for enum values.
             				# OPTIONAL
             				shouldTierExistingSnapshots = $someBoolean
             			}
             			# OPTIONAL
             			frequencies = @(
             				$someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			)
             			# OPTIONAL
             			archivalLocationToClusterMapping = @(
             				@{
             					# OPTIONAL
             					clusterUuid = $someString
             					# OPTIONAL
             					locationId = $someString
             				}
             			)
             		}
             	)
             	# OPTIONAL
             	replicationSpecsV2 = @(
             		@{
             			# OPTIONAL
             			clusterUuid = $someString
             			# OPTIONAL
             			storageSettingId = $someString
             			# OPTIONAL
             			retentionDuration = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			awsAccount = $someString
             			# OPTIONAL
             			azureSubscription = $someString
             			# OPTIONAL
             			replicationLocalRetentionDuration = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			cascadingArchivalSpecs = @(
             				@{
             					# OPTIONAL
             					archivalLocationId = $someString
             					# OPTIONAL
             					archivalThreshold = @{
             						# OPTIONAL
             						duration = $someInt
             						# OPTIONAL
             						unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             					}
             					# OPTIONAL
             					archivalTieringSpecInput = @{
             						# OPTIONAL
             						isInstantTieringEnabled = $someBoolean
             						# OPTIONAL
             						minAccessibleDurationInSeconds = $someInt64
             						# OPTIONAL
             						coldStorageClass = $someColdStorageClass # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ColdStorageClass]) for enum values.
             						# OPTIONAL
             						shouldTierExistingSnapshots = $someBoolean
             					}
             					# OPTIONAL
             					frequency = @(
             						$someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             					)
             				}
             			)
             			# OPTIONAL
             			awsRegion = $someAwsNativeRegionForReplication # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegionForReplication]) for enum values.
             			# OPTIONAL
             			azureRegion = $someAzureNativeRegionForReplication # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeRegionForReplication]) for enum values.
             		}
             	)
             	# OPTIONAL
             	objectTypes = @(
             		$someSlaObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SlaObjectType]) for enum values.
             	)
             	# OPTIONAL
             	isRetentionLockedSla = $someBoolean
             	# OPTIONAL
             	retentionLockMode = $someRetentionLockMode # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionLockMode]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GlobalSlaReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ExportManagedVolumeSnapshot operation
             of the 'SLA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    SLA
             # API Operation: ExportManagedVolumeSnapshot
             
             $query = New-RscMutationSla -ExportManagedVolumeSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	params = @{
             		# OPTIONAL
             		shouldDownloadToLocal = $someBoolean
             		# OPTIONAL
             		managedVolumeSlaExportConfig = @{
             			# OPTIONAL
             			managedVolumeExportConfig = @{
             				# OPTIONAL
             				subnet = $someString
             				# OPTIONAL
             				managedVolumePatchConfig = @{
             					# OPTIONAL
             					hostPatterns = @(
             						$someString
             					)
             					# OPTIONAL
             					nodeHint = @(
             						$someString
             					)
             					# OPTIONAL
             					smbDomainName = $someString
             					# OPTIONAL
             					smbValidIps = @(
             						$someString
             					)
             					# OPTIONAL
             					smbValidUsers = @(
             						$someString
             					)
             				}
             				# OPTIONAL
             				shareType = $someManagedVolumeShareType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedVolumeShareType]) for enum values.
             			}
             			# REQUIRED
             			hostId = $someString
             			# REQUIRED
             			hostMountPaths = @(
             				$someString
             			)
             		}
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GetPendingAssignments operation
             of the 'SLA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    SLA
             # API Operation: GetPendingAssignments
             
             $query = New-RscMutationSla -GetPendingAssignments
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	pendingAssignmentsRequest = @{
             		# REQUIRED
             		objectIds = @(
             			$someString
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GetPendingSlaAssignmentsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Pause operation
             of the 'SLA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    SLA
             # API Operation: Pause
             
             $query = New-RscMutationSla -Pause
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	slaId = $someString
             	# REQUIRED
             	clusterUuids = @(
             		$someString
             	)
             	# REQUIRED
             	pauseSla = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: PauseSlaReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateGlobal operation
             of the 'SLA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    SLA
             # API Operation: UpdateGlobal
             
             $query = New-RscMutationSla -UpdateGlobal
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	id = $someString
             	# OPTIONAL
             	name = $someString
             	# OPTIONAL
             	description = $someString
             	# OPTIONAL
             	snapshotSchedule = @{
             		# OPTIONAL
             		minute = @{
             			# OPTIONAL
             			basicSchedule = @{
             				# OPTIONAL
             				frequency = $someInt
             				# OPTIONAL
             				retention = $someInt
             				# OPTIONAL
             				retentionUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             		}
             		# OPTIONAL
             		hourly = @{
             			# OPTIONAL
             			basicSchedule = @{
             				# OPTIONAL
             				frequency = $someInt
             				# OPTIONAL
             				retention = $someInt
             				# OPTIONAL
             				retentionUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             		}
             		# OPTIONAL
             		daily = @{
             			# OPTIONAL
             			basicSchedule = @{
             				# OPTIONAL
             				frequency = $someInt
             				# OPTIONAL
             				retention = $someInt
             				# OPTIONAL
             				retentionUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             		}
             		# OPTIONAL
             		weekly = @{
             			# OPTIONAL
             			basicSchedule = @{
             				# OPTIONAL
             				frequency = $someInt
             				# OPTIONAL
             				retention = $someInt
             				# OPTIONAL
             				retentionUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			dayOfWeek = $someDayOfWeek # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DayOfWeek]) for enum values.
             		}
             		# OPTIONAL
             		monthly = @{
             			# OPTIONAL
             			basicSchedule = @{
             				# OPTIONAL
             				frequency = $someInt
             				# OPTIONAL
             				retention = $someInt
             				# OPTIONAL
             				retentionUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			dayOfMonth = $someDayOfMonth # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DayOfMonth]) for enum values.
             		}
             		# OPTIONAL
             		quarterly = @{
             			# OPTIONAL
             			basicSchedule = @{
             				# OPTIONAL
             				frequency = $someInt
             				# OPTIONAL
             				retention = $someInt
             				# OPTIONAL
             				retentionUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			dayOfQuarter = $someDayOfQuarter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DayOfQuarter]) for enum values.
             			# OPTIONAL
             			quarterStartMonth = $someMonth # Call [Enum]::GetValues([RubrikSecurityCloud.Types.Month]) for enum values.
             		}
             		# OPTIONAL
             		yearly = @{
             			# OPTIONAL
             			basicSchedule = @{
             				# OPTIONAL
             				frequency = $someInt
             				# OPTIONAL
             				retention = $someInt
             				# OPTIONAL
             				retentionUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			dayOfYear = $someDayOfYear # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DayOfYear]) for enum values.
             			# OPTIONAL
             			yearStartMonth = $someMonth # Call [Enum]::GetValues([RubrikSecurityCloud.Types.Month]) for enum values.
             		}
             	}
             	# OPTIONAL
             	stateVersion = $someInt64
             	# OPTIONAL
             	replicationSpecInput = @{
             		# OPTIONAL
             		replicationType = $someReplicationType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ReplicationType]) for enum values.
             		# OPTIONAL
             		specificReplicationSpecInput = @{
             			# OPTIONAL
             			unidirectionalSpecInput = @{
             				# OPTIONAL
             				replicationTargetId = $someString
             				# OPTIONAL
             				retention = $someInt
             				# OPTIONAL
             				retentionUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			bidirectionalSpecInput = @{
             				# OPTIONAL
             				replicationSpec1 = @{
             					# OPTIONAL
             					replicationTargetId = $someString
             					# OPTIONAL
             					retention = $someInt
             					# OPTIONAL
             					retentionUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             				}
             				# OPTIONAL
             				replicationSpec2 = @{
             					# OPTIONAL
             					replicationTargetId = $someString
             					# OPTIONAL
             					retention = $someInt
             					# OPTIONAL
             					retentionUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             				}
             			}
             			# OPTIONAL
             			cloudRegionSpecInput = @{
             				# OPTIONAL
             				replicationTargetRegion = $someString
             				# OPTIONAL
             				cloudProvider = $someCloudProvider # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudProvider]) for enum values.
             				# OPTIONAL
             				retention = $someInt
             				# OPTIONAL
             				retentionUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			cloudLocationSpecInput = @{
             				# OPTIONAL
             				replicationTargetId = $someString
             				# OPTIONAL
             				cloudProvider = $someCloudProvider # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudProvider]) for enum values.
             				# OPTIONAL
             				retentionDuration = @{
             					# OPTIONAL
             					duration = $someInt
             					# OPTIONAL
             					unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             				}
             			}
             		}
             	}
             	# OPTIONAL
             	localRetentionLimit = @{
             		# OPTIONAL
             		duration = $someInt
             		# OPTIONAL
             		unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             	}
             	# OPTIONAL
             	firstFullBackupWindows = @(
             		@{
             			# OPTIONAL
             			durationInHours = $someInt
             			# OPTIONAL
             			startTimeAttributes = @{
             				# OPTIONAL
             				dayOfWeek = @{
             					# OPTIONAL
             					day = $someDayOfWeek # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DayOfWeek]) for enum values.
             				}
             				# OPTIONAL
             				hour = $someInt
             				# OPTIONAL
             				minute = $someInt
             			}
             		}
             	)
             	# OPTIONAL
             	backupWindows = @(
             		@{
             			# OPTIONAL
             			durationInHours = $someInt
             			# OPTIONAL
             			startTimeAttributes = @{
             				# OPTIONAL
             				dayOfWeek = @{
             					# OPTIONAL
             					day = $someDayOfWeek # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DayOfWeek]) for enum values.
             				}
             				# OPTIONAL
             				hour = $someInt
             				# OPTIONAL
             				minute = $someInt
             			}
             		}
             	)
             	# OPTIONAL
             	logConfig = @{
             		# OPTIONAL
             		slaLogFrequencyConfig = @{
             			# OPTIONAL
             			retention = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             		}
             	}
             	# OPTIONAL
             	objectSpecificConfigsInput = @{
             		# OPTIONAL
             		sapHanaConfigInput = @{
             			# OPTIONAL
             			incrementalFrequency = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			logRetention = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			differentialFrequency = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             		}
             		# OPTIONAL
             		awsRdsConfigInput = @{
             			# OPTIONAL
             			logRetention = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             		}
             		# OPTIONAL
             		vmwareVmConfigInput = @{
             			# OPTIONAL
             			logRetentionSeconds = $someInt64
             		}
             		# OPTIONAL
             		azureSqlDatabaseDbConfigInput = @{
             			# OPTIONAL
             			logRetentionInDays = $someInt
             		}
             		# OPTIONAL
             		azureSqlManagedInstanceDbConfigInput = @{
             			# OPTIONAL
             			logRetentionInDays = $someInt
             		}
             		# OPTIONAL
             		db2ConfigInput = @{
             			# OPTIONAL
             			incrementalFrequency = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			logRetention = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			differentialFrequency = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             		}
             		# OPTIONAL
             		mssqlConfigInput = @{
             			# OPTIONAL
             			frequency = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			logRetention = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             		}
             		# OPTIONAL
             		oracleConfigInput = @{
             			# OPTIONAL
             			frequency = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			logRetention = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			hostLogRetention = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             		}
             		# OPTIONAL
             		mongoConfigInput = @{
             			# OPTIONAL
             			logFrequency = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			logRetention = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             		}
             		# OPTIONAL
             		azureBlobConfigInput = @{
             			# OPTIONAL
             			continuousBackupRetentionInDays = $someInt
             		}
             		# OPTIONAL
             		awsNativeS3SlaConfigInput = @{
             			# OPTIONAL
             			archivalLocationId = $someString
             			# OPTIONAL
             			continuousBackupRetentionInDays = $someInt
             		}
             		# OPTIONAL
             		managedVolumeSlaConfigInput = @{
             			# OPTIONAL
             			logRetention = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             		}
             	}
             	# OPTIONAL
             	shouldApplyToExistingSnapshots = @{
             		# OPTIONAL
             		value = $someBoolean
             	}
             	# OPTIONAL
             	shouldApplyToNonPolicySnapshots = @{
             		# OPTIONAL
             		value = $someBoolean
             	}
             	# OPTIONAL
             	userNote = $someString
             	# OPTIONAL
             	archivalSpecs = @(
             		@{
             			# OPTIONAL
             			archivalGroupId = $someString
             			# OPTIONAL
             			threshold = $someInt
             			# OPTIONAL
             			thresholdUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			# OPTIONAL
             			archivalTieringSpecInput = @{
             				# OPTIONAL
             				isInstantTieringEnabled = $someBoolean
             				# OPTIONAL
             				minAccessibleDurationInSeconds = $someInt64
             				# OPTIONAL
             				coldStorageClass = $someColdStorageClass # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ColdStorageClass]) for enum values.
             				# OPTIONAL
             				shouldTierExistingSnapshots = $someBoolean
             			}
             			# OPTIONAL
             			frequencies = @(
             				$someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			)
             			# OPTIONAL
             			archivalLocationToClusterMapping = @(
             				@{
             					# OPTIONAL
             					clusterUuid = $someString
             					# OPTIONAL
             					locationId = $someString
             				}
             			)
             		}
             	)
             	# OPTIONAL
             	replicationSpecsV2 = @(
             		@{
             			# OPTIONAL
             			clusterUuid = $someString
             			# OPTIONAL
             			storageSettingId = $someString
             			# OPTIONAL
             			retentionDuration = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			awsAccount = $someString
             			# OPTIONAL
             			azureSubscription = $someString
             			# OPTIONAL
             			replicationLocalRetentionDuration = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			cascadingArchivalSpecs = @(
             				@{
             					# OPTIONAL
             					archivalLocationId = $someString
             					# OPTIONAL
             					archivalThreshold = @{
             						# OPTIONAL
             						duration = $someInt
             						# OPTIONAL
             						unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             					}
             					# OPTIONAL
             					archivalTieringSpecInput = @{
             						# OPTIONAL
             						isInstantTieringEnabled = $someBoolean
             						# OPTIONAL
             						minAccessibleDurationInSeconds = $someInt64
             						# OPTIONAL
             						coldStorageClass = $someColdStorageClass # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ColdStorageClass]) for enum values.
             						# OPTIONAL
             						shouldTierExistingSnapshots = $someBoolean
             					}
             					# OPTIONAL
             					frequency = @(
             						$someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             					)
             				}
             			)
             			# OPTIONAL
             			awsRegion = $someAwsNativeRegionForReplication # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegionForReplication]) for enum values.
             			# OPTIONAL
             			azureRegion = $someAzureNativeRegionForReplication # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeRegionForReplication]) for enum values.
             		}
             	)
             	# OPTIONAL
             	objectTypes = @(
             		$someSlaObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SlaObjectType]) for enum values.
             	)
             	# OPTIONAL
             	isRetentionLockedSla = $someBoolean
             	# OPTIONAL
             	retentionLockMode = $someRetentionLockMode # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionLockMode]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GlobalSlaReply
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationVcenter">
             <summary>
             Create a new RscQuery object for any of the 6
             operations in the 'vSphere vCenter' API domain:
             Create, Delete, Refresh, Update, UpdateHotAddBandwidth, or UpdateHotAddNetwork.
             </summary>
             <description>
             New-RscMutationVcenter creates a new
             mutation object for operations
             in the 'vSphere vCenter' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 6 operations
             in the 'vSphere vCenter' API domain. Select the operation this
             query is for by specifying the appropriate switch parameter;
             one of: -Create, -Delete, -Refresh, -Update, -UpdateHotAddBandwidth, -UpdateHotAddNetwork.
             Alternatively, you can specify the operation by setting the
             -Op parameter, for example: -Op Create,
             which is equivalent to specifying -Create.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationVcenter -Create).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationVcenter -Create).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the Create operation
             of the 'vSphere vCenter' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere vCenter
             # API Operation: Create
             
             $query = New-RscMutationVcenter -Create
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	vcenterDetail = @{
             		# OPTIONAL
             		caCerts = $someString
             		# OPTIONAL
             		computeVisibilityFilter = @(
             			@{
             				# OPTIONAL
             				isVmwareMetroStorageCluster = $someBoolean
             				# REQUIRED
             				hostGroupFilter = @(
             					$someString
             				)
             				# REQUIRED
             				id = $someString
             			}
             		)
             		# OPTIONAL
             		shouldEnableHotAddProxyForOnPrem = $someBoolean
             		# OPTIONAL
             		orgNetworkId = $someString
             		# OPTIONAL
             		conflictResolutionAuthz = $someVcenterConfigV2ConflictResolutionAuthz # Call [Enum]::GetValues([RubrikSecurityCloud.Types.VcenterConfigV2ConflictResolutionAuthz]) for enum values.
             		# REQUIRED
             		hostname = $someString
             		# REQUIRED
             		password = $someString
             		# REQUIRED
             		username = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateVsphereVcenterReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Delete operation
             of the 'vSphere vCenter' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere vCenter
             # API Operation: Delete
             
             $query = New-RscMutationVcenter -Delete
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Refresh operation
             of the 'vSphere vCenter' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere vCenter
             # API Operation: Refresh
             
             $query = New-RscMutationVcenter -Refresh
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	fid = $someString
             	# OPTIONAL
             	shouldDiagnose = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Update operation
             of the 'vSphere vCenter' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere vCenter
             # API Operation: Update
             
             $query = New-RscMutationVcenter -Update
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	updateProperties = @{
             		# OPTIONAL
             		caCerts = $someString
             		# OPTIONAL
             		computeVisibilityFilter = @(
             			@{
             				# OPTIONAL
             				isVmwareMetroStorageCluster = $someBoolean
             				# REQUIRED
             				hostGroupFilter = @(
             					$someString
             				)
             				# REQUIRED
             				id = $someString
             			}
             		)
             		# OPTIONAL
             		shouldEnableHotAddProxyForOnPrem = $someBoolean
             		# OPTIONAL
             		conflictResolutionAuthz = $someVcenterConfigConflictResolutionAuthz # Call [Enum]::GetValues([RubrikSecurityCloud.Types.VcenterConfigConflictResolutionAuthz]) for enum values.
             		# REQUIRED
             		hostname = $someString
             		# REQUIRED
             		password = $someString
             		# REQUIRED
             		username = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateVcenterReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateHotAddBandwidth operation
             of the 'vSphere vCenter' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere vCenter
             # API Operation: UpdateHotAddBandwidth
             
             $query = New-RscMutationVcenter -UpdateHotAddBandwidth
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	hotAddBandwidthInfo = @{
             		# REQUIRED
             		exportLimit = $someInt
             		# REQUIRED
             		ingestLimit = $someInt
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateHotAddNetwork operation
             of the 'vSphere vCenter' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere vCenter
             # API Operation: UpdateHotAddNetwork
             
             $query = New-RscMutationVcenter -UpdateHotAddNetwork
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	hotAddNetworkInfo = @{
             		# OPTIONAL
             		staticIpInfo = @{
             			# OPTIONAL
             			dnsServers = @(
             				$someString
             			)
             			# OPTIONAL
             			gateway = $someString
             			# REQUIRED
             			ipAddresses = @(
             				$someString
             			)
             			# REQUIRED
             			subnetMask = $someString
             		}
             		# REQUIRED
             		networkId = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestSuccess
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationVsphere">
             <summary>
             Create a new RscQuery object for any of the 8
             operations in the 'vSphere' API domain:
             BulkOnDemandSnapshot, CreateAdvancedTag, DeleteAdvancedTag, DeleteLiveMount, DownloadVirtualMachineFiles, ExportSnapshotToStandaloneHostV2, OnDemandSnapshot, or UpdateAdvancedTag.
             </summary>
             <description>
             New-RscMutationVsphere creates a new
             mutation object for operations
             in the 'vSphere' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 8 operations
             in the 'vSphere' API domain. Select the operation this
             query is for by specifying the appropriate switch parameter;
             one of: -BulkOnDemandSnapshot, -CreateAdvancedTag, -DeleteAdvancedTag, -DeleteLiveMount, -DownloadVirtualMachineFiles, -ExportSnapshotToStandaloneHostV2, -OnDemandSnapshot, -UpdateAdvancedTag.
             Alternatively, you can specify the operation by setting the
             -Op parameter, for example: -Op BulkOnDemandSnapshot,
             which is equivalent to specifying -BulkOnDemandSnapshot.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationVsphere -BulkOnDemandSnapshot).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationVsphere -BulkOnDemandSnapshot).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the BulkOnDemandSnapshot operation
             of the 'vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere
             # API Operation: BulkOnDemandSnapshot
             
             $query = New-RscMutationVsphere -BulkOnDemandSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		slaId = $someString
             		# REQUIRED
             		vms = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	userNote = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateAdvancedTag operation
             of the 'vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere
             # API Operation: CreateAdvancedTag
             
             $query = New-RscMutationVsphere -CreateAdvancedTag
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	filterInfo = @{
             		# OPTIONAL
             		description = $someString
             		# REQUIRED
             		condition = $someString
             		# REQUIRED
             		name = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateVsphereAdvancedTagReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteAdvancedTag operation
             of the 'vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere
             # API Operation: DeleteAdvancedTag
             
             $query = New-RscMutationVsphere -DeleteAdvancedTag
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	filterId = $someString
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteLiveMount operation
             of the 'vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere
             # API Operation: DeleteLiveMount
             
             $query = New-RscMutationVsphere -DeleteLiveMount
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	force = $someBoolean
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DownloadVirtualMachineFiles operation
             of the 'vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere
             # API Operation: DownloadVirtualMachineFiles
             
             $query = New-RscMutationVsphere -DownloadVirtualMachineFiles
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# REQUIRED
             		fileNamesToDownload = @(
             			$someString
             		)
             		# REQUIRED
             		vmId = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ExportSnapshotToStandaloneHostV2 operation
             of the 'vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere
             # API Operation: ExportSnapshotToStandaloneHostV2
             
             $query = New-RscMutationVsphere -ExportSnapshotToStandaloneHostV2
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		mountExportSnapshotJobCommonOptions = @{
             			# OPTIONAL
             			disableNetwork = $someBoolean
             			# OPTIONAL
             			keepMacAddresses = $someBoolean
             			# OPTIONAL
             			powerOn = $someBoolean
             			# OPTIONAL
             			removeNetworkDevices = $someBoolean
             			# OPTIONAL
             			vmName = $someString
             		}
             		# REQUIRED
             		datastoreName = $someString
             		# REQUIRED
             		hostIpAddress = $someString
             		# REQUIRED
             		hostPassword = $someString
             		# REQUIRED
             		hostUsername = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the OnDemandSnapshot operation
             of the 'vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere
             # API Operation: OnDemandSnapshot
             
             $query = New-RscMutationVsphere -OnDemandSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	config = @{
             		# OPTIONAL
             		slaId = $someString
             	}
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	userNote = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateAdvancedTag operation
             of the 'vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere
             # API Operation: UpdateAdvancedTag
             
             $query = New-RscMutationVsphere -UpdateAdvancedTag
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	filterId = $someString
             	# REQUIRED
             	filterInfo = @{
             		# OPTIONAL
             		description = $someString
             		# REQUIRED
             		condition = $someString
             		# REQUIRED
             		name = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateVsphereAdvancedTagReply
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationVsphereVm">
             <summary>
             Create a new RscQuery object for any of the 24
             operations in the 'vSphere VM' API domain:
             BatchExport, BatchExportV3, BatchInPlaceRecovery, DeleteSnapshot, DownloadSnapshot, DownloadSnapshotFiles, ExcludeVmDisks, ExportSnapshotV2, ExportSnapshotV3, ExportSnapshotWithDownloadFromCloud, InitiateBatchInstantRecovery, InitiateBatchLiveMountV2, InitiateDiskMount, InitiateInPlaceRecovery, InitiateInstantRecoveryV2, InitiateLiveMountV2, ListEsxiDatastores, MountRelocate, MountRelocateV2, PowerOnOffLiveMount, RecoverFiles, RecoverFilesNew, RegisterAgent, or Update.
             </summary>
             <description>
             New-RscMutationVsphereVm creates a new
             mutation object for operations
             in the 'vSphere VM' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 24 operations
             in the 'vSphere VM' API domain. Select the operation this
             query is for by specifying the appropriate switch parameter;
             one of: -BatchExport, -BatchExportV3, -BatchInPlaceRecovery, -DeleteSnapshot, -DownloadSnapshot, -DownloadSnapshotFiles, -ExcludeVmDisks, -ExportSnapshotV2, -ExportSnapshotV3, -ExportSnapshotWithDownloadFromCloud, -InitiateBatchInstantRecovery, -InitiateBatchLiveMountV2, -InitiateDiskMount, -InitiateInPlaceRecovery, -InitiateInstantRecoveryV2, -InitiateLiveMountV2, -ListEsxiDatastores, -MountRelocate, -MountRelocateV2, -PowerOnOffLiveMount, -RecoverFiles, -RecoverFilesNew, -RegisterAgent, -Update.
             Alternatively, you can specify the operation by setting the
             -Op parameter, for example: -Op BatchExport,
             which is equivalent to specifying -BatchExport.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationVsphereVm -BatchExport).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationVsphereVm -BatchExport).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the BatchExport operation
             of the 'vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere VM
             # API Operation: BatchExport
             
             $query = New-RscMutationVsphereVm -BatchExport
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	config = @{
             		# REQUIRED
             		snapshots = @(
             			@{
             				# OPTIONAL
             				snapshotAfterDate = $someDateTime
             				# OPTIONAL
             				snapshotBeforeDate = $someDateTime
             				# OPTIONAL
             				snapshotId = $someString
             				# OPTIONAL
             				vmNamePrefix = $someString
             				# REQUIRED
             				config = @{
             					# OPTIONAL
             					hostId = $someString
             					# OPTIONAL
             					shouldRecoverTags = $someBoolean
             					# OPTIONAL
             					unregisterVm = $someBoolean
             					# OPTIONAL
             					clusterId = $someString
             					# OPTIONAL
             					resourcePoolId = $someString
             					# OPTIONAL
             					vNicBindings = @(
             						@{
             							# REQUIRED
             							backingNetworkInfo = @{
             								# REQUIRED
             								moid = $someString
             								# REQUIRED
             								name = $someString
             							}
             							# REQUIRED
             							networkDeviceInfo = @{
             								# REQUIRED
             								key = $someInt
             								# REQUIRED
             								name = $someString
             							}
             						}
             					)
             					# OPTIONAL
             					shouldUseHotAddProxy = $someBoolean
             					# OPTIONAL
             					mountExportSnapshotJobCommonOptionsV2 = @{
             						# OPTIONAL
             						disableNetwork = $someBoolean
             						# OPTIONAL
             						keepMacAddresses = $someBoolean
             						# OPTIONAL
             						powerOn = $someBoolean
             						# OPTIONAL
             						removeNetworkDevices = $someBoolean
             						# OPTIONAL
             						vmName = $someString
             					}
             					# OPTIONAL
             					requiredRecoveryParameters = @{
             						# OPTIONAL
             						recoveryPoint = $someDateTime
             						# OPTIONAL
             						snapshotId = $someString
             					}
             					# OPTIONAL
             					folderId = $someString
             					# OPTIONAL
             					shouldConvertToTemplate = $someBoolean
             					# REQUIRED
             					datastoreId = $someString
             				}
             				# REQUIRED
             				vmId = $someString
             			}
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BatchExportV3 operation
             of the 'vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere VM
             # API Operation: BatchExportV3
             
             $query = New-RscMutationVsphereVm -BatchExportV3
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	config = @{
             		# REQUIRED
             		snapshots = @(
             			@{
             				# OPTIONAL
             				snapshotAfterDate = $someDateTime
             				# OPTIONAL
             				snapshotBeforeDate = $someDateTime
             				# OPTIONAL
             				snapshotId = $someString
             				# OPTIONAL
             				vmNamePrefix = $someString
             				# REQUIRED
             				config = @{
             					# OPTIONAL
             					clusterId = $someString
             					# OPTIONAL
             					diskDeviceKeyToStorageId = @(
             						@{
             							# OPTIONAL
             							storageLocationId = $someString
             							# REQUIRED
             							deviceKey = $someInt
             						}
             					)
             					# OPTIONAL
             					hostId = $someString
             					# OPTIONAL
             					resourcePoolId = $someString
             					# OPTIONAL
             					shouldRecoverTags = $someBoolean
             					# OPTIONAL
             					shouldUseHotAddProxy = $someBoolean
             					# OPTIONAL
             					storageLocationId = $someString
             					# OPTIONAL
             					unregisterVm = $someBoolean
             					# OPTIONAL
             					vNicBindings = @(
             						@{
             							# REQUIRED
             							backingNetworkInfo = @{
             								# REQUIRED
             								moid = $someString
             								# REQUIRED
             								name = $someString
             							}
             							# REQUIRED
             							networkDeviceInfo = @{
             								# REQUIRED
             								key = $someInt
             								# REQUIRED
             								name = $someString
             							}
             						}
             					)
             					# OPTIONAL
             					mountExportSnapshotJobCommonOptionsV2 = @{
             						# OPTIONAL
             						disableNetwork = $someBoolean
             						# OPTIONAL
             						keepMacAddresses = $someBoolean
             						# OPTIONAL
             						powerOn = $someBoolean
             						# OPTIONAL
             						removeNetworkDevices = $someBoolean
             						# OPTIONAL
             						vmName = $someString
             					}
             					# OPTIONAL
             					requiredRecoveryParameters = @{
             						# OPTIONAL
             						recoveryPoint = $someDateTime
             						# OPTIONAL
             						snapshotId = $someString
             					}
             					# OPTIONAL
             					folderId = $someString
             					# OPTIONAL
             					shouldConvertToTemplate = $someBoolean
             				}
             				# REQUIRED
             				vmId = $someString
             			}
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BatchInPlaceRecovery operation
             of the 'vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere VM
             # API Operation: BatchInPlaceRecovery
             
             $query = New-RscMutationVsphereVm -BatchInPlaceRecovery
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	config = @{
             		# REQUIRED
             		snapshots = @(
             			@{
             				# OPTIONAL
             				snapshotAfterDate = $someDateTime
             				# OPTIONAL
             				snapshotBeforeDate = $someDateTime
             				# OPTIONAL
             				snapshotId = $someString
             				# REQUIRED
             				config = @{
             					# OPTIONAL
             					shouldKeepVsphereSnapshotAfterRecovery = $someBoolean
             					# OPTIONAL
             					requiredRecoveryParameters = @{
             						# OPTIONAL
             						recoveryPoint = $someDateTime
             						# OPTIONAL
             						snapshotId = $someString
             					}
             				}
             				# REQUIRED
             				vmId = $someString
             			}
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteSnapshot operation
             of the 'vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere VM
             # API Operation: DeleteSnapshot
             
             $query = New-RscMutationVsphereVm -DeleteSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	location = $someDeleteVmwareSnapshotRequestLocation # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DeleteVmwareSnapshotRequestLocation]) for enum values.
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DownloadSnapshot operation
             of the 'vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere VM
             # API Operation: DownloadSnapshot
             
             $query = New-RscMutationVsphereVm -DownloadSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DownloadSnapshotFiles operation
             of the 'vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere VM
             # API Operation: DownloadSnapshotFiles
             
             $query = New-RscMutationVsphereVm -DownloadSnapshotFiles
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snapshotFid = $someString
             	# REQUIRED
             	paths = @(
             		$someString
             	)
             	# OPTIONAL
             	deltaTypeFilter = @(
             		$someDeltaType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DeltaType]) for enum values.
             	)
             	# OPTIONAL
             	nextSnapshotFid = $someString
             	# OPTIONAL
             	isLegalHoldDownload = $someBoolean
             	# OPTIONAL
             	userNote = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ExcludeVmDisks operation
             of the 'vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere VM
             # API Operation: ExcludeVmDisks
             
             $query = New-RscMutationVsphereVm -ExcludeVmDisks
             
             # REQUIRED
             $query.Var.input = @(
             	@{
             		# REQUIRED
             		virtualDiskFid = $someString
             		# OPTIONAL
             		excludeFromSnapshots = $someBoolean
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ExportSnapshotV2 operation
             of the 'vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere VM
             # API Operation: ExportSnapshotV2
             
             $query = New-RscMutationVsphereVm -ExportSnapshotV2
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		hostId = $someString
             		# OPTIONAL
             		shouldRecoverTags = $someBoolean
             		# OPTIONAL
             		unregisterVm = $someBoolean
             		# OPTIONAL
             		clusterId = $someString
             		# OPTIONAL
             		resourcePoolId = $someString
             		# OPTIONAL
             		vNicBindings = @(
             			@{
             				# REQUIRED
             				backingNetworkInfo = @{
             					# REQUIRED
             					moid = $someString
             					# REQUIRED
             					name = $someString
             				}
             				# REQUIRED
             				networkDeviceInfo = @{
             					# REQUIRED
             					key = $someInt
             					# REQUIRED
             					name = $someString
             				}
             			}
             		)
             		# OPTIONAL
             		shouldUseHotAddProxy = $someBoolean
             		# OPTIONAL
             		mountExportSnapshotJobCommonOptionsV2 = @{
             			# OPTIONAL
             			disableNetwork = $someBoolean
             			# OPTIONAL
             			keepMacAddresses = $someBoolean
             			# OPTIONAL
             			powerOn = $someBoolean
             			# OPTIONAL
             			removeNetworkDevices = $someBoolean
             			# OPTIONAL
             			vmName = $someString
             		}
             		# OPTIONAL
             		requiredRecoveryParameters = @{
             			# OPTIONAL
             			recoveryPoint = $someDateTime
             			# OPTIONAL
             			snapshotId = $someString
             		}
             		# OPTIONAL
             		folderId = $someString
             		# OPTIONAL
             		shouldConvertToTemplate = $someBoolean
             		# REQUIRED
             		datastoreId = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ExportSnapshotV3 operation
             of the 'vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere VM
             # API Operation: ExportSnapshotV3
             
             $query = New-RscMutationVsphereVm -ExportSnapshotV3
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		clusterId = $someString
             		# OPTIONAL
             		diskDeviceKeyToStorageId = @(
             			@{
             				# OPTIONAL
             				storageLocationId = $someString
             				# REQUIRED
             				deviceKey = $someInt
             			}
             		)
             		# OPTIONAL
             		hostId = $someString
             		# OPTIONAL
             		resourcePoolId = $someString
             		# OPTIONAL
             		shouldRecoverTags = $someBoolean
             		# OPTIONAL
             		shouldUseHotAddProxy = $someBoolean
             		# OPTIONAL
             		storageLocationId = $someString
             		# OPTIONAL
             		unregisterVm = $someBoolean
             		# OPTIONAL
             		vNicBindings = @(
             			@{
             				# REQUIRED
             				backingNetworkInfo = @{
             					# REQUIRED
             					moid = $someString
             					# REQUIRED
             					name = $someString
             				}
             				# REQUIRED
             				networkDeviceInfo = @{
             					# REQUIRED
             					key = $someInt
             					# REQUIRED
             					name = $someString
             				}
             			}
             		)
             		# OPTIONAL
             		mountExportSnapshotJobCommonOptionsV2 = @{
             			# OPTIONAL
             			disableNetwork = $someBoolean
             			# OPTIONAL
             			keepMacAddresses = $someBoolean
             			# OPTIONAL
             			powerOn = $someBoolean
             			# OPTIONAL
             			removeNetworkDevices = $someBoolean
             			# OPTIONAL
             			vmName = $someString
             		}
             		# OPTIONAL
             		requiredRecoveryParameters = @{
             			# OPTIONAL
             			recoveryPoint = $someDateTime
             			# OPTIONAL
             			snapshotId = $someString
             		}
             		# OPTIONAL
             		folderId = $someString
             		# OPTIONAL
             		shouldConvertToTemplate = $someBoolean
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ExportSnapshotWithDownloadFromCloud operation
             of the 'vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere VM
             # API Operation: ExportSnapshotWithDownloadFromCloud
             
             $query = New-RscMutationVsphereVm -ExportSnapshotWithDownloadFromCloud
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		hostId = $someString
             		# OPTIONAL
             		shouldRecoverTags = $someBoolean
             		# OPTIONAL
             		unregisterVm = $someBoolean
             		# OPTIONAL
             		clusterId = $someString
             		# OPTIONAL
             		resourcePoolId = $someString
             		# OPTIONAL
             		vNicBindings = @(
             			@{
             				# REQUIRED
             				backingNetworkInfo = @{
             					# REQUIRED
             					moid = $someString
             					# REQUIRED
             					name = $someString
             				}
             				# REQUIRED
             				networkDeviceInfo = @{
             					# REQUIRED
             					key = $someInt
             					# REQUIRED
             					name = $someString
             				}
             			}
             		)
             		# OPTIONAL
             		shouldUseHotAddProxy = $someBoolean
             		# OPTIONAL
             		mountExportSnapshotJobCommonOptionsV2 = @{
             			# OPTIONAL
             			disableNetwork = $someBoolean
             			# OPTIONAL
             			keepMacAddresses = $someBoolean
             			# OPTIONAL
             			powerOn = $someBoolean
             			# OPTIONAL
             			removeNetworkDevices = $someBoolean
             			# OPTIONAL
             			vmName = $someString
             		}
             		# OPTIONAL
             		requiredRecoveryParameters = @{
             			# OPTIONAL
             			recoveryPoint = $someDateTime
             			# OPTIONAL
             			snapshotId = $someString
             		}
             		# OPTIONAL
             		folderId = $someString
             		# OPTIONAL
             		shouldConvertToTemplate = $someBoolean
             		# REQUIRED
             		datastoreId = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the InitiateBatchInstantRecovery operation
             of the 'vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere VM
             # API Operation: InitiateBatchInstantRecovery
             
             $query = New-RscMutationVsphereVm -InitiateBatchInstantRecovery
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	config = @{
             		# REQUIRED
             		snapshots = @(
             			@{
             				# OPTIONAL
             				snapshotAfterDate = $someDateTime
             				# OPTIONAL
             				snapshotBeforeDate = $someDateTime
             				# OPTIONAL
             				snapshotId = $someString
             				# REQUIRED
             				config = @{
             					# OPTIONAL
             					hostId = $someString
             					# OPTIONAL
             					preserveMoid = $someBoolean
             					# OPTIONAL
             					shouldRecoverTags = $someBoolean
             					# OPTIONAL
             					vlan = $someInt
             					# OPTIONAL
             					clusterId = $someString
             					# OPTIONAL
             					resourcePoolId = $someString
             					# OPTIONAL
             					vNicBindings = @(
             						@{
             							# REQUIRED
             							backingNetworkInfo = @{
             								# REQUIRED
             								moid = $someString
             								# REQUIRED
             								name = $someString
             							}
             							# REQUIRED
             							networkDeviceInfo = @{
             								# REQUIRED
             								key = $someInt
             								# REQUIRED
             								name = $someString
             							}
             						}
             					)
             					# OPTIONAL
             					mountExportSnapshotJobCommonOptionsV2 = @{
             						# OPTIONAL
             						disableNetwork = $someBoolean
             						# OPTIONAL
             						keepMacAddresses = $someBoolean
             						# OPTIONAL
             						powerOn = $someBoolean
             						# OPTIONAL
             						removeNetworkDevices = $someBoolean
             						# OPTIONAL
             						vmName = $someString
             					}
             					# OPTIONAL
             					requiredRecoveryParameters = @{
             						# OPTIONAL
             						recoveryPoint = $someDateTime
             						# OPTIONAL
             						snapshotId = $someString
             					}
             					# OPTIONAL
             					migrationConfig = @{
             						# OPTIONAL
             						diskDeviceKeyToStorageId = @(
             							@{
             								# OPTIONAL
             								storageLocationId = $someString
             								# REQUIRED
             								deviceKey = $someInt
             							}
             						)
             						# OPTIONAL
             						storageLocationId = $someString
             						# OPTIONAL
             						computeClusterId = $someString
             						# OPTIONAL
             						hostId = $someString
             						# OPTIONAL
             						networkDeviceKeyToNetworkName = @(
             							@{
             								# REQUIRED
             								deviceKey = $someInt
             								# REQUIRED
             								networkName = $someString
             							}
             						)
             						# OPTIONAL
             						resourcePoolId = $someString
             					}
             					# OPTIONAL
             					shouldMigrateImmediately = $someBoolean
             				}
             				# REQUIRED
             				vmId = $someString
             			}
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the InitiateBatchLiveMountV2 operation
             of the 'vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere VM
             # API Operation: InitiateBatchLiveMountV2
             
             $query = New-RscMutationVsphereVm -InitiateBatchLiveMountV2
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	config = @{
             		# REQUIRED
             		snapshots = @(
             			@{
             				# OPTIONAL
             				snapshotAfterDate = $someDateTime
             				# OPTIONAL
             				snapshotBeforeDate = $someDateTime
             				# OPTIONAL
             				snapshotId = $someString
             				# OPTIONAL
             				vmNamePrefix = $someString
             				# REQUIRED
             				config = @{
             					# OPTIONAL
             					createDatastoreOnly = $someBoolean
             					# OPTIONAL
             					dataStoreName = $someString
             					# OPTIONAL
             					hostId = $someString
             					# OPTIONAL
             					shouldRecoverTags = $someBoolean
             					# OPTIONAL
             					vlan = $someInt
             					# OPTIONAL
             					clusterId = $someString
             					# OPTIONAL
             					resourcePoolId = $someString
             					# OPTIONAL
             					vNicBindings = @(
             						@{
             							# REQUIRED
             							backingNetworkInfo = @{
             								# REQUIRED
             								moid = $someString
             								# REQUIRED
             								name = $someString
             							}
             							# REQUIRED
             							networkDeviceInfo = @{
             								# REQUIRED
             								key = $someInt
             								# REQUIRED
             								name = $someString
             							}
             						}
             					)
             					# OPTIONAL
             					migrationConfig = @{
             						# OPTIONAL
             						diskDeviceKeyToStorageId = @(
             							@{
             								# OPTIONAL
             								storageLocationId = $someString
             								# REQUIRED
             								deviceKey = $someInt
             							}
             						)
             						# OPTIONAL
             						storageLocationId = $someString
             						# OPTIONAL
             						computeClusterId = $someString
             						# OPTIONAL
             						hostId = $someString
             						# OPTIONAL
             						networkDeviceKeyToNetworkName = @(
             							@{
             								# REQUIRED
             								deviceKey = $someInt
             								# REQUIRED
             								networkName = $someString
             							}
             						)
             						# OPTIONAL
             						resourcePoolId = $someString
             					}
             					# OPTIONAL
             					shouldMigrateImmediately = $someBoolean
             					# OPTIONAL
             					mountExportSnapshotJobCommonOptionsV2 = @{
             						# OPTIONAL
             						disableNetwork = $someBoolean
             						# OPTIONAL
             						keepMacAddresses = $someBoolean
             						# OPTIONAL
             						powerOn = $someBoolean
             						# OPTIONAL
             						removeNetworkDevices = $someBoolean
             						# OPTIONAL
             						vmName = $someString
             					}
             					# OPTIONAL
             					requiredRecoveryParameters = @{
             						# OPTIONAL
             						recoveryPoint = $someDateTime
             						# OPTIONAL
             						snapshotId = $someString
             					}
             					# OPTIONAL
             					folderId = $someString
             				}
             				# REQUIRED
             				vmId = $someString
             			}
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the InitiateDiskMount operation
             of the 'vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere VM
             # API Operation: InitiateDiskMount
             
             $query = New-RscMutationVsphereVm -InitiateDiskMount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		targetVmId = $someString
             		# OPTIONAL
             		vlan = $someInt
             		# OPTIONAL
             		vmdkIds = @(
             			$someString
             		)
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the InitiateInPlaceRecovery operation
             of the 'vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere VM
             # API Operation: InitiateInPlaceRecovery
             
             $query = New-RscMutationVsphereVm -InitiateInPlaceRecovery
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		shouldKeepVsphereSnapshotAfterRecovery = $someBoolean
             		# OPTIONAL
             		requiredRecoveryParameters = @{
             			# OPTIONAL
             			recoveryPoint = $someDateTime
             			# OPTIONAL
             			snapshotId = $someString
             		}
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the InitiateInstantRecoveryV2 operation
             of the 'vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere VM
             # API Operation: InitiateInstantRecoveryV2
             
             $query = New-RscMutationVsphereVm -InitiateInstantRecoveryV2
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		hostId = $someString
             		# OPTIONAL
             		preserveMoid = $someBoolean
             		# OPTIONAL
             		shouldRecoverTags = $someBoolean
             		# OPTIONAL
             		vlan = $someInt
             		# OPTIONAL
             		clusterId = $someString
             		# OPTIONAL
             		resourcePoolId = $someString
             		# OPTIONAL
             		vNicBindings = @(
             			@{
             				# REQUIRED
             				backingNetworkInfo = @{
             					# REQUIRED
             					moid = $someString
             					# REQUIRED
             					name = $someString
             				}
             				# REQUIRED
             				networkDeviceInfo = @{
             					# REQUIRED
             					key = $someInt
             					# REQUIRED
             					name = $someString
             				}
             			}
             		)
             		# OPTIONAL
             		mountExportSnapshotJobCommonOptionsV2 = @{
             			# OPTIONAL
             			disableNetwork = $someBoolean
             			# OPTIONAL
             			keepMacAddresses = $someBoolean
             			# OPTIONAL
             			powerOn = $someBoolean
             			# OPTIONAL
             			removeNetworkDevices = $someBoolean
             			# OPTIONAL
             			vmName = $someString
             		}
             		# OPTIONAL
             		requiredRecoveryParameters = @{
             			# OPTIONAL
             			recoveryPoint = $someDateTime
             			# OPTIONAL
             			snapshotId = $someString
             		}
             		# OPTIONAL
             		migrationConfig = @{
             			# OPTIONAL
             			diskDeviceKeyToStorageId = @(
             				@{
             					# OPTIONAL
             					storageLocationId = $someString
             					# REQUIRED
             					deviceKey = $someInt
             				}
             			)
             			# OPTIONAL
             			storageLocationId = $someString
             			# OPTIONAL
             			computeClusterId = $someString
             			# OPTIONAL
             			hostId = $someString
             			# OPTIONAL
             			networkDeviceKeyToNetworkName = @(
             				@{
             					# REQUIRED
             					deviceKey = $someInt
             					# REQUIRED
             					networkName = $someString
             				}
             			)
             			# OPTIONAL
             			resourcePoolId = $someString
             		}
             		# OPTIONAL
             		shouldMigrateImmediately = $someBoolean
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the InitiateLiveMountV2 operation
             of the 'vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere VM
             # API Operation: InitiateLiveMountV2
             
             $query = New-RscMutationVsphereVm -InitiateLiveMountV2
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	config = @{
             		# OPTIONAL
             		createDatastoreOnly = $someBoolean
             		# OPTIONAL
             		dataStoreName = $someString
             		# OPTIONAL
             		hostId = $someString
             		# OPTIONAL
             		shouldRecoverTags = $someBoolean
             		# OPTIONAL
             		vlan = $someInt
             		# OPTIONAL
             		clusterId = $someString
             		# OPTIONAL
             		resourcePoolId = $someString
             		# OPTIONAL
             		vNicBindings = @(
             			@{
             				# REQUIRED
             				backingNetworkInfo = @{
             					# REQUIRED
             					moid = $someString
             					# REQUIRED
             					name = $someString
             				}
             				# REQUIRED
             				networkDeviceInfo = @{
             					# REQUIRED
             					key = $someInt
             					# REQUIRED
             					name = $someString
             				}
             			}
             		)
             		# OPTIONAL
             		migrationConfig = @{
             			# OPTIONAL
             			diskDeviceKeyToStorageId = @(
             				@{
             					# OPTIONAL
             					storageLocationId = $someString
             					# REQUIRED
             					deviceKey = $someInt
             				}
             			)
             			# OPTIONAL
             			storageLocationId = $someString
             			# OPTIONAL
             			computeClusterId = $someString
             			# OPTIONAL
             			hostId = $someString
             			# OPTIONAL
             			networkDeviceKeyToNetworkName = @(
             				@{
             					# REQUIRED
             					deviceKey = $someInt
             					# REQUIRED
             					networkName = $someString
             				}
             			)
             			# OPTIONAL
             			resourcePoolId = $someString
             		}
             		# OPTIONAL
             		shouldMigrateImmediately = $someBoolean
             		# OPTIONAL
             		mountExportSnapshotJobCommonOptionsV2 = @{
             			# OPTIONAL
             			disableNetwork = $someBoolean
             			# OPTIONAL
             			keepMacAddresses = $someBoolean
             			# OPTIONAL
             			powerOn = $someBoolean
             			# OPTIONAL
             			removeNetworkDevices = $someBoolean
             			# OPTIONAL
             			vmName = $someString
             		}
             		# OPTIONAL
             		requiredRecoveryParameters = @{
             			# OPTIONAL
             			recoveryPoint = $someDateTime
             			# OPTIONAL
             			snapshotId = $someString
             		}
             		# OPTIONAL
             		folderId = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ListEsxiDatastores operation
             of the 'vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere VM
             # API Operation: ListEsxiDatastores
             
             $query = New-RscMutationVsphereVm -ListEsxiDatastores
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	loginInfo = @{
             		# REQUIRED
             		ip = $someString
             		# REQUIRED
             		password = $someString
             		# REQUIRED
             		username = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereVmListEsxiDatastoresReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the MountRelocate operation
             of the 'vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere VM
             # API Operation: MountRelocate
             
             $query = New-RscMutationVsphereVm -MountRelocate
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# REQUIRED
             		datastoreId = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the MountRelocateV2 operation
             of the 'vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere VM
             # API Operation: MountRelocateV2
             
             $query = New-RscMutationVsphereVm -MountRelocateV2
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		diskDeviceKeyToStorageId = @(
             			@{
             				# OPTIONAL
             				storageLocationId = $someString
             				# REQUIRED
             				deviceKey = $someInt
             			}
             		)
             		# OPTIONAL
             		storageLocationId = $someString
             		# OPTIONAL
             		computeClusterId = $someString
             		# OPTIONAL
             		hostId = $someString
             		# OPTIONAL
             		networkDeviceKeyToNetworkName = @(
             			@{
             				# REQUIRED
             				deviceKey = $someInt
             				# REQUIRED
             				networkName = $someString
             			}
             		)
             		# OPTIONAL
             		resourcePoolId = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PowerOnOffLiveMount operation
             of the 'vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere VM
             # API Operation: PowerOnOffLiveMount
             
             $query = New-RscMutationVsphereVm -PowerOnOffLiveMount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		shouldForce = $someBoolean
             		# REQUIRED
             		powerStatus = $someBoolean
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereVmPowerOnOffLiveMountReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RecoverFiles operation
             of the 'vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere VM
             # API Operation: RecoverFiles
             
             $query = New-RscMutationVsphereVm -RecoverFiles
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snapshotFid = $someString
             	# REQUIRED
             	restoreConfig = @{
             		# OPTIONAL
             		restoreFilesConfig = @(
             			@{
             				# OPTIONAL
             				path = $someString
             				# OPTIONAL
             				restorePath = $someString
             			}
             		)
             		# OPTIONAL
             		domainName = $someString
             		# OPTIONAL
             		username = $someString
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		shouldIgnoreErrors = $someBoolean
             		# OPTIONAL
             		shouldSaveCredentials = $someBoolean
             		# OPTIONAL
             		shouldUseAgent = $someBoolean
             		# OPTIONAL
             		shouldRestoreXAttrs = $someBoolean
             		# OPTIONAL
             		deltaTypeFilter = @(
             			$someDeltaType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DeltaType]) for enum values.
             		)
             		# OPTIONAL
             		nextSnapshotFid = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereAsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RecoverFilesNew operation
             of the 'vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere VM
             # API Operation: RecoverFilesNew
             
             $query = New-RscMutationVsphereVm -RecoverFilesNew
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		domainName = $someString
             		# OPTIONAL
             		ignoreErrors = $someBoolean
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		shouldSaveCredentials = $someBoolean
             		# OPTIONAL
             		username = $someString
             		# OPTIONAL
             		destObjectId = $someString
             		# OPTIONAL
             		shouldRestoreXAttrs = $someBoolean
             		# OPTIONAL
             		shouldUseAgent = $someBoolean
             		# OPTIONAL
             		guestCredentialId = $someString
             		# REQUIRED
             		restoreConfig = @(
             			@{
             				# OPTIONAL
             				restorePathPair = @{
             					# OPTIONAL
             					restorePath = $someString
             					# REQUIRED
             					path = $someString
             				}
             			}
             		)
             	}
             	# OPTIONAL
             	deltaRequest = @{
             		# REQUIRED
             		nextSnapshotFid = $someString
             		# REQUIRED
             		deltaTypeFilter = @(
             			$someDeltaType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DeltaType]) for enum values.
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RegisterAgent operation
             of the 'vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere VM
             # API Operation: RegisterAgent
             
             $query = New-RscMutationVsphereVm -RegisterAgent
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Update operation
             of the 'vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere VM
             # API Operation: Update
             
             $query = New-RscMutationVsphereVm -Update
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	vmUpdateProperties = @{
             		# OPTIONAL
             		guestCredential = @{
             			# REQUIRED
             			password = $someString
             			# REQUIRED
             			username = $someString
             		}
             		# OPTIONAL
             		shouldRefreshCacheAfterUpdate = $someBoolean
             		# OPTIONAL
             		guestCredentialId = $someString
             		# OPTIONAL
             		virtualMachineUpdate = @{
             			# OPTIONAL
             			cloudInstantiationSpec = @{
             				# REQUIRED
             				imageRetentionInSeconds = $someInt64
             			}
             			# OPTIONAL
             			configuredSlaDomainId = $someString
             			# OPTIONAL
             			isArrayIntegrationEnabled = $someBoolean
             			# OPTIONAL
             			isVmPaused = $someBoolean
             			# OPTIONAL
             			maxNestedVsphereSnapshots = $someInt
             			# OPTIONAL
             			postBackupScript = @{
             				# REQUIRED
             				failureHandling = $someVirtualMachineScriptDetailFailureHandling # Call [Enum]::GetValues([RubrikSecurityCloud.Types.VirtualMachineScriptDetailFailureHandling]) for enum values.
             				# REQUIRED
             				scriptPath = $someString
             				# REQUIRED
             				timeoutMs = $someInt64
             			}
             			# OPTIONAL
             			postSnapScript = @{
             				# REQUIRED
             				failureHandling = $someVirtualMachineScriptDetailFailureHandling # Call [Enum]::GetValues([RubrikSecurityCloud.Types.VirtualMachineScriptDetailFailureHandling]) for enum values.
             				# REQUIRED
             				scriptPath = $someString
             				# REQUIRED
             				timeoutMs = $someInt64
             			}
             			# OPTIONAL
             			preBackupScript = @{
             				# REQUIRED
             				failureHandling = $someVirtualMachineScriptDetailFailureHandling # Call [Enum]::GetValues([RubrikSecurityCloud.Types.VirtualMachineScriptDetailFailureHandling]) for enum values.
             				# REQUIRED
             				scriptPath = $someString
             				# REQUIRED
             				timeoutMs = $someInt64
             			}
             			# OPTIONAL
             			throttlingSettings = @{
             				# OPTIONAL
             				cpuUtilizationThreshold = $someInt
             				# OPTIONAL
             				datastoreIoLatencyThreshold = $someInt
             				# OPTIONAL
             				ioLatencyThreshold = $someInt
             			}
             			# OPTIONAL
             			snapshotConsistencyMandate = $someVirtualMachineUpdateSnapshotConsistencyMandate # Call [Enum]::GetValues([RubrikSecurityCloud.Types.VirtualMachineUpdateSnapshotConsistencyMandate]) for enum values.
             		}
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestSuccess
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryAccount">
             <summary>
             Create a new RscQuery object for any of the 5
             operations in the 'Account' API domain:
             Id, Owners, Products, Settings, or WithExocomputeMappings.
             </summary>
             <description>
             New-RscQueryAccount creates a new
             query object for operations
             in the 'Account' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 5 operations
             in the 'Account' API domain. Select the operation this
             query is for by specifying the appropriate switch parameter;
             one of: -Id, -Owners, -Products, -Settings, -WithExocomputeMappings.
             Alternatively, you can specify the operation by setting the
             -Op parameter, for example: -Op Id,
             which is equivalent to specifying -Id.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryAccount -Id).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryAccount -Id).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the Id operation
             of the 'Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Account
             # API Operation: Id
             
             $query = New-RscQueryAccount -Id
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Owners operation
             of the 'Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Account
             # API Operation: Owners
             
             $query = New-RscQueryAccount -Owners
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;User&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Products operation
             of the 'Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Account
             # API Operation: Products
             
             $query = New-RscQueryAccount -Products
             
             # REQUIRED
             $query.Var.nameFilter = @(
             	$someProductName # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ProductName]) for enum values.
             )
             # REQUIRED
             $query.Var.typeFilter = @(
             	$someProductType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ProductType]) for enum values.
             )
             # REQUIRED
             $query.Var.stateFilter = @(
             	$someProductState # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ProductState]) for enum values.
             )
             # OPTIONAL
             $query.Var.startDateArg = $someDateTime
             # OPTIONAL
             $query.Var.endDateArg = $someDateTime
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AccountProduct&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Settings operation
             of the 'Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Account
             # API Operation: Settings
             
             $query = New-RscQueryAccount -Settings
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AccountSetting
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the WithExocomputeMappings operation
             of the 'Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Account
             # API Operation: WithExocomputeMappings
             
             $query = New-RscQueryAccount -WithExocomputeMappings
             
             # REQUIRED
             $query.Var.cloudVendor = $someCloudVendor # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudVendor]) for enum values.
             # REQUIRED
             $query.Var.features = @(
             	$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             )
             # REQUIRED
             $query.Var.exocomputeAccountIdsFilter = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;CloudAccountWithExocomputeMapping&gt;
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryActivitySeries">
             <summary>
             Create a new RscQuery object for any of the 2
             operations in the 'Activity series' API domain:
             ActivitySeries, or List.
             </summary>
             <description>
             New-RscQueryActivitySeries creates a new
             query object for operations
             in the 'Activity series' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 2 operations
             in the 'Activity series' API domain. Select the operation this
             query is for by specifying the appropriate switch parameter;
             one of: -ActivitySeries, -List.
             Alternatively, you can specify the operation by setting the
             -Op parameter, for example: -Op ActivitySeries,
             which is equivalent to specifying -ActivitySeries.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryActivitySeries -ActivitySeries).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryActivitySeries -ActivitySeries).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the ActivitySeries operation
             of the 'Activity series' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Activity series
             # API Operation: ActivitySeries
             
             $query = New-RscQueryActivitySeries -ActivitySeries
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	activitySeriesId = $someString
             	# OPTIONAL
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ActivitySeries
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the List operation
             of the 'Activity series' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Activity series
             # API Operation: List
             
             $query = New-RscQueryActivitySeries -List
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.sortBy = $someActivitySeriesSortField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ActivitySeriesSortField]) for enum values.
             # OPTIONAL
             $query.Var.filters = @{
             	# OPTIONAL
             	lastActivityStatus = @(
             		$someEventStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.EventStatus]) for enum values.
             	)
             	# OPTIONAL
             	lastActivityType = @(
             		$someEventType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.EventType]) for enum values.
             	)
             	# OPTIONAL
             	severity = @(
             		$someEventSeverity # Call [Enum]::GetValues([RubrikSecurityCloud.Types.EventSeverity]) for enum values.
             	)
             	# OPTIONAL
             	objectName = $someString
             	# OPTIONAL
             	objectType = @(
             		$someEventObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.EventObjectType]) for enum values.
             	)
             	# OPTIONAL
             	startTimeGt = $someDateTime
             	# OPTIONAL
             	startTimeLt = $someDateTime
             	# OPTIONAL
             	lastUpdatedTimeGt = $someDateTime
             	# OPTIONAL
             	lastUpdatedTimeLt = $someDateTime
             	# OPTIONAL
             	clusterId = @(
             		$someString
             	)
             	# OPTIONAL
             	clusterType = @(
             		$someEventClusterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.EventClusterType]) for enum values.
             	)
             	# OPTIONAL
             	objectFid = @(
             		$someString
             	)
             	# OPTIONAL
             	ancestorId = $someString
             	# OPTIONAL
             	searchTerm = $someString
             	# OPTIONAL
             	orgIds = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ActivitySeriesConnection
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryAws">
             <summary>
             Create a new RscQuery object for any of the 47
             operations in the 'AWS' API domain:
             AllAvailabilityZonesByRegion, AllCdmVersions, AllCloudAccountConfigs, AllCloudAccountsWithFeatures, AllComputeSettings, AllDbParameterGroupsByRegion, AllDbSubnetGroupsByRegion, AllEc2KeyPairsByRegion, AllExocomputeConfigs, AllInstanceProfileNames, AllKmsEncryptionKeysByRegion, AllOptionGroupsByRegion, AllPermissionPolicies, AllRegions, AllS3Buckets, AllS3BucketsDetails, AllSupportedRdsDatabaseInstanceClasses, AllVpcs, AllVpcsByRegion, AmiTypeForNativeArchivedSnapshotExport, ArtifactsToDelete, CloudAccountListSecurityGroups, CloudAccountListSubnets, CloudAccountListVpcs, CloudAccountWithFeatures, ComputeSettings, IsNativeEbsVolumeSnapshotRestorable, IsNativeRdsInstanceLaunchConfigurationValid, IsS3BucketNameAvailable, NativeAccount, NativeAccounts, NativeEbsVolume, NativeEbsVolumes, NativeEbsVolumesByName, NativeEc2Instance, NativeEc2Instances, NativeEc2InstancesByName, NativeRdsExportDefaults, NativeRdsInstance, NativeRdsInstances, NativeRdsPointInTimeRestoreWindow, NativeRoot, NativeS3Bucket, RdsInstanceDetails, TrustPolicy, ValidateNativeRdsClusterNameForExport, or ValidateNativeRdsInstanceNameForExport.
             </summary>
             <description>
             New-RscQueryAws creates a new
             query object for operations
             in the 'AWS' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 47 operations
             in the 'AWS' API domain. Select the operation this
             query is for by specifying the appropriate switch parameter;
             one of: -AllAvailabilityZonesByRegion, -AllCdmVersions, -AllCloudAccountConfigs, -AllCloudAccountsWithFeatures, -AllComputeSettings, -AllDbParameterGroupsByRegion, -AllDbSubnetGroupsByRegion, -AllEc2KeyPairsByRegion, -AllExocomputeConfigs, -AllInstanceProfileNames, -AllKmsEncryptionKeysByRegion, -AllOptionGroupsByRegion, -AllPermissionPolicies, -AllRegions, -AllS3Buckets, -AllS3BucketsDetails, -AllSupportedRdsDatabaseInstanceClasses, -AllVpcs, -AllVpcsByRegion, -AmiTypeForNativeArchivedSnapshotExport, -ArtifactsToDelete, -CloudAccountListSecurityGroups, -CloudAccountListSubnets, -CloudAccountListVpcs, -CloudAccountWithFeatures, -ComputeSettings, -IsNativeEbsVolumeSnapshotRestorable, -IsNativeRdsInstanceLaunchConfigurationValid, -IsS3BucketNameAvailable, -NativeAccount, -NativeAccounts, -NativeEbsVolume, -NativeEbsVolumes, -NativeEbsVolumesByName, -NativeEc2Instance, -NativeEc2Instances, -NativeEc2InstancesByName, -NativeRdsExportDefaults, -NativeRdsInstance, -NativeRdsInstances, -NativeRdsPointInTimeRestoreWindow, -NativeRoot, -NativeS3Bucket, -RdsInstanceDetails, -TrustPolicy, -ValidateNativeRdsClusterNameForExport, -ValidateNativeRdsInstanceNameForExport.
             Alternatively, you can specify the operation by setting the
             -Op parameter, for example: -Op AllAvailabilityZonesByRegion,
             which is equivalent to specifying -AllAvailabilityZonesByRegion.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryAws -AllAvailabilityZonesByRegion).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryAws -AllAvailabilityZonesByRegion).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AllAvailabilityZonesByRegion operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: AllAvailabilityZonesByRegion
             
             $query = New-RscQueryAws -AllAvailabilityZonesByRegion
             
             # REQUIRED
             $query.Var.awsAccountRubrikId = $someString
             # REQUIRED
             $query.Var.region = $someAwsNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegion]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;System.String&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllCdmVersions operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: AllCdmVersions
             
             $query = New-RscQueryAws -AllCdmVersions
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	cloudAccountId = $someString
             	# OPTIONAL
             	region = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AwsCdmVersion&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllCloudAccountConfigs operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: AllCloudAccountConfigs
             
             $query = New-RscQueryAws -AllCloudAccountConfigs
             
             # REQUIRED
             $query.Var.awsCloudAccountsArg = @{
             	# REQUIRED
             	feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	# REQUIRED
             	statusFilters = @(
             		$someCloudAccountStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountStatus]) for enum values.
             	)
             	# OPTIONAL
             	awsAdminAccountFilter = $someString
             	# OPTIONAL
             	columnSearchFilter = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AwsFeatureConfig&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllCloudAccountsWithFeatures operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: AllCloudAccountsWithFeatures
             
             $query = New-RscQueryAws -AllCloudAccountsWithFeatures
             
             # REQUIRED
             $query.Var.awsCloudAccountsArg = @{
             	# REQUIRED
             	feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	# REQUIRED
             	statusFilters = @(
             		$someCloudAccountStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountStatus]) for enum values.
             	)
             	# OPTIONAL
             	awsAdminAccountFilter = $someString
             	# OPTIONAL
             	columnSearchFilter = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AwsCloudAccountWithFeatures&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllComputeSettings operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: AllComputeSettings
             
             $query = New-RscQueryAws -AllComputeSettings
             
             # OPTIONAL
             $query.Var.sortBy = $someAwsCloudComputeSettingQuerySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsCloudComputeSettingQuerySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someAwsCloudComputeSettingFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsCloudComputeSettingFilterField]) for enum values.
             		# OPTIONAL
             		text = $someString
             }
             )
             # OPTIONAL
             $query.Var.contextFilter = $someContextFilterTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ContextFilterTypeEnum]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AwsComputeSettings&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllDbParameterGroupsByRegion operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: AllDbParameterGroupsByRegion
             
             $query = New-RscQueryAws -AllDbParameterGroupsByRegion
             
             # REQUIRED
             $query.Var.awsAccountRubrikId = $someString
             # REQUIRED
             $query.Var.region = $someAwsNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegion]) for enum values.
             # REQUIRED
             $query.Var.dbEngine = $someAwsNativeRdsDbEngine # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRdsDbEngine]) for enum values.
             # REQUIRED
             $query.Var.dbEngineVersion = $someString
             # OPTIONAL
             $query.Var.rdsType = $someAwsNativeRdsType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRdsType]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;DbParameterGroup&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllDbSubnetGroupsByRegion operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: AllDbSubnetGroupsByRegion
             
             $query = New-RscQueryAws -AllDbSubnetGroupsByRegion
             
             # REQUIRED
             $query.Var.awsAccountRubrikId = $someString
             # REQUIRED
             $query.Var.region = $someAwsNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegion]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;SubnetGroup&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllEc2KeyPairsByRegion operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: AllEc2KeyPairsByRegion
             
             $query = New-RscQueryAws -AllEc2KeyPairsByRegion
             
             # REQUIRED
             $query.Var.awsAccountRubrikId = $someString
             # REQUIRED
             $query.Var.region = $someAwsNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegion]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;System.String&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllExocomputeConfigs operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: AllExocomputeConfigs
             
             $query = New-RscQueryAws -AllExocomputeConfigs
             
             # REQUIRED
             $query.Var.awsNativeAccountIdOrNamePrefix = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AwsExocomputeConfig&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllInstanceProfileNames operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: AllInstanceProfileNames
             
             $query = New-RscQueryAws -AllInstanceProfileNames
             
             # REQUIRED
             $query.Var.cloudAccountId = $someString
             # REQUIRED
             $query.Var.region = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;System.String&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllKmsEncryptionKeysByRegion operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: AllKmsEncryptionKeysByRegion
             
             $query = New-RscQueryAws -AllKmsEncryptionKeysByRegion
             
             # REQUIRED
             $query.Var.awsAccountRubrikId = $someString
             # REQUIRED
             $query.Var.region = $someAwsNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegion]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;KmsEncryptionKey&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllOptionGroupsByRegion operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: AllOptionGroupsByRegion
             
             $query = New-RscQueryAws -AllOptionGroupsByRegion
             
             # REQUIRED
             $query.Var.awsAccountRubrikId = $someString
             # REQUIRED
             $query.Var.region = $someAwsNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegion]) for enum values.
             # REQUIRED
             $query.Var.dbEngine = $someAwsNativeRdsDbEngine # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRdsDbEngine]) for enum values.
             # REQUIRED
             $query.Var.dbEngineVersion = $someString
             # REQUIRED
             $query.Var.majorEngineVersion = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;OptionGroup&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllPermissionPolicies operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: AllPermissionPolicies
             
             $query = New-RscQueryAws -AllPermissionPolicies
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	cloudType = $someAwsCloudType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsCloudType]) for enum values.
             	# REQUIRED
             	features = @(
             		$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	)
             	# OPTIONAL
             	featureSpecificDetails = @{
             		# OPTIONAL
             		ec2RecoveryRolePath = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;PermissionPolicy&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllRegions operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: AllRegions
             
             $query = New-RscQueryAws -AllRegions
             
             # REQUIRED
             $query.Var.cloudAccountId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AwsCloudAccountRegion&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllS3Buckets operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: AllS3Buckets
             
             $query = New-RscQueryAws -AllS3Buckets
             
             # REQUIRED
             $query.Var.awsAccountRubrikId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;System.String&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllS3BucketsDetails operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: AllS3BucketsDetails
             
             $query = New-RscQueryAws -AllS3BucketsDetails
             
             # REQUIRED
             $query.Var.awsAccountRubrikId = $someString
             # OPTIONAL
             $query.Var.region = $someAwsNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegion]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;S3BucketDetails&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllSupportedRdsDatabaseInstanceClasses operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: AllSupportedRdsDatabaseInstanceClasses
             
             $query = New-RscQueryAws -AllSupportedRdsDatabaseInstanceClasses
             
             # REQUIRED
             $query.Var.awsAccountRubrikId = $someString
             # REQUIRED
             $query.Var.region = $someAwsNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegion]) for enum values.
             # REQUIRED
             $query.Var.dbEngine = $someAwsNativeRdsDbEngine # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRdsDbEngine]) for enum values.
             # OPTIONAL
             $query.Var.dbEngineVersion = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;System.String&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllVpcs operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: AllVpcs
             
             $query = New-RscQueryAws -AllVpcs
             
             # OPTIONAL
             $query.Var.awsAccountRubrikId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AwsVpc&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllVpcsByRegion operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: AllVpcsByRegion
             
             $query = New-RscQueryAws -AllVpcsByRegion
             
             # REQUIRED
             $query.Var.awsAccountRubrikId = $someString
             # REQUIRED
             $query.Var.region = $someAwsNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegion]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AwsVpc&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AmiTypeForNativeArchivedSnapshotExport operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: AmiTypeForNativeArchivedSnapshotExport
             
             $query = New-RscQueryAws -AmiTypeForNativeArchivedSnapshotExport
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snapshotId = $someString
             	# REQUIRED
             	destinationRegionId = $someAwsNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegion]) for enum values.
             	# REQUIRED
             	destinationAwsAccountRubrikId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AmiTypeForAwsNativeArchivedSnapshotExportReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ArtifactsToDelete operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: ArtifactsToDelete
             
             $query = New-RscQueryAws -ArtifactsToDelete
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	awsNativeId = $someString
             	# REQUIRED
             	features = @(
             		$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsArtifactsToDelete
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CloudAccountListSecurityGroups operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: CloudAccountListSecurityGroups
             
             $query = New-RscQueryAws -CloudAccountListSecurityGroups
             
             # REQUIRED
             $query.Var.cloudAccountUuid = $someString
             # REQUIRED
             $query.Var.feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             # REQUIRED
             $query.Var.region = $someAwsRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsRegion]) for enum values.
             # REQUIRED
             $query.Var.vpcID = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsCloudAccountListSecurityGroupsResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CloudAccountListSubnets operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: CloudAccountListSubnets
             
             $query = New-RscQueryAws -CloudAccountListSubnets
             
             # REQUIRED
             $query.Var.cloudAccountUuid = $someString
             # REQUIRED
             $query.Var.feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             # REQUIRED
             $query.Var.region = $someAwsRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsRegion]) for enum values.
             # REQUIRED
             $query.Var.vpcID = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsCloudAccountListSubnetsResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CloudAccountListVpcs operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: CloudAccountListVpcs
             
             $query = New-RscQueryAws -CloudAccountListVpcs
             
             # REQUIRED
             $query.Var.cloudAccountUuid = $someString
             # REQUIRED
             $query.Var.feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             # REQUIRED
             $query.Var.region = $someAwsRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsRegion]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsCloudAccountListVpcResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CloudAccountWithFeatures operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: CloudAccountWithFeatures
             
             $query = New-RscQueryAws -CloudAccountWithFeatures
             
             # REQUIRED
             $query.Var.cloudAccountId = $someString
             # REQUIRED
             $query.Var.awsCloudAccountArg = @{
             	# REQUIRED
             	features = @(
             		$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsCloudAccountWithFeatures
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ComputeSettings operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: ComputeSettings
             
             $query = New-RscQueryAws -ComputeSettings
             
             # REQUIRED
             $query.Var.computeSettingId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsComputeSettings
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the IsNativeEbsVolumeSnapshotRestorable operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: IsNativeEbsVolumeSnapshotRestorable
             
             $query = New-RscQueryAws -IsNativeEbsVolumeSnapshotRestorable
             
             # REQUIRED
             $query.Var.snapshotId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: IsVolumeSnapshotRestorableReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the IsNativeRdsInstanceLaunchConfigurationValid operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: IsNativeRdsInstanceLaunchConfigurationValid
             
             $query = New-RscQueryAws -IsNativeRdsInstanceLaunchConfigurationValid
             
             # REQUIRED
             $query.Var.awsAccountRubrikId = $someString
             # REQUIRED
             $query.Var.region = $someAwsNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegion]) for enum values.
             # REQUIRED
             $query.Var.dbEngine = $someAwsNativeRdsDbEngine # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRdsDbEngine]) for enum values.
             # REQUIRED
             $query.Var.dbEngineVersion = $someString
             # REQUIRED
             $query.Var.dbClass = $someAwsNativeRdsDbInstanceClass # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRdsDbInstanceClass]) for enum values.
             # OPTIONAL
             $query.Var.databaseInstanceClass = $someString
             # OPTIONAL
             $query.Var.primaryAz = $someString
             # OPTIONAL
             $query.Var.storageType = $someAwsNativeRdsStorageType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRdsStorageType]) for enum values.
             # REQUIRED
             $query.Var.isMultiAz = $someBoolean
             # OPTIONAL
             $query.Var.kmsKeyId = $someString
             # OPTIONAL
             $query.Var.iops = $someInt
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the IsS3BucketNameAvailable operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: IsS3BucketNameAvailable
             
             $query = New-RscQueryAws -IsS3BucketNameAvailable
             
             # REQUIRED
             $query.Var.bucketName = $someString
             # REQUIRED
             $query.Var.awsAccountRubrikId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NativeAccount operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: NativeAccount
             
             $query = New-RscQueryAws -NativeAccount
             
             # REQUIRED
             $query.Var.awsNativeAccountRubrikId = $someString
             # REQUIRED
             $query.Var.awsNativeProtectionFeature = $someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsNativeAccount
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NativeAccounts operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: NativeAccounts
             
             $query = New-RscQueryAws -NativeAccounts
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortBy = $someAwsNativeAccountSortFields # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeAccountSortFields]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.accountFilters = @{
             	# OPTIONAL
             	nameSubstringFilter = @{
             		# REQUIRED
             		nameSubstring = $someString
             	}
             	# OPTIONAL
             	effectiveSlaFilter = @{
             		# REQUIRED
             		effectiveSlaIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	cloudTypeFilter = @{
             		# REQUIRED
             		cloudTypes = @(
             			$someAwsCloudType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsCloudType]) for enum values.
             		)
             	}
             }
             # OPTIONAL
             $query.Var.authorizedOperationFilter = $someOperation # Call [Enum]::GetValues([RubrikSecurityCloud.Types.Operation]) for enum values.
             # REQUIRED
             $query.Var.awsNativeProtectionFeature = $someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsNativeAccountConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NativeEbsVolume operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: NativeEbsVolume
             
             $query = New-RscQueryAws -NativeEbsVolume
             
             # REQUIRED
             $query.Var.ebsVolumeRubrikId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsNativeEbsVolume
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NativeEbsVolumes operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: NativeEbsVolumes
             
             $query = New-RscQueryAws -NativeEbsVolumes
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortBy = $someAwsNativeEbsVolumeSortFields # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeEbsVolumeSortFields]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.ebsVolumeFilters = @{
             	# OPTIONAL
             	nameOrIdSubstringFilter = @{
             		# REQUIRED
             		nameOrIdSubstring = $someString
             	}
             	# OPTIONAL
             	fileRecoveryStatusFilter = @{
             		# REQUIRED
             		statuses = @(
             			$someAwsNativeFileRecoveryStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeFileRecoveryStatus]) for enum values.
             		)
             	}
             	# OPTIONAL
             	typeFilter = @{
             		# REQUIRED
             		ebsVolumeTypes = @(
             			$someAwsNativeEbsVolumeType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeEbsVolumeType]) for enum values.
             		)
             	}
             	# OPTIONAL
             	attachedInstanceFilter = @{
             		# REQUIRED
             		ec2InstanceIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	effectiveSlaFilter = @{
             		# REQUIRED
             		effectiveSlaIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	accountFilter = @{
             		# REQUIRED
             		accountIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	regionFilter = @{
             		# REQUIRED
             		regions = @(
             			$someAwsNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegion]) for enum values.
             		)
             	}
             	# OPTIONAL
             	relicFilter = @{
             		# REQUIRED
             		relic = $someBoolean
             	}
             	# OPTIONAL
             	tagFilter = @{
             		# REQUIRED
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             	}
             	# OPTIONAL
             	orgFilter = @{
             		# REQUIRED
             		orgIds = @(
             			$someString
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsNativeEbsVolumeConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NativeEbsVolumesByName operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: NativeEbsVolumesByName
             
             $query = New-RscQueryAws -NativeEbsVolumesByName
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortBy = $someAwsNativeEbsVolumeSortFields # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeEbsVolumeSortFields]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # REQUIRED
             $query.Var.ebsVolumeName = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsNativeEbsVolumeConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NativeEc2Instance operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: NativeEc2Instance
             
             $query = New-RscQueryAws -NativeEc2Instance
             
             # REQUIRED
             $query.Var.ec2InstanceRubrikId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsNativeEc2Instance
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NativeEc2Instances operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: NativeEc2Instances
             
             $query = New-RscQueryAws -NativeEc2Instances
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortBy = $someAwsNativeEc2InstanceSortFields # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeEc2InstanceSortFields]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.descendantTypeFilter = @(
             	$someHierarchyObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyObjectTypeEnum]) for enum values.
             )
             # OPTIONAL
             $query.Var.ec2InstanceFilters = @{
             	# OPTIONAL
             	nameOrIdSubstringFilter = @{
             		# REQUIRED
             		nameOrIdSubstring = $someString
             	}
             	# OPTIONAL
             	effectiveSlaFilter = @{
             		# REQUIRED
             		effectiveSlaIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	accountFilter = @{
             		# REQUIRED
             		accountIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	fileRecoveryStatusFilter = @{
             		# REQUIRED
             		statuses = @(
             			$someAwsNativeFileRecoveryStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeFileRecoveryStatus]) for enum values.
             		)
             	}
             	# OPTIONAL
             	regionFilter = @{
             		# REQUIRED
             		regions = @(
             			$someAwsNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegion]) for enum values.
             		)
             	}
             	# OPTIONAL
             	typeFilter = @{
             		# REQUIRED
             		ec2InstanceTypes = @(
             			$someAwsNativeEc2InstanceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeEc2InstanceType]) for enum values.
             		)
             	}
             	# OPTIONAL
             	vpcFilter = @{
             		# REQUIRED
             		vpcIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	relicFilter = @{
             		# REQUIRED
             		relic = $someBoolean
             	}
             	# OPTIONAL
             	tagFilter = @{
             		# REQUIRED
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             	}
             	# OPTIONAL
             	appProtectionStatusFilter = @{
             		# REQUIRED
             		isProtectionSetup = $someBoolean
             	}
             	# OPTIONAL
             	rbsStatusFilter = @{
             		# REQUIRED
             		status = $someCloudInstanceRbsConnectionStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudInstanceRbsConnectionStatus]) for enum values.
             	}
             	# OPTIONAL
             	orgFilter = @{
             		# REQUIRED
             		orgIds = @(
             			$someString
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsNativeEc2InstanceConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NativeEc2InstancesByName operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: NativeEc2InstancesByName
             
             $query = New-RscQueryAws -NativeEc2InstancesByName
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortBy = $someAwsNativeEc2InstanceSortFields # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeEc2InstanceSortFields]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # REQUIRED
             $query.Var.ec2InstanceName = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsNativeEc2InstanceConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NativeRdsExportDefaults operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: NativeRdsExportDefaults
             
             $query = New-RscQueryAws -NativeRdsExportDefaults
             
             # REQUIRED
             $query.Var.rdsInstanceRubrikId = $someString
             # OPTIONAL
             $query.Var.snapshotId = $someString
             # REQUIRED
             $query.Var.isPointInTime = $someBoolean
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RdsInstanceExportDefaults
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NativeRdsInstance operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: NativeRdsInstance
             
             $query = New-RscQueryAws -NativeRdsInstance
             
             # REQUIRED
             $query.Var.rdsInstanceRubrikId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsNativeRdsInstance
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NativeRdsInstances operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: NativeRdsInstances
             
             $query = New-RscQueryAws -NativeRdsInstances
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortBy = $someAwsNativeRdsInstanceSortFields # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRdsInstanceSortFields]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.rdsInstanceFilters = @{
             	# OPTIONAL
             	nameSubstringFilter = @{
             		# REQUIRED
             		nameSubstring = $someString
             	}
             	# OPTIONAL
             	effectiveSlaFilter = @{
             		# REQUIRED
             		effectiveSlaIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	accountFilter = @{
             		# REQUIRED
             		accountIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	vpcFilter = @{
             		# REQUIRED
             		vpcIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	relicFilter = @{
             		# REQUIRED
             		relic = $someBoolean
             	}
             	# OPTIONAL
             	tagFilter = @{
             		# REQUIRED
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             	}
             	# OPTIONAL
             	regionFilter = @{
             		# REQUIRED
             		regions = @(
             			$someAwsNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegion]) for enum values.
             		)
             	}
             	# OPTIONAL
             	dbEngineFilter = @{
             		# REQUIRED
             		dbEngines = @(
             			$someAwsNativeRdsDbEngine # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRdsDbEngine]) for enum values.
             		)
             	}
             	# OPTIONAL
             	dbInstanceClassFilter = @{
             		# REQUIRED
             		dbInstanceClasses = @(
             			$someAwsNativeRdsDbInstanceClass # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRdsDbInstanceClass]) for enum values.
             		)
             	}
             	# OPTIONAL
             	orgFilter = @{
             		# REQUIRED
             		orgIds = @(
             			$someString
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsNativeRdsInstanceConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NativeRdsPointInTimeRestoreWindow operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: NativeRdsPointInTimeRestoreWindow
             
             $query = New-RscQueryAws -NativeRdsPointInTimeRestoreWindow
             
             # REQUIRED
             $query.Var.awsAccountRubrikId = $someString
             # REQUIRED
             $query.Var.region = $someAwsNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegion]) for enum values.
             # REQUIRED
             $query.Var.rdsInstanceName = $someString
             # OPTIONAL
             $query.Var.rdsDatabaseRubrikId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsNativeRdsPointInTimeRestoreWindow
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NativeRoot operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: NativeRoot
             
             $query = New-RscQueryAws -NativeRoot
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsNativeRoot
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NativeS3Bucket operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: NativeS3Bucket
             
             $query = New-RscQueryAws -NativeS3Bucket
             
             # REQUIRED
             $query.Var.s3BucketRubrikId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsNativeS3Bucket
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RdsInstanceDetails operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: RdsInstanceDetails
             
             $query = New-RscQueryAws -RdsInstanceDetails
             
             # REQUIRED
             $query.Var.awsAccountRubrikId = $someString
             # REQUIRED
             $query.Var.region = $someAwsNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegion]) for enum values.
             # REQUIRED
             $query.Var.rdsInstanceName = $someString
             # OPTIONAL
             $query.Var.rdsDatabaseRubrikId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RdsInstanceDetailsFromAws
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TrustPolicy operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: TrustPolicy
             
             $query = New-RscQueryAws -TrustPolicy
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	cloudType = $someAwsCloudType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsCloudType]) for enum values.
             	# REQUIRED
             	features = @(
             		$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	)
             	# REQUIRED
             	awsNativeAccounts = @(
             		@{
             			# OPTIONAL
             			externalId = $someString
             			# REQUIRED
             			id = $someString
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsTrustPolicy
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ValidateNativeRdsClusterNameForExport operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: ValidateNativeRdsClusterNameForExport
             
             $query = New-RscQueryAws -ValidateNativeRdsClusterNameForExport
             
             # REQUIRED
             $query.Var.awsAccountRubrikId = $someString
             # REQUIRED
             $query.Var.region = $someAwsNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegion]) for enum values.
             # REQUIRED
             $query.Var.rdsClusterName = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ValidateAwsNativeRdsClusterNameForExportReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ValidateNativeRdsInstanceNameForExport operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AWS
             # API Operation: ValidateNativeRdsInstanceNameForExport
             
             $query = New-RscQueryAws -ValidateNativeRdsInstanceNameForExport
             
             # REQUIRED
             $query.Var.awsAccountRubrikId = $someString
             # REQUIRED
             $query.Var.region = $someAwsNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegion]) for enum values.
             # REQUIRED
             $query.Var.rdsInstanceName = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ValidateAwsNativeRdsInstanceNameForExportReply
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryAzure">
             <summary>
             Create a new RscQuery object for any of the 71
             operations in the 'Azure' API domain:
             AdDirectories, AdDirectory, AdObjectsByType, AllArmTemplatesByFeature, AllCdmVersions, AllCloudAccountMissingPermissions, AllCloudAccountSubnetsByRegion, AllCloudAccountSubscriptionsByFeature, AllCloudAccountTenants, AllDiskEncryptionSetsByRegion, AllEncryptionKeys, AllExocomputeConfigsInAccount, AllHostedRegions, AllKeyVaultsByRegion, AllManagedIdentities, AllNativeAvailabilitySetsByRegionFromAzure, AllNativeExportCompatibleDiskTypesByRegionFromAzure, AllNativeExportCompatibleVmSizesByRegionFromAzure, AllNativeResourceGroupsInfoIfExist, AllNativeSecurityGroupsByRegionFromAzure, AllNativeStorageAccountsFromAzure, AllNativeSubnetsByRegionFromAzure, AllNativeVirtualMachineSizes, AllNativeVirtualNetworks, AllNsgs, AllRegions, AllResourceGroups, AllResourceGroupsFrom, AllSqlDatabaseServerElasticPools, AllStorageAccounts, AllSubnets, AllSubscriptionWithExocomputeMappings, AllVnets, CheckPersistentStorageSubscriptionCanUnmap, CloudAccountPermissionConfig, CloudAccountSubscriptionWithFeatures, CloudAccountTenant, CloudAccountTenantWithExoConfigs, DoesNativeResourceGroupExist, IsNativeManagedDiskSnapshotRestorable, IsNativeSqlDatabaseSnapshotPersistent, IsStorageAccountNameAvailable, NativeManagedDisk, NativeManagedDisks, NativeResourceGroup, NativeResourceGroups, NativeRoot, NativeSubscription, NativeSubscriptions, NativeVirtualMachine, NativeVirtualMachines, Regions, ResourceGroups, SearchAdSnapshot, SqlDatabase, SqlDatabaseDbPointInTimeRestoreWindowFromAzure, SqlDatabaseServer, SqlDatabaseServers, SqlDatabases, SqlManagedInstanceDatabase, SqlManagedInstanceDatabases, SqlManagedInstanceDbPointInTimeRestoreWindowFromAzure, SqlManagedInstanceServer, SqlManagedInstanceServers, StorageAccounts, Subnets, Subscriptions, VNets, ValidateCloudAccountExocomputeConfigurations, ValidateNativeSqlDatabaseDbNameForExport, or ValidateNativeSqlManagedInstanceDbNameForExport.
             </summary>
             <description>
             New-RscQueryAzure creates a new
             query object for operations
             in the 'Azure' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 71 operations
             in the 'Azure' API domain. Select the operation this
             query is for by specifying the appropriate switch parameter;
             one of: -AdDirectories, -AdDirectory, -AdObjectsByType, -AllArmTemplatesByFeature, -AllCdmVersions, -AllCloudAccountMissingPermissions, -AllCloudAccountSubnetsByRegion, -AllCloudAccountSubscriptionsByFeature, -AllCloudAccountTenants, -AllDiskEncryptionSetsByRegion, -AllEncryptionKeys, -AllExocomputeConfigsInAccount, -AllHostedRegions, -AllKeyVaultsByRegion, -AllManagedIdentities, -AllNativeAvailabilitySetsByRegionFromAzure, -AllNativeExportCompatibleDiskTypesByRegionFromAzure, -AllNativeExportCompatibleVmSizesByRegionFromAzure, -AllNativeResourceGroupsInfoIfExist, -AllNativeSecurityGroupsByRegionFromAzure, -AllNativeStorageAccountsFromAzure, -AllNativeSubnetsByRegionFromAzure, -AllNativeVirtualMachineSizes, -AllNativeVirtualNetworks, -AllNsgs, -AllRegions, -AllResourceGroups, -AllResourceGroupsFrom, -AllSqlDatabaseServerElasticPools, -AllStorageAccounts, -AllSubnets, -AllSubscriptionWithExocomputeMappings, -AllVnets, -CheckPersistentStorageSubscriptionCanUnmap, -CloudAccountPermissionConfig, -CloudAccountSubscriptionWithFeatures, -CloudAccountTenant, -CloudAccountTenantWithExoConfigs, -DoesNativeResourceGroupExist, -IsNativeManagedDiskSnapshotRestorable, -IsNativeSqlDatabaseSnapshotPersistent, -IsStorageAccountNameAvailable, -NativeManagedDisk, -NativeManagedDisks, -NativeResourceGroup, -NativeResourceGroups, -NativeRoot, -NativeSubscription, -NativeSubscriptions, -NativeVirtualMachine, -NativeVirtualMachines, -Regions, -ResourceGroups, -SearchAdSnapshot, -SqlDatabase, -SqlDatabaseDbPointInTimeRestoreWindowFromAzure, -SqlDatabaseServer, -SqlDatabaseServers, -SqlDatabases, -SqlManagedInstanceDatabase, -SqlManagedInstanceDatabases, -SqlManagedInstanceDbPointInTimeRestoreWindowFromAzure, -SqlManagedInstanceServer, -SqlManagedInstanceServers, -StorageAccounts, -Subnets, -Subscriptions, -VNets, -ValidateCloudAccountExocomputeConfigurations, -ValidateNativeSqlDatabaseDbNameForExport, -ValidateNativeSqlManagedInstanceDbNameForExport.
             Alternatively, you can specify the operation by setting the
             -Op parameter, for example: -Op AdDirectories,
             which is equivalent to specifying -AdDirectories.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryAzure -AdDirectories).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryAzure -AdDirectories).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AdDirectories operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: AdDirectories
             
             $query = New-RscQueryAzure -AdDirectories
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureAdDirectoryConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AdDirectory operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: AdDirectory
             
             $query = New-RscQueryAzure -AdDirectory
             
             # REQUIRED
             $query.Var.workloadFid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureAdDirectory
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AdObjectsByType operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: AdObjectsByType
             
             $query = New-RscQueryAzure -AdObjectsByType
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortByOption = @(
             	$someAzureAdObjectSearchType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureAdObjectSearchType]) for enum values.
             )
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snapshotId = $someString
             	# REQUIRED
             	azureAdObjectType = $someAzureAdObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureAdObjectType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureAdObjectConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllArmTemplatesByFeature operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: AllArmTemplatesByFeature
             
             $query = New-RscQueryAzure -AllArmTemplatesByFeature
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	customerTenantDomainName = $someString
             	# REQUIRED
             	features = @(
             		$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	)
             	# REQUIRED
             	operationType = $someCloudAccountOperation # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountOperation]) for enum values.
             	# REQUIRED
             	cloudType = $someAzureCloudType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureCloudType]) for enum values.
             	# OPTIONAL
             	featuresToInclude = @(
             		@{
             			# OPTIONAL
             			permissionsGroups = @(
             				$somePermissionsGroup # Call [Enum]::GetValues([RubrikSecurityCloud.Types.PermissionsGroup]) for enum values.
             			)
             			# REQUIRED
             			featureType = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureArmTemplateByFeature&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllCdmVersions operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: AllCdmVersions
             
             $query = New-RscQueryAzure -AllCdmVersions
             
             # REQUIRED
             $query.Var.cdmVersionRequest = @{
             	# OPTIONAL
             	cloudAccountId = $someString
             	# OPTIONAL
             	location = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureCdmVersion&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllCloudAccountMissingPermissions operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: AllCloudAccountMissingPermissions
             
             $query = New-RscQueryAzure -AllCloudAccountMissingPermissions
             
             # REQUIRED
             $query.Var.sessionId = $someString
             # REQUIRED
             $query.Var.subscriptionIds = @(
             	$someString
             )
             # REQUIRED
             $query.Var.cloudAccountAction = $someCloudAccountAction # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountAction]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureSubscriptionMissingPermissions&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllCloudAccountSubnetsByRegion operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: AllCloudAccountSubnetsByRegion
             
             $query = New-RscQueryAzure -AllCloudAccountSubnetsByRegion
             
             # REQUIRED
             $query.Var.cloudAccountId = $someString
             # REQUIRED
             $query.Var.region = $someAzureCloudAccountRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureCloudAccountRegion]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureNativeSubnet&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllCloudAccountSubscriptionsByFeature operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: AllCloudAccountSubscriptionsByFeature
             
             $query = New-RscQueryAzure -AllCloudAccountSubscriptionsByFeature
             
             # REQUIRED
             $query.Var.feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             # REQUIRED
             $query.Var.subscriptionStatusFilters = @(
             	$someCloudAccountStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountStatus]) for enum values.
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureSubscriptionWithFeaturesType&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllCloudAccountTenants operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: AllCloudAccountTenants
             
             $query = New-RscQueryAzure -AllCloudAccountTenants
             
             # OPTIONAL
             $query.Var.features = @(
             	$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             )
             # REQUIRED
             $query.Var.feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             # REQUIRED
             $query.Var.includeSubscriptionDetails = $someBoolean
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureCloudAccountTenant&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllDiskEncryptionSetsByRegion operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: AllDiskEncryptionSetsByRegion
             
             $query = New-RscQueryAzure -AllDiskEncryptionSetsByRegion
             
             # REQUIRED
             $query.Var.azureSubscriptionRubrikId = $someString
             # REQUIRED
             $query.Var.region = $someAzureNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeRegion]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureNativeDiskEncryptionSet&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllEncryptionKeys operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: AllEncryptionKeys
             
             $query = New-RscQueryAzure -AllEncryptionKeys
             
             # REQUIRED
             $query.Var.azureEncryptionKeysInput = @{
             	# REQUIRED
             	cloudAccountId = $someString
             	# REQUIRED
             	keyVaultName = $someString
             	# REQUIRED
             	resourceGroupName = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureEncryptionKey&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllExocomputeConfigsInAccount operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: AllExocomputeConfigsInAccount
             
             $query = New-RscQueryAzure -AllExocomputeConfigsInAccount
             
             # OPTIONAL
             $query.Var.azureExocomputeSearchQuery = $someString
             # OPTIONAL
             $query.Var.cloudAccountIDs = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureExocomputeConfigsInAccount&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllHostedRegions operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: AllHostedRegions
             
             $query = New-RscQueryAzure -AllHostedRegions
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureRegionsResp
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllKeyVaultsByRegion operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: AllKeyVaultsByRegion
             
             $query = New-RscQueryAzure -AllKeyVaultsByRegion
             
             # REQUIRED
             $query.Var.azureKeyVaultsInput = @{
             	# REQUIRED
             	cloudAccountId = $someString
             	# REQUIRED
             	region = $someAzureRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureRegion]) for enum values.
             	# OPTIONAL
             	userAssignedManagedIdentityPrincipalId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureKeyVault&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllManagedIdentities operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: AllManagedIdentities
             
             $query = New-RscQueryAzure -AllManagedIdentities
             
             # REQUIRED
             $query.Var.managedIdentitiesRequest = @{
             	# REQUIRED
             	cloudAccountId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureManagedIdentity&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllNativeAvailabilitySetsByRegionFromAzure operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: AllNativeAvailabilitySetsByRegionFromAzure
             
             $query = New-RscQueryAzure -AllNativeAvailabilitySetsByRegionFromAzure
             
             # REQUIRED
             $query.Var.azureSubscriptionRubrikId = $someString
             # REQUIRED
             $query.Var.resourceGroupName = $someString
             # REQUIRED
             $query.Var.region = $someAzureNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeRegion]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureNativeAvailabilitySet&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllNativeExportCompatibleDiskTypesByRegionFromAzure operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: AllNativeExportCompatibleDiskTypesByRegionFromAzure
             
             $query = New-RscQueryAzure -AllNativeExportCompatibleDiskTypesByRegionFromAzure
             
             # REQUIRED
             $query.Var.azureSubscriptionRubrikId = $someString
             # REQUIRED
             $query.Var.region = $someAzureNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeRegion]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureNativeExportCompatibleDiskTypes&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllNativeExportCompatibleVmSizesByRegionFromAzure operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: AllNativeExportCompatibleVmSizesByRegionFromAzure
             
             $query = New-RscQueryAzure -AllNativeExportCompatibleVmSizesByRegionFromAzure
             
             # REQUIRED
             $query.Var.azureSubscriptionRubrikId = $someString
             # REQUIRED
             $query.Var.region = $someAzureNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeRegion]) for enum values.
             # REQUIRED
             $query.Var.vmSnapshotId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureNativeExportCompatibleVmSizes&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllNativeResourceGroupsInfoIfExist operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: AllNativeResourceGroupsInfoIfExist
             
             $query = New-RscQueryAzure -AllNativeResourceGroupsInfoIfExist
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	sessionId = $someString
             	# REQUIRED
             	resourceGroupInputs = @(
             		@{
             			# REQUIRED
             			subscriptionNativeId = $someString
             			# REQUIRED
             			resourceGroupName = $someString
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureResourceGroupInfo&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllNativeSecurityGroupsByRegionFromAzure operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: AllNativeSecurityGroupsByRegionFromAzure
             
             $query = New-RscQueryAzure -AllNativeSecurityGroupsByRegionFromAzure
             
             # REQUIRED
             $query.Var.azureSubscriptionRubrikId = $someString
             # REQUIRED
             $query.Var.region = $someAzureNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeRegion]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureNativeSecurityGroup&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllNativeStorageAccountsFromAzure operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: AllNativeStorageAccountsFromAzure
             
             $query = New-RscQueryAzure -AllNativeStorageAccountsFromAzure
             
             # REQUIRED
             $query.Var.azureSubscriptionRubrikId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureNativeStorageAccount&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllNativeSubnetsByRegionFromAzure operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: AllNativeSubnetsByRegionFromAzure
             
             $query = New-RscQueryAzure -AllNativeSubnetsByRegionFromAzure
             
             # REQUIRED
             $query.Var.azureSubscriptionRubrikId = $someString
             # REQUIRED
             $query.Var.region = $someAzureNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeRegion]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureNativeSubnet&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllNativeVirtualMachineSizes operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: AllNativeVirtualMachineSizes
             
             $query = New-RscQueryAzure -AllNativeVirtualMachineSizes
             
             # OPTIONAL
             $query.Var.azureSubscriptionRubrikId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;System.String&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllNativeVirtualNetworks operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: AllNativeVirtualNetworks
             
             $query = New-RscQueryAzure -AllNativeVirtualNetworks
             
             # OPTIONAL
             $query.Var.azureSubscriptionRubrikId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureNativeVirtualNetwork&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllNsgs operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: AllNsgs
             
             $query = New-RscQueryAzure -AllNsgs
             
             # REQUIRED
             $query.Var.nsgRequest = @{
             	# OPTIONAL
             	cloudAccountId = $someString
             	# OPTIONAL
             	resourceGroup = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;System.String&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllRegions operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: AllRegions
             
             $query = New-RscQueryAzure -AllRegions
             
             # REQUIRED
             $query.Var.cloudAccountId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureCloudAccountRegion&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllResourceGroups operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: AllResourceGroups
             
             $query = New-RscQueryAzure -AllResourceGroups
             
             # REQUIRED
             $query.Var.cloudAccountId = $someString
             # REQUIRED
             $query.Var.azureRegion = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;System.String&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllResourceGroupsFrom operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: AllResourceGroupsFrom
             
             $query = New-RscQueryAzure -AllResourceGroupsFrom
             
             # REQUIRED
             $query.Var.cloudAccountId = $someString
             # REQUIRED
             $query.Var.azureSubscriptionNativeId = $someString
             # REQUIRED
             $query.Var.feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureResourceGroup&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllSqlDatabaseServerElasticPools operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: AllSqlDatabaseServerElasticPools
             
             $query = New-RscQueryAzure -AllSqlDatabaseServerElasticPools
             
             # REQUIRED
             $query.Var.subscriptionId = $someString
             # REQUIRED
             $query.Var.resourceGroupName = $someString
             # REQUIRED
             $query.Var.azureSqlDatabaseServerName = $someString
             # REQUIRED
             $query.Var.azureSqlDatabaseServerRubrikId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureSqlDatabaseServerElasticPool&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllStorageAccounts operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: AllStorageAccounts
             
             $query = New-RscQueryAzure -AllStorageAccounts
             
             # REQUIRED
             $query.Var.storageAccountsRequest = @{
             	# OPTIONAL
             	cloudAccountId = $someString
             	# OPTIONAL
             	resourceGroup = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;System.String&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllSubnets operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: AllSubnets
             
             $query = New-RscQueryAzure -AllSubnets
             
             # REQUIRED
             $query.Var.subnetRequest = @{
             	# OPTIONAL
             	cloudAccountId = $someString
             	# OPTIONAL
             	resourceGroup = $someString
             	# OPTIONAL
             	vnetName = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;System.String&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllSubscriptionWithExocomputeMappings operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: AllSubscriptionWithExocomputeMappings
             
             $query = New-RscQueryAzure -AllSubscriptionWithExocomputeMappings
             
             # OPTIONAL
             $query.Var.features = @(
             	$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             )
             # OPTIONAL
             $query.Var.exocomputeSubscriptionIdsFilter = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureSubscriptionWithExocomputeMapping&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllVnets operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: AllVnets
             
             $query = New-RscQueryAzure -AllVnets
             
             # REQUIRED
             $query.Var.vnetRequest = @{
             	# OPTIONAL
             	cloudAccountId = $someString
             	# OPTIONAL
             	resourceGroup = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;System.String&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CheckPersistentStorageSubscriptionCanUnmap operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: CheckPersistentStorageSubscriptionCanUnmap
             
             $query = New-RscQueryAzure -CheckPersistentStorageSubscriptionCanUnmap
             
             # REQUIRED
             $query.Var.cloudAccountId = $someString
             # REQUIRED
             $query.Var.feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             # REQUIRED
             $query.Var.unmappingValidationType = $someUnmappingValidationType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmappingValidationType]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CheckAzurePersistentStorageSubscriptionCanUnmapReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CloudAccountPermissionConfig operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: CloudAccountPermissionConfig
             
             $query = New-RscQueryAzure -CloudAccountPermissionConfig
             
             # REQUIRED
             $query.Var.feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureCloudAccountPermissionConfigResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CloudAccountSubscriptionWithFeatures operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: CloudAccountSubscriptionWithFeatures
             
             $query = New-RscQueryAzure -CloudAccountSubscriptionWithFeatures
             
             # REQUIRED
             $query.Var.cloudAccountId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureCloudAccountSubscriptionWithFeatures
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CloudAccountTenant operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: CloudAccountTenant
             
             $query = New-RscQueryAzure -CloudAccountTenant
             
             # REQUIRED
             $query.Var.tenantId = $someString
             # REQUIRED
             $query.Var.feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             # REQUIRED
             $query.Var.subscriptionStatusFilters = @(
             	$someCloudAccountStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountStatus]) for enum values.
             )
             # REQUIRED
             $query.Var.subscriptionSearchText = $someString
             # OPTIONAL
             $query.Var.subscriptionIdsFilter = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureCloudAccountTenant
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CloudAccountTenantWithExoConfigs operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: CloudAccountTenantWithExoConfigs
             
             $query = New-RscQueryAzure -CloudAccountTenantWithExoConfigs
             
             # REQUIRED
             $query.Var.tenantId = $someString
             # REQUIRED
             $query.Var.feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             # REQUIRED
             $query.Var.subscriptionStatusFilters = @(
             	$someCloudAccountStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountStatus]) for enum values.
             )
             # REQUIRED
             $query.Var.subscriptionSearchText = $someString
             # OPTIONAL
             $query.Var.subscriptionIdsFilter = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureCloudAccountTenantWithExoConfigs
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DoesNativeResourceGroupExist operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: DoesNativeResourceGroupExist
             
             $query = New-RscQueryAzure -DoesNativeResourceGroupExist
             
             # REQUIRED
             $query.Var.cloudAccountId = $someString
             # REQUIRED
             $query.Var.azureSubscriptionNativeId = $someString
             # REQUIRED
             $query.Var.resourceGroupName = $someString
             # REQUIRED
             $query.Var.feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the IsNativeManagedDiskSnapshotRestorable operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: IsNativeManagedDiskSnapshotRestorable
             
             $query = New-RscQueryAzure -IsNativeManagedDiskSnapshotRestorable
             
             # REQUIRED
             $query.Var.azureSubscriptionRubrikId = $someString
             # REQUIRED
             $query.Var.diskSnapshotId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the IsNativeSqlDatabaseSnapshotPersistent operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: IsNativeSqlDatabaseSnapshotPersistent
             
             $query = New-RscQueryAzure -IsNativeSqlDatabaseSnapshotPersistent
             
             # REQUIRED
             $query.Var.snapshotId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the IsStorageAccountNameAvailable operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: IsStorageAccountNameAvailable
             
             $query = New-RscQueryAzure -IsStorageAccountNameAvailable
             
             # REQUIRED
             $query.Var.azureSubscriptionRubrikId = $someString
             # REQUIRED
             $query.Var.storageAccountName = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NativeManagedDisk operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: NativeManagedDisk
             
             $query = New-RscQueryAzure -NativeManagedDisk
             
             # REQUIRED
             $query.Var.azureManagedDiskRubrikId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureNativeManagedDisk
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NativeManagedDisks operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: NativeManagedDisks
             
             $query = New-RscQueryAzure -NativeManagedDisks
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortBy = $someAzureNativeDiskSortFields # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeDiskSortFields]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.diskFilters = @{
             	# OPTIONAL
             	nameSubstringFilter = @{
             		# REQUIRED
             		nameSubstring = $someString
             	}
             	# OPTIONAL
             	effectiveSlaFilter = @{
             		# REQUIRED
             		effectiveSlaIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	resourceGroupFilter = @{
             		# REQUIRED
             		resourceGroupNames = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	subscriptionFilter = @{
             		# REQUIRED
             		subscriptionIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	regionFilter = @{
             		# REQUIRED
             		regions = @(
             			$someAzureNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeRegion]) for enum values.
             		)
             	}
             	# OPTIONAL
             	diskTypeFilter = @{
             		# REQUIRED
             		diskTypes = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	attachedVmFilter = @{
             		# REQUIRED
             		virtualMachineIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	relicFilter = @{
             		# REQUIRED
             		relic = $someBoolean
             	}
             	# OPTIONAL
             	tagFilter = @{
             		# REQUIRED
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             	}
             	# OPTIONAL
             	exocomputeConnectedFilter = @{
             		# REQUIRED
             		isConnected = $someBoolean
             	}
             	# OPTIONAL
             	fileIndexingFilter = @{
             		# REQUIRED
             		statuses = @(
             			$someAzureNativeFileIndexingStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeFileIndexingStatus]) for enum values.
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureNativeManagedDiskConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NativeResourceGroup operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: NativeResourceGroup
             
             $query = New-RscQueryAzure -NativeResourceGroup
             
             # REQUIRED
             $query.Var.resourceGroupId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureNativeResourceGroup
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NativeResourceGroups operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: NativeResourceGroups
             
             $query = New-RscQueryAzure -NativeResourceGroups
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortBy = $someAzureNativeCommonResourceGroupSortFields # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeCommonResourceGroupSortFields]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.commonResourceGroupFilters = @{
             	# OPTIONAL
             	nameSubstringFilter = @{
             		# REQUIRED
             		nameSubstring = $someString
             	}
             	# OPTIONAL
             	subscriptionFilter = @{
             		# REQUIRED
             		subscriptionIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	regionFilter = @{
             		# REQUIRED
             		regions = @(
             			$someAzureNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeRegion]) for enum values.
             		)
             	}
             	# OPTIONAL
             	effectiveSlaFilter = @{
             		# REQUIRED
             		effectiveSlaIds = @(
             			$someString
             		)
             	}
             }
             # OPTIONAL
             $query.Var.protectedObjectTypes = @(
             	$someWorkloadLevelHierarchy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.WorkloadLevelHierarchy]) for enum values.
             )
             # OPTIONAL
             $query.Var.azureNativeProtectionFeatures = @(
             	$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureNativeResourceGroupConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NativeRoot operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: NativeRoot
             
             $query = New-RscQueryAzure -NativeRoot
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureNativeRoot
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NativeSubscription operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: NativeSubscription
             
             $query = New-RscQueryAzure -NativeSubscription
             
             # REQUIRED
             $query.Var.azureSubscriptionRubrikId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureNativeSubscription
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NativeSubscriptions operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: NativeSubscriptions
             
             $query = New-RscQueryAzure -NativeSubscriptions
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortBy = $someAzureNativeSubscriptionSortFields # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeSubscriptionSortFields]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.subscriptionFilters = @{
             	# OPTIONAL
             	nameSubstringFilter = @{
             		# REQUIRED
             		nameSubstring = $someString
             	}
             	# OPTIONAL
             	effectiveSlaFilter = @{
             		# REQUIRED
             		effectiveSlaIds = @(
             			$someString
             		)
             	}
             }
             # OPTIONAL
             $query.Var.authorizedOperationFilter = $someOperation # Call [Enum]::GetValues([RubrikSecurityCloud.Types.Operation]) for enum values.
             # OPTIONAL
             $query.Var.workloadHierarchy = $someWorkloadLevelHierarchy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.WorkloadLevelHierarchy]) for enum values.
             # OPTIONAL
             $query.Var.azureNativeProtectionFeature = $someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureNativeSubscriptionConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NativeVirtualMachine operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: NativeVirtualMachine
             
             $query = New-RscQueryAzure -NativeVirtualMachine
             
             # REQUIRED
             $query.Var.azureVirtualMachineRubrikId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureNativeVirtualMachine
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NativeVirtualMachines operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: NativeVirtualMachines
             
             $query = New-RscQueryAzure -NativeVirtualMachines
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortBy = $someAzureNativeVirtualMachineSortFields # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeVirtualMachineSortFields]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.descendantTypeFilter = @(
             	$someHierarchyObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyObjectTypeEnum]) for enum values.
             )
             # OPTIONAL
             $query.Var.virtualMachineFilters = @{
             	# OPTIONAL
             	nameSubstringFilter = @{
             		# REQUIRED
             		nameSubstring = $someString
             	}
             	# OPTIONAL
             	effectiveSlaFilter = @{
             		# REQUIRED
             		effectiveSlaIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	resourceGroupFilter = @{
             		# REQUIRED
             		resourceGroupNames = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	subscriptionFilter = @{
             		# REQUIRED
             		subscriptionIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	regionFilter = @{
             		# REQUIRED
             		regions = @(
             			$someAzureNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeRegion]) for enum values.
             		)
             	}
             	# OPTIONAL
             	vmSizeFilter = @{
             		# REQUIRED
             		vmSizes = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	vnetFilter = @{
             		# REQUIRED
             		vnetNames = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	relicFilter = @{
             		# REQUIRED
             		relic = $someBoolean
             	}
             	# OPTIONAL
             	tagFilter = @{
             		# REQUIRED
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             	}
             	# OPTIONAL
             	exocomputeConnectedFilter = @{
             		# REQUIRED
             		isConnected = $someBoolean
             	}
             	# OPTIONAL
             	fileIndexingFilter = @{
             		# REQUIRED
             		statuses = @(
             			$someAzureNativeFileIndexingStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeFileIndexingStatus]) for enum values.
             		)
             	}
             	# OPTIONAL
             	appProtectionStatusFilter = @{
             		# REQUIRED
             		isProtectionSetup = $someBoolean
             	}
             	# OPTIONAL
             	rbsStatusFilter = @{
             		# REQUIRED
             		status = $someCloudInstanceRbsConnectionStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudInstanceRbsConnectionStatus]) for enum values.
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureNativeVirtualMachineConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Regions operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: Regions
             
             $query = New-RscQueryAzure -Regions
             
             # REQUIRED
             $query.Var.tenantId = $someString
             # REQUIRED
             $query.Var.subscriptionId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RegionConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ResourceGroups operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: ResourceGroups
             
             $query = New-RscQueryAzure -ResourceGroups
             
             # REQUIRED
             $query.Var.tenantId = $someString
             # REQUIRED
             $query.Var.subscriptionId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ResourceGroupConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SearchAdSnapshot operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: SearchAdSnapshot
             
             $query = New-RscQueryAzure -SearchAdSnapshot
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snapshotId = $someString
             	# REQUIRED
             	azureAdSearchKeyword = $someString
             	# REQUIRED
             	azureAdObjectType = $someAzureAdObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureAdObjectType]) for enum values.
             	# REQUIRED
             	azureAdSearchKeywordType = $someAzureAdObjectSearchType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureAdObjectSearchType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureAdObjectConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SqlDatabase operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: SqlDatabase
             
             $query = New-RscQueryAzure -SqlDatabase
             
             # REQUIRED
             $query.Var.azureSqlDatabaseRubrikId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureSqlDatabaseDb
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SqlDatabaseDbPointInTimeRestoreWindowFromAzure operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: SqlDatabaseDbPointInTimeRestoreWindowFromAzure
             
             $query = New-RscQueryAzure -SqlDatabaseDbPointInTimeRestoreWindowFromAzure
             
             # REQUIRED
             $query.Var.subscriptionId = $someString
             # REQUIRED
             $query.Var.resourceGroupName = $someString
             # REQUIRED
             $query.Var.azureSqlDatabaseServerName = $someString
             # REQUIRED
             $query.Var.azureSqlDatabaseName = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureNativeSqlDatabasePointInTimeRestoreWindow
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SqlDatabaseServer operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: SqlDatabaseServer
             
             $query = New-RscQueryAzure -SqlDatabaseServer
             
             # REQUIRED
             $query.Var.azureSqlDatabaseServerRubrikId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureSqlDatabaseServer
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SqlDatabaseServers operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: SqlDatabaseServers
             
             $query = New-RscQueryAzure -SqlDatabaseServers
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortBy = $someAzureSqlDatabaseServerSortFields # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureSqlDatabaseServerSortFields]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.azureSqlDatabaseServerFilters = @{
             	# OPTIONAL
             	nameSubstringFilter = @{
             		# REQUIRED
             		nameSubstring = $someString
             	}
             	# OPTIONAL
             	effectiveSlaFilter = @{
             		# REQUIRED
             		effectiveSlaIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	resourceGroupFilter = @{
             		# REQUIRED
             		resourceGroupNames = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	subscriptionFilter = @{
             		# REQUIRED
             		subscriptionIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	regionFilter = @{
             		# REQUIRED
             		regions = @(
             			$someAzureNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeRegion]) for enum values.
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureSqlDatabaseServerConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SqlDatabases operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: SqlDatabases
             
             $query = New-RscQueryAzure -SqlDatabases
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortBy = $someAzureSqlDatabaseSortFields # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureSqlDatabaseSortFields]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.azureSqlDatabaseFilters = @{
             	# OPTIONAL
             	nameSubstringFilter = @{
             		# REQUIRED
             		nameSubstring = $someString
             	}
             	# OPTIONAL
             	effectiveSlaFilter = @{
             		# REQUIRED
             		effectiveSlaIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	resourceGroupFilter = @{
             		# REQUIRED
             		resourceGroupNames = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	subscriptionFilter = @{
             		# REQUIRED
             		subscriptionIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	regionFilter = @{
             		# REQUIRED
             		regions = @(
             			$someAzureNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeRegion]) for enum values.
             		)
             	}
             	# OPTIONAL
             	relicFilter = @{
             		# REQUIRED
             		relic = $someBoolean
             	}
             	# OPTIONAL
             	tagFilter = @{
             		# REQUIRED
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             	}
             	# OPTIONAL
             	serverFilter = @{
             		# REQUIRED
             		serverNames = @(
             			$someString
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureSqlDatabaseDbConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SqlManagedInstanceDatabase operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: SqlManagedInstanceDatabase
             
             $query = New-RscQueryAzure -SqlManagedInstanceDatabase
             
             # REQUIRED
             $query.Var.azureSqlManagedInstanceDatabaseRubrikId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureSqlManagedInstanceDatabase
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SqlManagedInstanceDatabases operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: SqlManagedInstanceDatabases
             
             $query = New-RscQueryAzure -SqlManagedInstanceDatabases
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortBy = $someAzureSqlManagedInstanceDatabaseSortFields # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureSqlManagedInstanceDatabaseSortFields]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.azureSqlManagedInstanceDatabaseFilters = @{
             	# OPTIONAL
             	nameSubstringFilter = @{
             		# REQUIRED
             		nameSubstring = $someString
             	}
             	# OPTIONAL
             	effectiveSlaFilter = @{
             		# REQUIRED
             		effectiveSlaIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	resourceGroupFilter = @{
             		# REQUIRED
             		resourceGroupNames = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	subscriptionFilter = @{
             		# REQUIRED
             		subscriptionIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	regionFilter = @{
             		# REQUIRED
             		regions = @(
             			$someAzureNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeRegion]) for enum values.
             		)
             	}
             	# OPTIONAL
             	relicFilter = @{
             		# REQUIRED
             		relic = $someBoolean
             	}
             	# OPTIONAL
             	serverFilter = @{
             		# REQUIRED
             		serverNames = @(
             			$someString
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureSqlManagedInstanceDatabaseConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SqlManagedInstanceDbPointInTimeRestoreWindowFromAzure operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: SqlManagedInstanceDbPointInTimeRestoreWindowFromAzure
             
             $query = New-RscQueryAzure -SqlManagedInstanceDbPointInTimeRestoreWindowFromAzure
             
             # REQUIRED
             $query.Var.subscriptionId = $someString
             # REQUIRED
             $query.Var.resourceGroupName = $someString
             # REQUIRED
             $query.Var.azureSqlManagedInstanceName = $someString
             # REQUIRED
             $query.Var.azureSqlDatabaseName = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureNativeSqlDatabasePointInTimeRestoreWindow
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SqlManagedInstanceServer operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: SqlManagedInstanceServer
             
             $query = New-RscQueryAzure -SqlManagedInstanceServer
             
             # REQUIRED
             $query.Var.azureSqlManagedInstanceServerRubrikId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureSqlManagedInstanceServer
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SqlManagedInstanceServers operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: SqlManagedInstanceServers
             
             $query = New-RscQueryAzure -SqlManagedInstanceServers
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortBy = $someAzureSqlManagedInstanceServerSortFields # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureSqlManagedInstanceServerSortFields]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.azureSqlManagedInstanceServerFilters = @{
             	# OPTIONAL
             	nameSubstringFilter = @{
             		# REQUIRED
             		nameSubstring = $someString
             	}
             	# OPTIONAL
             	effectiveSlaFilter = @{
             		# REQUIRED
             		effectiveSlaIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	resourceGroupFilter = @{
             		# REQUIRED
             		resourceGroupNames = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	subscriptionFilter = @{
             		# REQUIRED
             		subscriptionIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	regionFilter = @{
             		# REQUIRED
             		regions = @(
             			$someAzureNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeRegion]) for enum values.
             		)
             	}
             	# OPTIONAL
             	tagFilter = @{
             		# REQUIRED
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureSqlManagedInstanceServerConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StorageAccounts operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: StorageAccounts
             
             $query = New-RscQueryAzure -StorageAccounts
             
             # REQUIRED
             $query.Var.tenantId = $someString
             # REQUIRED
             $query.Var.subscriptionId = $someString
             # REQUIRED
             $query.Var.regionName = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: StorageAccountConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Subnets operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: Subnets
             
             $query = New-RscQueryAzure -Subnets
             
             # REQUIRED
             $query.Var.tenantId = $someString
             # REQUIRED
             $query.Var.subscriptionId = $someString
             # REQUIRED
             $query.Var.vNetId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SubnetConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Subscriptions operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: Subscriptions
             
             $query = New-RscQueryAzure -Subscriptions
             
             # REQUIRED
             $query.Var.tenantId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureSubscriptionConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the VNets operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: VNets
             
             $query = New-RscQueryAzure -VNets
             
             # REQUIRED
             $query.Var.tenantId = $someString
             # REQUIRED
             $query.Var.subscriptionId = $someString
             # REQUIRED
             $query.Var.regionName = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VnetConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ValidateCloudAccountExocomputeConfigurations operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: ValidateCloudAccountExocomputeConfigurations
             
             $query = New-RscQueryAzure -ValidateCloudAccountExocomputeConfigurations
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	cloudAccountId = $someString
             	# REQUIRED
             	azureExocomputeRegionConfigs = @(
             		@{
             			# REQUIRED
             			region = $someAzureCloudAccountRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureCloudAccountRegion]) for enum values.
             			# REQUIRED
             			subnetNativeId = $someString
             			# REQUIRED
             			isRscManaged = $someBoolean
             			# OPTIONAL
             			podSubnetNativeId = $someString
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ValidateAzureSubnetsForCloudAccountExocomputeReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ValidateNativeSqlDatabaseDbNameForExport operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: ValidateNativeSqlDatabaseDbNameForExport
             
             $query = New-RscQueryAzure -ValidateNativeSqlDatabaseDbNameForExport
             
             # REQUIRED
             $query.Var.azureSqlDatabaseName = $someString
             # REQUIRED
             $query.Var.azureSqlDatabaseServerRubrikId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ValidateAzureNativeSqlDatabaseDbNameForExportReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ValidateNativeSqlManagedInstanceDbNameForExport operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: ValidateNativeSqlManagedInstanceDbNameForExport
             
             $query = New-RscQueryAzure -ValidateNativeSqlManagedInstanceDbNameForExport
             
             # REQUIRED
             $query.Var.azureSqlDatabaseName = $someString
             # REQUIRED
             $query.Var.azureSqlManagedInstanceServerRubrikId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ValidateAzureNativeSqlManagedInstanceDbNameForExportReply
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryAzureO365">
             <summary>
             Create a new RscQuery object for any of the 11
             operations in the 'AzureO365' API domain:
             CheckNSGOutboundRules, CheckNetworkSubnet, CheckResourceGroupName, CheckStorageAccountAccessibility, CheckStorageAccountName, CheckSubscriptionQuota, CheckVirtualNetworkName, Exocompute, GetAzureHostType, GetNetworkSubnetUnusedAddr, or ValidateUserRoles.
             </summary>
             <description>
             New-RscQueryAzureO365 creates a new
             query object for operations
             in the 'AzureO365' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 11 operations
             in the 'AzureO365' API domain. Select the operation this
             query is for by specifying the appropriate switch parameter;
             one of: -CheckNSGOutboundRules, -CheckNetworkSubnet, -CheckResourceGroupName, -CheckStorageAccountAccessibility, -CheckStorageAccountName, -CheckSubscriptionQuota, -CheckVirtualNetworkName, -Exocompute, -GetAzureHostType, -GetNetworkSubnetUnusedAddr, -ValidateUserRoles.
             Alternatively, you can specify the operation by setting the
             -Op parameter, for example: -Op CheckNSGOutboundRules,
             which is equivalent to specifying -CheckNSGOutboundRules.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryAzureO365 -CheckNSGOutboundRules).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryAzureO365 -CheckNSGOutboundRules).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the CheckNSGOutboundRules operation
             of the 'AzureO365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureO365
             # API Operation: CheckNSGOutboundRules
             
             $query = New-RscQueryAzureO365 -CheckNSGOutboundRules
             
             # REQUIRED
             $query.Var.tenantId = $someString
             # REQUIRED
             $query.Var.subscriptionId = $someString
             # REQUIRED
             $query.Var.resourceGroupName = $someString
             # REQUIRED
             $query.Var.vnet_name = $someString
             # REQUIRED
             $query.Var.subnet_name = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureNetworkSecurityGroupResp
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CheckNetworkSubnet operation
             of the 'AzureO365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureO365
             # API Operation: CheckNetworkSubnet
             
             $query = New-RscQueryAzureO365 -CheckNetworkSubnet
             
             # REQUIRED
             $query.Var.tenantId = $someString
             # REQUIRED
             $query.Var.subscriptionId = $someString
             # REQUIRED
             $query.Var.resourceGroupName = $someString
             # REQUIRED
             $query.Var.vnet_name = $someString
             # REQUIRED
             $query.Var.subnet_name = $someString
             # REQUIRED
             $query.Var.strict_addr_check = $someBoolean
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureNetworkSubnetResp
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CheckResourceGroupName operation
             of the 'AzureO365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureO365
             # API Operation: CheckResourceGroupName
             
             $query = New-RscQueryAzureO365 -CheckResourceGroupName
             
             # REQUIRED
             $query.Var.tenantId = $someString
             # REQUIRED
             $query.Var.subscriptionId = $someString
             # REQUIRED
             $query.Var.groupName = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureResourceAvailabilityResp
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CheckStorageAccountAccessibility operation
             of the 'AzureO365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureO365
             # API Operation: CheckStorageAccountAccessibility
             
             $query = New-RscQueryAzureO365 -CheckStorageAccountAccessibility
             
             # REQUIRED
             $query.Var.tenantId = $someString
             # REQUIRED
             $query.Var.subscriptionId = $someString
             # REQUIRED
             $query.Var.storage_account_name = $someString
             # REQUIRED
             $query.Var.groupName = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureResourceAvailabilityResp
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CheckStorageAccountName operation
             of the 'AzureO365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureO365
             # API Operation: CheckStorageAccountName
             
             $query = New-RscQueryAzureO365 -CheckStorageAccountName
             
             # REQUIRED
             $query.Var.tenantId = $someString
             # REQUIRED
             $query.Var.subscriptionId = $someString
             # REQUIRED
             $query.Var.storage_account_name = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureResourceAvailabilityResp
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CheckSubscriptionQuota operation
             of the 'AzureO365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureO365
             # API Operation: CheckSubscriptionQuota
             
             $query = New-RscQueryAzureO365 -CheckSubscriptionQuota
             
             # REQUIRED
             $query.Var.tenantId = $someString
             # REQUIRED
             $query.Var.subscriptionId = $someString
             # REQUIRED
             $query.Var.regionName = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureResourceAvailabilityResp
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CheckVirtualNetworkName operation
             of the 'AzureO365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureO365
             # API Operation: CheckVirtualNetworkName
             
             $query = New-RscQueryAzureO365 -CheckVirtualNetworkName
             
             # REQUIRED
             $query.Var.tenantId = $someString
             # REQUIRED
             $query.Var.subscriptionId = $someString
             # REQUIRED
             $query.Var.groupName = $someString
             # REQUIRED
             $query.Var.vnet_name = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureResourceAvailabilityResp
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Exocompute operation
             of the 'AzureO365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureO365
             # API Operation: Exocompute
             
             $query = New-RscQueryAzureO365 -Exocompute
             
             # REQUIRED
             $query.Var.orgId = $someString
             # REQUIRED
             $query.Var.exocomputeClusterId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GetAzureO365ExocomputeResp
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GetAzureHostType operation
             of the 'AzureO365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureO365
             # API Operation: GetAzureHostType
             
             $query = New-RscQueryAzureO365 -GetAzureHostType
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GetAzureHostTypeResp
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GetNetworkSubnetUnusedAddr operation
             of the 'AzureO365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureO365
             # API Operation: GetNetworkSubnetUnusedAddr
             
             $query = New-RscQueryAzureO365 -GetNetworkSubnetUnusedAddr
             
             # REQUIRED
             $query.Var.tenantId = $someString
             # REQUIRED
             $query.Var.subscriptionId = $someString
             # REQUIRED
             $query.Var.resourceGroupName = $someString
             # REQUIRED
             $query.Var.vnet_name = $someString
             # REQUIRED
             $query.Var.subnet_name = $someString
             # REQUIRED
             $query.Var.strict_addr_check = $someBoolean
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureNetworkSubnetUnusedAddrResp
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ValidateUserRoles operation
             of the 'AzureO365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureO365
             # API Operation: ValidateUserRoles
             
             $query = New-RscQueryAzureO365 -ValidateUserRoles
             
             # REQUIRED
             $query.Var.tenantId = $someString
             # REQUIRED
             $query.Var.subscriptionId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureUserRoleResp
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryCassandra">
             <summary>
             Create a new RscQuery object for any of the 8
             operations in the 'Cassandra' API domain:
             ColumnFamilies, ColumnFamily, ColumnFamilyRecoverableRange, ColumnFamilySchema, Keyspace, Keyspaces, Source, or Sources.
             </summary>
             <description>
             New-RscQueryCassandra creates a new
             query object for operations
             in the 'Cassandra' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 8 operations
             in the 'Cassandra' API domain. Select the operation this
             query is for by specifying the appropriate switch parameter;
             one of: -ColumnFamilies, -ColumnFamily, -ColumnFamilyRecoverableRange, -ColumnFamilySchema, -Keyspace, -Keyspaces, -Source, -Sources.
             Alternatively, you can specify the operation by setting the
             -Op parameter, for example: -Op ColumnFamilies,
             which is equivalent to specifying -ColumnFamilies.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryCassandra -ColumnFamilies).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryCassandra -ColumnFamilies).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the ColumnFamilies operation
             of the 'Cassandra' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cassandra
             # API Operation: ColumnFamilies
             
             $query = New-RscQueryCassandra -ColumnFamilies
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CassandraColumnFamilyConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ColumnFamily operation
             of the 'Cassandra' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cassandra
             # API Operation: ColumnFamily
             
             $query = New-RscQueryCassandra -ColumnFamily
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CassandraColumnFamily
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ColumnFamilyRecoverableRange operation
             of the 'Cassandra' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cassandra
             # API Operation: ColumnFamilyRecoverableRange
             
             $query = New-RscQueryCassandra -ColumnFamilyRecoverableRange
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	recoveryRangeRequestData = @{
             		# OPTIONAL
             		sourceType = $someMosaicRecoverableRangeRequestSourceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MosaicRecoverableRangeRequestSourceType]) for enum values.
             		# REQUIRED
             		databaseName = $someString
             		# REQUIRED
             		sourceName = $someString
             		# REQUIRED
             		tableName = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GetMosaicRecoverableRangeResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ColumnFamilySchema operation
             of the 'Cassandra' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cassandra
             # API Operation: ColumnFamilySchema
             
             $query = New-RscQueryCassandra -ColumnFamilySchema
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	schemaRequestData = @{
             		# REQUIRED
             		databaseName = $someString
             		# REQUIRED
             		sourceName = $someString
             		# REQUIRED
             		tableName = $someString
             		# REQUIRED
             		versionTimestamp = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GetSchemaResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Keyspace operation
             of the 'Cassandra' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cassandra
             # API Operation: Keyspace
             
             $query = New-RscQueryCassandra -Keyspace
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CassandraKeyspace
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Keyspaces operation
             of the 'Cassandra' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cassandra
             # API Operation: Keyspaces
             
             $query = New-RscQueryCassandra -Keyspaces
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CassandraKeyspaceConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Source operation
             of the 'Cassandra' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cassandra
             # API Operation: Source
             
             $query = New-RscQueryCassandra -Source
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CassandraSource
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Sources operation
             of the 'Cassandra' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cassandra
             # API Operation: Sources
             
             $query = New-RscQueryCassandra -Sources
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CassandraSourceConnection
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryCluster">
             <summary>
             Create a new RscQuery object for any of the 36
             operations in the 'Cluster' API domain:
             Certificates, Cluster, Connected, Csr, DatabaseLogReport, DatabaseLogReportingProperties, DefaultGateway, Dns, FloatingIps, GlobalSlas, GroupByList, HostFailover, Ipmi, Ipv6Mode, IsTotpAckNecessary, K8s, List, NetworkInterfaces, Nodes, NtpServers, OperationJobProgress, Proxy, RegistrationProductInfo, ReplicationTargets, ReportMigrationCount, ReportMigrationJobStatus, ReportMigrationStatus, SlaDomains, TotpAckStatus, TypeList, VerifySlaWithReplicationTo, Vlans, WebCertsAndIpmis, WebSignedCertificate, Windows, or WithUpgradesInfo.
             </summary>
             <description>
             New-RscQueryCluster creates a new
             query object for operations
             in the 'Cluster' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 36 operations
             in the 'Cluster' API domain. Select the operation this
             query is for by specifying the appropriate switch parameter;
             one of: -Certificates, -Cluster, -Connected, -Csr, -DatabaseLogReport, -DatabaseLogReportingProperties, -DefaultGateway, -Dns, -FloatingIps, -GlobalSlas, -GroupByList, -HostFailover, -Ipmi, -Ipv6Mode, -IsTotpAckNecessary, -K8s, -List, -NetworkInterfaces, -Nodes, -NtpServers, -OperationJobProgress, -Proxy, -RegistrationProductInfo, -ReplicationTargets, -ReportMigrationCount, -ReportMigrationJobStatus, -ReportMigrationStatus, -SlaDomains, -TotpAckStatus, -TypeList, -VerifySlaWithReplicationTo, -Vlans, -WebCertsAndIpmis, -WebSignedCertificate, -Windows, -WithUpgradesInfo.
             Alternatively, you can specify the operation by setting the
             -Op parameter, for example: -Op Certificates,
             which is equivalent to specifying -Certificates.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryCluster -Certificates).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryCluster -Certificates).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the Certificates operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: Certificates
             
             $query = New-RscQueryCluster -Certificates
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	description = $someString
             	# OPTIONAL
             	expiration = $someString
             	# OPTIONAL
             	hasKey = $someBoolean
             	# OPTIONAL
             	includeExpired = $someBoolean
             	# OPTIONAL
             	isTrusted = $someBoolean
             	# OPTIONAL
             	name = $someString
             	# OPTIONAL
             	sortBy = $someV1QueryCertificatesRequestSortBy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.V1QueryCertificatesRequestSortBy]) for enum values.
             	# OPTIONAL
             	sortOrder = $someV1QueryCertificatesRequestSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.V1QueryCertificatesRequestSortOrder]) for enum values.
             	# REQUIRED
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CertificateSummaryListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Cluster operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: Cluster
             
             $query = New-RscQueryCluster -Cluster
             
             # REQUIRED
             $query.Var.clusterUuid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Cluster
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Connected operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: Connected
             
             $query = New-RscQueryCluster -Connected
             
             # OPTIONAL
             $query.Var.clusterFilterArg = $someClusterTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterTypeEnum]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;DataLocationSupportedCluster&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Csr operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: Csr
             
             $query = New-RscQueryCluster -Csr
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ClusterCsr
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DatabaseLogReport operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: DatabaseLogReport
             
             $query = New-RscQueryCluster -DatabaseLogReport
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	name = $someString
             	# OPTIONAL
             	logBackupDelay = $someInt
             	# OPTIONAL
             	limit = $someInt
             	# OPTIONAL
             	offset = $someInt
             	# OPTIONAL
             	effectiveSlaDomainId = $someString
             	# OPTIONAL
             	databaseType = $someString
             	# OPTIONAL
             	location = $someString
             	# OPTIONAL
             	sortBy = $someV1QueryLogReportRequestSortBy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.V1QueryLogReportRequestSortBy]) for enum values.
             	# OPTIONAL
             	sortOrder = $someV1QueryLogReportRequestSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.V1QueryLogReportRequestSortOrder]) for enum values.
             	# REQUIRED
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: DbLogReportSummaryListReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DatabaseLogReportingProperties operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: DatabaseLogReportingProperties
             
             $query = New-RscQueryCluster -DatabaseLogReportingProperties
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: DbLogReportProperties
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DefaultGateway operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: DefaultGateway
             
             $query = New-RscQueryCluster -DefaultGateway
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: InternalGetDefaultGatewayResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Dns operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: Dns
             
             $query = New-RscQueryCluster -Dns
             
             # REQUIRED
             $query.Var.clusterUuid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ClusterDnsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the FloatingIps operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: FloatingIps
             
             $query = New-RscQueryCluster -FloatingIps
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: InternalGetClusterIpsResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GlobalSlas operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: GlobalSlas
             
             $query = New-RscQueryCluster -GlobalSlas
             
             # REQUIRED
             $query.Var.cdmClusterUUID = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;SlaInfo&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GroupByList operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: GroupByList
             
             $query = New-RscQueryCluster -GroupByList
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # REQUIRED
             $query.Var.groupBy = $someClusterGroupByEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterGroupByEnum]) for enum values.
             # OPTIONAL
             $query.Var.filter = @{
             	# OPTIONAL
             	id = @(
             		$someString
             	)
             	# OPTIONAL
             	name = @(
             		$someString
             	)
             	# OPTIONAL
             	type = @(
             		$someClusterTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterTypeEnum]) for enum values.
             	)
             	# OPTIONAL
             	objectType = @(
             		$someObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ObjectTypeEnum]) for enum values.
             	)
             	# OPTIONAL
             	registrationTime_gt = $someDateTime
             	# OPTIONAL
             	registrationTime_lt = $someDateTime
             	# OPTIONAL
             	minSoftwareVersion = $someString
             	# OPTIONAL
             	clusterLocation = @(
             		$someString
             	)
             	# OPTIONAL
             	excludeEmptyCluster = $someBoolean
             	# OPTIONAL
             	productType = @(
             		$someClusterProductEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterProductEnum]) for enum values.
             	)
             	# OPTIONAL
             	registeredMode = @(
             		$someClusterRegistrationMode # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterRegistrationMode]) for enum values.
             	)
             	# OPTIONAL
             	product = $someProduct # Call [Enum]::GetValues([RubrikSecurityCloud.Types.Product]) for enum values.
             	# OPTIONAL
             	orgId = @(
             		$someString
             	)
             	# OPTIONAL
             	productFilters = @(
             		@{
             			# REQUIRED
             			productType = $someClusterProductEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterProductEnum]) for enum values.
             			# OPTIONAL
             			minSoftwareVersion = $someString
             		}
             	)
             	# OPTIONAL
             	excludeId = @(
             		$someString
             	)
             	# OPTIONAL
             	systemStatus = @(
             		$someClusterSystemStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterSystemStatus]) for enum values.
             	)
             	# OPTIONAL
             	connectionState = @(
             		$someClusterStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterStatus]) for enum values.
             	)
             	# OPTIONAL
             	isInFatalOrDisconnectedState = $someBoolean
             }
             # OPTIONAL
             $query.Var.timezoneOffset = $someSingle
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ClusterGroupByConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the HostFailover operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: HostFailover
             
             $query = New-RscQueryCluster -HostFailover
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: HostFailoverCluster
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Ipmi operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: Ipmi
             
             $query = New-RscQueryCluster -Ipmi
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ModifyIpmiReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Ipv6Mode operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: Ipv6Mode
             
             $query = New-RscQueryCluster -Ipv6Mode
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ClusterIpv6ModeReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the IsTotpAckNecessary operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: IsTotpAckNecessary
             
             $query = New-RscQueryCluster -IsTotpAckNecessary
             
             # REQUIRED
             $query.Var.clusterUuid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the K8s operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: K8s
             
             $query = New-RscQueryCluster -K8s
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: K8sClusterConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the List operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: List
             
             $query = New-RscQueryCluster -List
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.filter = @{
             	# OPTIONAL
             	id = @(
             		$someString
             	)
             	# OPTIONAL
             	name = @(
             		$someString
             	)
             	# OPTIONAL
             	type = @(
             		$someClusterTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterTypeEnum]) for enum values.
             	)
             	# OPTIONAL
             	objectType = @(
             		$someObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ObjectTypeEnum]) for enum values.
             	)
             	# OPTIONAL
             	registrationTime_gt = $someDateTime
             	# OPTIONAL
             	registrationTime_lt = $someDateTime
             	# OPTIONAL
             	minSoftwareVersion = $someString
             	# OPTIONAL
             	clusterLocation = @(
             		$someString
             	)
             	# OPTIONAL
             	excludeEmptyCluster = $someBoolean
             	# OPTIONAL
             	productType = @(
             		$someClusterProductEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterProductEnum]) for enum values.
             	)
             	# OPTIONAL
             	registeredMode = @(
             		$someClusterRegistrationMode # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterRegistrationMode]) for enum values.
             	)
             	# OPTIONAL
             	product = $someProduct # Call [Enum]::GetValues([RubrikSecurityCloud.Types.Product]) for enum values.
             	# OPTIONAL
             	orgId = @(
             		$someString
             	)
             	# OPTIONAL
             	productFilters = @(
             		@{
             			# REQUIRED
             			productType = $someClusterProductEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterProductEnum]) for enum values.
             			# OPTIONAL
             			minSoftwareVersion = $someString
             		}
             	)
             	# OPTIONAL
             	excludeId = @(
             		$someString
             	)
             	# OPTIONAL
             	systemStatus = @(
             		$someClusterSystemStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterSystemStatus]) for enum values.
             	)
             	# OPTIONAL
             	connectionState = @(
             		$someClusterStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterStatus]) for enum values.
             	)
             	# OPTIONAL
             	isInFatalOrDisconnectedState = $someBoolean
             }
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.sortBy = $someClusterSortByEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterSortByEnum]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ClusterConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NetworkInterfaces operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: NetworkInterfaces
             
             $query = New-RscQueryCluster -NetworkInterfaces
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	interface = $someString
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NetworkInterfaceListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Nodes operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: Nodes
             
             $query = New-RscQueryCluster -Nodes
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NodeStatusListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NtpServers operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: NtpServers
             
             $query = New-RscQueryCluster -NtpServers
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NtpServerConfigurationListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the OperationJobProgress operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: OperationJobProgress
             
             $query = New-RscQueryCluster -OperationJobProgress
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	clusterUuid = $someString
             	# REQUIRED
             	jobType = $someCcpJobType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CcpJobType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ClusterOperationJobProgress
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Proxy operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: Proxy
             
             $query = New-RscQueryCluster -Proxy
             
             # REQUIRED
             $query.Var.clusterUuid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ClusterProxyReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RegistrationProductInfo operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: RegistrationProductInfo
             
             $query = New-RscQueryCluster -RegistrationProductInfo
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ClusterRegistrationProductInfoType
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ReplicationTargets operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: ReplicationTargets
             
             $query = New-RscQueryCluster -ReplicationTargets
             
             # REQUIRED
             $query.Var.clusterUuid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;ClusterReplicationTarget&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ReportMigrationCount operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: ReportMigrationCount
             
             $query = New-RscQueryCluster -ReportMigrationCount
             
             # OPTIONAL
             $query.Var.clusterUuid = $someString
             # REQUIRED
             $query.Var.status = @(
             	$someCdmReportMigrationStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CdmReportMigrationStatus]) for enum values.
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ReportsMigrationCount
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ReportMigrationJobStatus operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: ReportMigrationJobStatus
             
             $query = New-RscQueryCluster -ReportMigrationJobStatus
             
             # OPTIONAL
             $query.Var.clusterUuid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ClusterReportMigrationJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ReportMigrationStatus operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: ReportMigrationStatus
             
             $query = New-RscQueryCluster -ReportMigrationStatus
             
             # OPTIONAL
             $query.Var.clusterUuid = $someString
             # REQUIRED
             $query.Var.status = @(
             	$someCdmReportMigrationStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CdmReportMigrationStatus]) for enum values.
             )
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ReportMigrationStatusConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SlaDomains operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: SlaDomains
             
             $query = New-RscQueryCluster -SlaDomains
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ClusterSlaDomainConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TotpAckStatus operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: TotpAckStatus
             
             $query = New-RscQueryCluster -TotpAckStatus
             
             # REQUIRED
             $query.Var.listClusterUuid = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;System.Boolean&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TypeList operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: TypeList
             
             $query = New-RscQueryCluster -TypeList
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;GroupCount&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the VerifySlaWithReplicationTo operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: VerifySlaWithReplicationTo
             
             $query = New-RscQueryCluster -VerifySlaWithReplicationTo
             
             # REQUIRED
             $query.Var.cdmClusterUUID = $someString
             # REQUIRED
             $query.Var.includeArchived = $someBoolean
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VerifySlaWithReplicationToClusterResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Vlans operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: Vlans
             
             $query = New-RscQueryCluster -Vlans
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	vlan = $someInt
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VlanConfigListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the WebCertsAndIpmis operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: WebCertsAndIpmis
             
             $query = New-RscQueryCluster -WebCertsAndIpmis
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuids = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;ClusterWebCertAndIpmi&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the WebSignedCertificate operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: WebSignedCertificate
             
             $query = New-RscQueryCluster -WebSignedCertificate
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ClusterWebSignedCertificateReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Windows operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: Windows
             
             $query = New-RscQueryCluster -Windows
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: WindowsCluster
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the WithUpgradesInfo operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: WithUpgradesInfo
             
             $query = New-RscQueryCluster -WithUpgradesInfo
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.upgradeFilter = @{
             	# OPTIONAL
             	id = @(
             		$someString
             	)
             	# OPTIONAL
             	name = @(
             		$someString
             	)
             	# OPTIONAL
             	type = @(
             		$someClusterTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterTypeEnum]) for enum values.
             	)
             	# OPTIONAL
             	registrationTime_gt = $someDateTime
             	# OPTIONAL
             	registrationTime_lt = $someDateTime
             	# OPTIONAL
             	minSoftwareVersion = $someString
             	# OPTIONAL
             	downloadedVersion = @(
             		$someString
             	)
             	# OPTIONAL
             	installedVersion = @(
             		$someString
             	)
             	# OPTIONAL
             	upgradeJobStatus = @(
             		$someClusterJobStatusTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterJobStatusTypeEnum]) for enum values.
             	)
             	# OPTIONAL
             	clusterLocation = @(
             		$someString
             	)
             	# OPTIONAL
             	versionStatus = @(
             		$someVersionStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.VersionStatus]) for enum values.
             	)
             	# OPTIONAL
             	prechecksStatus = @(
             		$somePrechecksStatusTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.PrechecksStatusTypeEnum]) for enum values.
             	)
             	# OPTIONAL
             	connectionState = @(
             		$someClusterStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterStatus]) for enum values.
             	)
             	# OPTIONAL
             	upgradeScheduled = $someBoolean
             	# OPTIONAL
             	productType = @(
             		$someClusterProductEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterProductEnum]) for enum values.
             	)
             }
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.sortBy = $someUpgradeInfoSortByEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UpgradeInfoSortByEnum]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ClusterConnection
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryDb2">
             <summary>
             Create a new RscQuery object for any of the 8
             operations in the 'Db2' API domain:
             Database, Databases, Instance, Instances, LogSnapshot, LogSnapshots, RecoverableRange, or RecoverableRanges.
             </summary>
             <description>
             New-RscQueryDb2 creates a new
             query object for operations
             in the 'Db2' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 8 operations
             in the 'Db2' API domain. Select the operation this
             query is for by specifying the appropriate switch parameter;
             one of: -Database, -Databases, -Instance, -Instances, -LogSnapshot, -LogSnapshots, -RecoverableRange, -RecoverableRanges.
             Alternatively, you can specify the operation by setting the
             -Op parameter, for example: -Op Database,
             which is equivalent to specifying -Database.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryDb2 -Database).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryDb2 -Database).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the Database operation
             of the 'Db2' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Db2
             # API Operation: Database
             
             $query = New-RscQueryDb2 -Database
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Db2Database
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Databases operation
             of the 'Db2' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Db2
             # API Operation: Databases
             
             $query = New-RscQueryDb2 -Databases
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Db2DatabaseConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Instance operation
             of the 'Db2' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Db2
             # API Operation: Instance
             
             $query = New-RscQueryDb2 -Instance
             
             # REQUIRED
             $query.Var.id = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Db2Instance
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Instances operation
             of the 'Db2' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Db2
             # API Operation: Instances
             
             $query = New-RscQueryDb2 -Instances
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Db2InstanceConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the LogSnapshot operation
             of the 'Db2' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Db2
             # API Operation: LogSnapshot
             
             $query = New-RscQueryDb2 -LogSnapshot
             
             # REQUIRED
             $query.Var.db2LogSnapshotFid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Db2LogSnapshot
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the LogSnapshots operation
             of the 'Db2' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Db2
             # API Operation: LogSnapshots
             
             $query = New-RscQueryDb2 -LogSnapshots
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.sortBy = $someDb2LogSnapshotSortBy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.Db2LogSnapshotSortBy]) for enum values.
             # OPTIONAL
             $query.Var.filter = @{
             	# OPTIONAL
             	workloadId = @(
             		$someString
             	)
             	# OPTIONAL
             	clusterUuid = @(
             		$someString
             	)
             	# OPTIONAL
             	fromTime = $someDateTime
             	# OPTIONAL
             	toTime = $someDateTime
             	# OPTIONAL
             	isArchived = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Db2LogSnapshotConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RecoverableRange operation
             of the 'Db2' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Db2
             # API Operation: RecoverableRange
             
             $query = New-RscQueryDb2 -RecoverableRange
             
             # REQUIRED
             $query.Var.db2RecoverableRangeFid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Db2RecoverableRange
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RecoverableRanges operation
             of the 'Db2' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Db2
             # API Operation: RecoverableRanges
             
             $query = New-RscQueryDb2 -RecoverableRanges
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.sortBy = $someDb2RecoverableRangeSortBy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.Db2RecoverableRangeSortBy]) for enum values.
             # OPTIONAL
             $query.Var.filter = @{
             	# OPTIONAL
             	clusterUuid = @(
             		$someString
             	)
             	# OPTIONAL
             	databaseId = @(
             		$someString
             	)
             	# OPTIONAL
             	fromTime = $someDateTime
             	# OPTIONAL
             	toTime = $someDateTime
             	# OPTIONAL
             	isArchived = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Db2RecoverableRangeConnection
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryHyperv">
             <summary>
             Create a new RscQuery object for any of the 14
             operations in the 'Hyperv' API domain:
             Cluster, HostAsyncRequestStatus, Mounts, Scvmm, ScvmmAsyncRequestStatus, Scvmms, Server, Servers, TopLevelDescendants, UniqueServersCount, VirtualMachine, VirtualMachineAsyncRequestStatus, VirtualMachines, or VmDetail.
             </summary>
             <description>
             New-RscQueryHyperv creates a new
             query object for operations
             in the 'Hyperv' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 14 operations
             in the 'Hyperv' API domain. Select the operation this
             query is for by specifying the appropriate switch parameter;
             one of: -Cluster, -HostAsyncRequestStatus, -Mounts, -Scvmm, -ScvmmAsyncRequestStatus, -Scvmms, -Server, -Servers, -TopLevelDescendants, -UniqueServersCount, -VirtualMachine, -VirtualMachineAsyncRequestStatus, -VirtualMachines, -VmDetail.
             Alternatively, you can specify the operation by setting the
             -Op parameter, for example: -Op Cluster,
             which is equivalent to specifying -Cluster.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryHyperv -Cluster).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryHyperv -Cluster).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the Cluster operation
             of the 'Hyperv' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: Cluster
             
             $query = New-RscQueryHyperv -Cluster
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: HyperVcluster
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the HostAsyncRequestStatus operation
             of the 'Hyperv' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: HostAsyncRequestStatus
             
             $query = New-RscQueryHyperv -HostAsyncRequestStatus
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Mounts operation
             of the 'Hyperv' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: Mounts
             
             $query = New-RscQueryHyperv -Mounts
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.filters = @(
             	@{
             		# OPTIONAL
             		field = $someHypervLiveMountFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HypervLiveMountFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             }
             )
             # OPTIONAL
             $query.Var.sortBy = @{
             	# OPTIONAL
             	field = $someHypervLiveMountSortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HypervLiveMountSortByField]) for enum values.
             	# OPTIONAL
             	sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: HyperVliveMountConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Scvmm operation
             of the 'Hyperv' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: Scvmm
             
             $query = New-RscQueryHyperv -Scvmm
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: HyperVscvmm
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ScvmmAsyncRequestStatus operation
             of the 'Hyperv' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: ScvmmAsyncRequestStatus
             
             $query = New-RscQueryHyperv -ScvmmAsyncRequestStatus
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Scvmms operation
             of the 'Hyperv' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: Scvmms
             
             $query = New-RscQueryHyperv -Scvmms
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: HyperVscvmmConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Server operation
             of the 'Hyperv' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: Server
             
             $query = New-RscQueryHyperv -Server
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: HypervServer
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Servers operation
             of the 'Hyperv' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: Servers
             
             $query = New-RscQueryHyperv -Servers
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	effectiveSlaDomainId = $someString
             	# OPTIONAL
             	limit = $someInt
             	# OPTIONAL
             	name = $someString
             	# OPTIONAL
             	offset = $someInt
             	# OPTIONAL
             	primaryClusterId = $someString
             	# OPTIONAL
             	slaAssignment = $someInternalQueryHypervHostRequestSlaAssignment # Call [Enum]::GetValues([RubrikSecurityCloud.Types.InternalQueryHypervHostRequestSlaAssignment]) for enum values.
             	# OPTIONAL
             	sortBy = $someInternalQueryHypervHostRequestSortBy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.InternalQueryHypervHostRequestSortBy]) for enum values.
             	# OPTIONAL
             	sortOrder = $someInternalQueryHypervHostRequestSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.InternalQueryHypervHostRequestSortOrder]) for enum values.
             	# REQUIRED
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: HypervHostSummaryListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TopLevelDescendants operation
             of the 'Hyperv' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: TopLevelDescendants
             
             $query = New-RscQueryHyperv -TopLevelDescendants
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.typeFilter = @(
             	$someHierarchyObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyObjectTypeEnum]) for enum values.
             )
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: HypervTopLevelDescendantTypeConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UniqueServersCount operation
             of the 'Hyperv' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: UniqueServersCount
             
             $query = New-RscQueryHyperv -UniqueServersCount
             
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Int32
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the VirtualMachine operation
             of the 'Hyperv' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: VirtualMachine
             
             $query = New-RscQueryHyperv -VirtualMachine
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: HyperVvirtualMachine
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the VirtualMachineAsyncRequestStatus operation
             of the 'Hyperv' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: VirtualMachineAsyncRequestStatus
             
             $query = New-RscQueryHyperv -VirtualMachineAsyncRequestStatus
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the VirtualMachines operation
             of the 'Hyperv' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: VirtualMachines
             
             $query = New-RscQueryHyperv -VirtualMachines
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: HyperVvirtualMachineConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the VmDetail operation
             of the 'Hyperv' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: VmDetail
             
             $query = New-RscQueryHyperv -VmDetail
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: HypervVirtualMachineDetail
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryLdap">
             <summary>
             Create a new RscQuery object for any of the 3
             operations in the 'LDAP' API domain:
             AuthorizedPrincipalList, IntegrationList, or PrincipalList.
             </summary>
             <description>
             New-RscQueryLdap creates a new
             query object for operations
             in the 'LDAP' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 3 operations
             in the 'LDAP' API domain. Select the operation this
             query is for by specifying the appropriate switch parameter;
             one of: -AuthorizedPrincipalList, -IntegrationList, -PrincipalList.
             Alternatively, you can specify the operation by setting the
             -Op parameter, for example: -Op AuthorizedPrincipalList,
             which is equivalent to specifying -AuthorizedPrincipalList.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryLdap -AuthorizedPrincipalList).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryLdap -AuthorizedPrincipalList).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AuthorizedPrincipalList operation
             of the 'LDAP' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    LDAP
             # API Operation: AuthorizedPrincipalList
             
             $query = New-RscQueryLdap -AuthorizedPrincipalList
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.sortBy = $someLdapAuthorizedPrincipalFieldEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.LdapAuthorizedPrincipalFieldEnum]) for enum values.
             # REQUIRED
             $query.Var.searchText = $someString
             # OPTIONAL
             $query.Var.roleIds = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AuthorizedPrincipalConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the IntegrationList operation
             of the 'LDAP' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    LDAP
             # API Operation: IntegrationList
             
             $query = New-RscQueryLdap -IntegrationList
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.sortBy = $someLdapIntegrationFieldEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.LdapIntegrationFieldEnum]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: LdapIntegrationConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PrincipalList operation
             of the 'LDAP' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    LDAP
             # API Operation: PrincipalList
             
             $query = New-RscQueryLdap -PrincipalList
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.sortBy = $someLdapPrincipalFieldEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.LdapPrincipalFieldEnum]) for enum values.
             # REQUIRED
             $query.Var.id = $someString
             # REQUIRED
             $query.Var.searchText = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: PrincipalConnection
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryManagedVolume">
             <summary>
             Create a new RscQuery object for any of the 4
             operations in the 'Managed Volume' API domain:
             InventoryStats, LiveMounts, ManagedVolume, or ManagedVolumes.
             </summary>
             <description>
             New-RscQueryManagedVolume creates a new
             query object for operations
             in the 'Managed Volume' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 4 operations
             in the 'Managed Volume' API domain. Select the operation this
             query is for by specifying the appropriate switch parameter;
             one of: -InventoryStats, -LiveMounts, -ManagedVolume, -ManagedVolumes.
             Alternatively, you can specify the operation by setting the
             -Op parameter, for example: -Op InventoryStats,
             which is equivalent to specifying -InventoryStats.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryManagedVolume -InventoryStats).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryManagedVolume -InventoryStats).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the InventoryStats operation
             of the 'Managed Volume' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Managed Volume
             # API Operation: InventoryStats
             
             $query = New-RscQueryManagedVolume -InventoryStats
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ManagedVolumeInventoryStats
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the LiveMounts operation
             of the 'Managed Volume' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Managed Volume
             # API Operation: LiveMounts
             
             $query = New-RscQueryManagedVolume -LiveMounts
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ManagedVolumeMountConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ManagedVolume operation
             of the 'Managed Volume' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Managed Volume
             # API Operation: ManagedVolume
             
             $query = New-RscQueryManagedVolume -ManagedVolume
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ManagedVolume
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ManagedVolumes operation
             of the 'Managed Volume' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Managed Volume
             # API Operation: ManagedVolumes
             
             $query = New-RscQueryManagedVolume -ManagedVolumes
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ManagedVolumeConnection
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryMongo">
             <summary>
             Create a new RscQuery object for any of the 16
             operations in the 'Mongo' API domain:
             BulkRecoverableRanges, Collection, Collections, Database, Databases, DbBulkRecoverableRange, DbCollection, DbCollectionRecoverableRange, DbCollections, DbDatabase, DbDatabases, DbSource, DbSources, RecoverableRanges, Source, or Sources.
             </summary>
             <description>
             New-RscQueryMongo creates a new
             query object for operations
             in the 'Mongo' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 16 operations
             in the 'Mongo' API domain. Select the operation this
             query is for by specifying the appropriate switch parameter;
             one of: -BulkRecoverableRanges, -Collection, -Collections, -Database, -Databases, -DbBulkRecoverableRange, -DbCollection, -DbCollectionRecoverableRange, -DbCollections, -DbDatabase, -DbDatabases, -DbSource, -DbSources, -RecoverableRanges, -Source, -Sources.
             Alternatively, you can specify the operation by setting the
             -Op parameter, for example: -Op BulkRecoverableRanges,
             which is equivalent to specifying -BulkRecoverableRanges.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryMongo -BulkRecoverableRanges).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryMongo -BulkRecoverableRanges).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the BulkRecoverableRanges operation
             of the 'Mongo' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mongo
             # API Operation: BulkRecoverableRanges
             
             $query = New-RscQueryMongo -BulkRecoverableRanges
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	source = $someString
             	# OPTIONAL
             	databases = @(
             		$someString
             	)
             	# OPTIONAL
             	collections = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MongoRecoverableRanges
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Collection operation
             of the 'Mongo' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mongo
             # API Operation: Collection
             
             $query = New-RscQueryMongo -Collection
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MongoCollection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Collections operation
             of the 'Mongo' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mongo
             # API Operation: Collections
             
             $query = New-RscQueryMongo -Collections
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MongoCollectionConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Database operation
             of the 'Mongo' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mongo
             # API Operation: Database
             
             $query = New-RscQueryMongo -Database
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MongoDatabase
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Databases operation
             of the 'Mongo' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mongo
             # API Operation: Databases
             
             $query = New-RscQueryMongo -Databases
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MongoDatabaseConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DbBulkRecoverableRange operation
             of the 'Mongo' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mongo
             # API Operation: DbBulkRecoverableRange
             
             $query = New-RscQueryMongo -DbBulkRecoverableRange
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	recoveryRangeData = @{
             		# OPTIONAL
             		sourceType = $someMosaicBulkRecoverableRangeRequestSourceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MosaicBulkRecoverableRangeRequestSourceType]) for enum values.
             		# REQUIRED
             		managementObjects = @{
             			# OPTIONAL
             			databases = @(
             				@{
             					# OPTIONAL
             					dbName = $someString
             					# OPTIONAL
             					tables = @(
             						$someString
             					)
             				}
             			)
             		}
             		# REQUIRED
             		sourceName = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MosaicRecoveryRangeResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DbCollection operation
             of the 'Mongo' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mongo
             # API Operation: DbCollection
             
             $query = New-RscQueryMongo -DbCollection
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MongodbCollection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DbCollectionRecoverableRange operation
             of the 'Mongo' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mongo
             # API Operation: DbCollectionRecoverableRange
             
             $query = New-RscQueryMongo -DbCollectionRecoverableRange
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	recoveryRangeRequestData = @{
             		# OPTIONAL
             		sourceType = $someMosaicRecoverableRangeRequestSourceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MosaicRecoverableRangeRequestSourceType]) for enum values.
             		# REQUIRED
             		databaseName = $someString
             		# REQUIRED
             		sourceName = $someString
             		# REQUIRED
             		tableName = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GetMosaicRecoverableRangeResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DbCollections operation
             of the 'Mongo' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mongo
             # API Operation: DbCollections
             
             $query = New-RscQueryMongo -DbCollections
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MongodbCollectionConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DbDatabase operation
             of the 'Mongo' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mongo
             # API Operation: DbDatabase
             
             $query = New-RscQueryMongo -DbDatabase
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MongodbDatabase
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DbDatabases operation
             of the 'Mongo' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mongo
             # API Operation: DbDatabases
             
             $query = New-RscQueryMongo -DbDatabases
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MongodbDatabaseConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DbSource operation
             of the 'Mongo' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mongo
             # API Operation: DbSource
             
             $query = New-RscQueryMongo -DbSource
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MongodbSource
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DbSources operation
             of the 'Mongo' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mongo
             # API Operation: DbSources
             
             $query = New-RscQueryMongo -DbSources
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MongodbSourceConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RecoverableRanges operation
             of the 'Mongo' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mongo
             # API Operation: RecoverableRanges
             
             $query = New-RscQueryMongo -RecoverableRanges
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	source = $someString
             	# OPTIONAL
             	databases = @(
             		$someString
             	)
             	# OPTIONAL
             	collections = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MongoRecoverableRanges
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Source operation
             of the 'Mongo' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mongo
             # API Operation: Source
             
             $query = New-RscQueryMongo -Source
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MongoSource
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Sources operation
             of the 'Mongo' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mongo
             # API Operation: Sources
             
             $query = New-RscQueryMongo -Sources
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MongoSourceConnection
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryMssql">
             <summary>
             Create a new RscQuery object for any of the 16
             operations in the 'MSSQL' API domain:
             AllDatabaseRestoreFiles, AvailabilityGroup, CdmLogShippingTarget, CdmLogShippingTargets, CompatibleInstances, Database, DatabaseLiveMounts, DatabaseMissedRecoverableRanges, DatabaseMissedSnapshots, DatabaseRestoreEstimate, Databases, DefaultProperties, Instance, LogShippingTargets, RecoverableRanges, or TopLevelDescendants.
             </summary>
             <description>
             New-RscQueryMssql creates a new
             query object for operations
             in the 'MSSQL' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 16 operations
             in the 'MSSQL' API domain. Select the operation this
             query is for by specifying the appropriate switch parameter;
             one of: -AllDatabaseRestoreFiles, -AvailabilityGroup, -CdmLogShippingTarget, -CdmLogShippingTargets, -CompatibleInstances, -Database, -DatabaseLiveMounts, -DatabaseMissedRecoverableRanges, -DatabaseMissedSnapshots, -DatabaseRestoreEstimate, -Databases, -DefaultProperties, -Instance, -LogShippingTargets, -RecoverableRanges, -TopLevelDescendants.
             Alternatively, you can specify the operation by setting the
             -Op parameter, for example: -Op AllDatabaseRestoreFiles,
             which is equivalent to specifying -AllDatabaseRestoreFiles.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryMssql -AllDatabaseRestoreFiles).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryMssql -AllDatabaseRestoreFiles).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AllDatabaseRestoreFiles operation
             of the 'MSSQL' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MSSQL
             # API Operation: AllDatabaseRestoreFiles
             
             $query = New-RscQueryMssql -AllDatabaseRestoreFiles
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	lsn = $someString
             	# OPTIONAL
             	recoveryForkGuid = $someString
             	# OPTIONAL
             	time = $someDateTime
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: V1MssqlGetRestoreFilesV1Response
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AvailabilityGroup operation
             of the 'MSSQL' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MSSQL
             # API Operation: AvailabilityGroup
             
             $query = New-RscQueryMssql -AvailabilityGroup
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MssqlAvailabilityGroup
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CdmLogShippingTarget operation
             of the 'MSSQL' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MSSQL
             # API Operation: CdmLogShippingTarget
             
             $query = New-RscQueryMssql -CdmLogShippingTarget
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MssqlLogShippingTarget
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CdmLogShippingTargets operation
             of the 'MSSQL' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MSSQL
             # API Operation: CdmLogShippingTargets
             
             $query = New-RscQueryMssql -CdmLogShippingTargets
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = @{
             	# OPTIONAL
             	field = $someMssqlLogShippingTargetSortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MssqlLogShippingTargetSortByField]) for enum values.
             	# OPTIONAL
             	sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             }
             # OPTIONAL
             $query.Var.filters = @(
             	@{
             		# OPTIONAL
             		field = $someMssqlLogShippingTargetFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MssqlLogShippingTargetFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MssqlLogShippingTargetConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CompatibleInstances operation
             of the 'MSSQL' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MSSQL
             # API Operation: CompatibleInstances
             
             $query = New-RscQueryMssql -CompatibleInstances
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	recoveryTime = $someDateTime
             	# REQUIRED
             	recoveryType = $someV1GetCompatibleMssqlInstancesV1RequestRecoveryType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.V1GetCompatibleMssqlInstancesV1RequestRecoveryType]) for enum values.
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MssqlInstanceSummaryListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Database operation
             of the 'MSSQL' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MSSQL
             # API Operation: Database
             
             $query = New-RscQueryMssql -Database
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MssqlDatabase
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DatabaseLiveMounts operation
             of the 'MSSQL' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MSSQL
             # API Operation: DatabaseLiveMounts
             
             $query = New-RscQueryMssql -DatabaseLiveMounts
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = @{
             	# OPTIONAL
             	field = $someMssqlDatabaseLiveMountSortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MssqlDatabaseLiveMountSortByField]) for enum values.
             	# OPTIONAL
             	sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             }
             # OPTIONAL
             $query.Var.filters = @(
             	@{
             		# OPTIONAL
             		field = $someMssqlDatabaseLiveMountFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MssqlDatabaseLiveMountFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MssqlDatabaseLiveMountConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DatabaseMissedRecoverableRanges operation
             of the 'MSSQL' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MSSQL
             # API Operation: DatabaseMissedRecoverableRanges
             
             $query = New-RscQueryMssql -DatabaseMissedRecoverableRanges
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	afterTime = $someDateTime
             	# OPTIONAL
             	beforeTime = $someDateTime
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MssqlMissedRecoverableRangeListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DatabaseMissedSnapshots operation
             of the 'MSSQL' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MSSQL
             # API Operation: DatabaseMissedSnapshots
             
             $query = New-RscQueryMssql -DatabaseMissedSnapshots
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	afterTime = $someDateTime
             	# OPTIONAL
             	beforeTime = $someDateTime
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MissedSnapshotListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DatabaseRestoreEstimate operation
             of the 'MSSQL' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MSSQL
             # API Operation: DatabaseRestoreEstimate
             
             $query = New-RscQueryMssql -DatabaseRestoreEstimate
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	lsn = $someString
             	# OPTIONAL
             	recoveryForkGuid = $someString
             	# OPTIONAL
             	time = $someDateTime
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MssqlRestoreEstimateResult
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Databases operation
             of the 'MSSQL' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MSSQL
             # API Operation: Databases
             
             $query = New-RscQueryMssql -Databases
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MssqlDatabaseConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DefaultProperties operation
             of the 'MSSQL' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MSSQL
             # API Operation: DefaultProperties
             
             $query = New-RscQueryMssql -DefaultProperties
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateMssqlDefaultPropertiesReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Instance operation
             of the 'MSSQL' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MSSQL
             # API Operation: Instance
             
             $query = New-RscQueryMssql -Instance
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MssqlInstance
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the LogShippingTargets operation
             of the 'MSSQL' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MSSQL
             # API Operation: LogShippingTargets
             
             $query = New-RscQueryMssql -LogShippingTargets
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	limit = $someInt
             	# OPTIONAL
             	location = $someString
             	# OPTIONAL
             	offset = $someInt
             	# OPTIONAL
             	primaryDatabaseId = $someString
             	# OPTIONAL
             	primaryDatabaseName = $someString
             	# OPTIONAL
             	secondaryDatabaseName = $someString
             	# OPTIONAL
             	sortBy = $someV2QueryLogShippingConfigurationsV2RequestSortBy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.V2QueryLogShippingConfigurationsV2RequestSortBy]) for enum values.
             	# OPTIONAL
             	sortOrder = $someV2QueryLogShippingConfigurationsV2RequestSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.V2QueryLogShippingConfigurationsV2RequestSortOrder]) for enum values.
             	# OPTIONAL
             	status = $someV2QueryLogShippingConfigurationsV2RequestStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.V2QueryLogShippingConfigurationsV2RequestStatus]) for enum values.
             	# REQUIRED
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MssqlLogShippingSummaryV2ListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RecoverableRanges operation
             of the 'MSSQL' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MSSQL
             # API Operation: RecoverableRanges
             
             $query = New-RscQueryMssql -RecoverableRanges
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	afterTime = $someDateTime
             	# OPTIONAL
             	beforeTime = $someDateTime
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MssqlRecoverableRangeListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TopLevelDescendants operation
             of the 'MSSQL' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MSSQL
             # API Operation: TopLevelDescendants
             
             $query = New-RscQueryMssql -TopLevelDescendants
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.typeFilter = @(
             	$someHierarchyObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyObjectTypeEnum]) for enum values.
             )
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MssqlTopLevelDescendantTypeConnection
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryNutanix">
             <summary>
             Create a new RscQuery object for any of the 18
             operations in the 'Nutanix' API domain:
             BrowseSnapshot, Category, CategoryValue, Cluster, ClusterAsyncRequestStatus, ClusterContainers, ClusterNetworks, Clusters, Mounts, PrismCentral, PrismCentrals, SearchVm, SnapshotDetail, TopLevelDescendants, Vm, VmAsyncRequestStatus, VmMissedSnapshots, or Vms.
             </summary>
             <description>
             New-RscQueryNutanix creates a new
             query object for operations
             in the 'Nutanix' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 18 operations
             in the 'Nutanix' API domain. Select the operation this
             query is for by specifying the appropriate switch parameter;
             one of: -BrowseSnapshot, -Category, -CategoryValue, -Cluster, -ClusterAsyncRequestStatus, -ClusterContainers, -ClusterNetworks, -Clusters, -Mounts, -PrismCentral, -PrismCentrals, -SearchVm, -SnapshotDetail, -TopLevelDescendants, -Vm, -VmAsyncRequestStatus, -VmMissedSnapshots, -Vms.
             Alternatively, you can specify the operation by setting the
             -Op parameter, for example: -Op BrowseSnapshot,
             which is equivalent to specifying -BrowseSnapshot.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryNutanix -BrowseSnapshot).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryNutanix -BrowseSnapshot).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the BrowseSnapshot operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: BrowseSnapshot
             
             $query = New-RscQueryNutanix -BrowseSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	limit = $someInt
             	# OPTIONAL
             	offset = $someInt
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	path = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BrowseResponseListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Category operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: Category
             
             $query = New-RscQueryNutanix -Category
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NutanixCategory
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CategoryValue operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: CategoryValue
             
             $query = New-RscQueryNutanix -CategoryValue
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NutanixCategoryValue
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Cluster operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: Cluster
             
             $query = New-RscQueryNutanix -Cluster
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NutanixCluster
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ClusterAsyncRequestStatus operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: ClusterAsyncRequestStatus
             
             $query = New-RscQueryNutanix -ClusterAsyncRequestStatus
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ClusterContainers operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: ClusterContainers
             
             $query = New-RscQueryNutanix -ClusterContainers
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NutanixContainerListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ClusterNetworks operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: ClusterNetworks
             
             $query = New-RscQueryNutanix -ClusterNetworks
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NutanixNetworkListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Clusters operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: Clusters
             
             $query = New-RscQueryNutanix -Clusters
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NutanixClusterConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Mounts operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: Mounts
             
             $query = New-RscQueryNutanix -Mounts
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.filters = @(
             	@{
             		# OPTIONAL
             		field = $someNutanixLiveMountFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.NutanixLiveMountFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             }
             )
             # OPTIONAL
             $query.Var.sortBy = @{
             	# OPTIONAL
             	field = $someNutanixLiveMountSortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.NutanixLiveMountSortByField]) for enum values.
             	# OPTIONAL
             	sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NutanixLiveMountConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PrismCentral operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: PrismCentral
             
             $query = New-RscQueryNutanix -PrismCentral
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NutanixPrismCentral
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PrismCentrals operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: PrismCentrals
             
             $query = New-RscQueryNutanix -PrismCentrals
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NutanixPrismCentralConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SearchVm operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: SearchVm
             
             $query = New-RscQueryNutanix -SearchVm
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	cursor = $someString
             	# OPTIONAL
             	limit = $someInt
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	path = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SearchResponseListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SnapshotDetail operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: SnapshotDetail
             
             $query = New-RscQueryNutanix -SnapshotDetail
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NutanixVmSnapshotDetail
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TopLevelDescendants operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: TopLevelDescendants
             
             $query = New-RscQueryNutanix -TopLevelDescendants
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.typeFilter = @(
             	$someHierarchyObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyObjectTypeEnum]) for enum values.
             )
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CdmHierarchyObjectConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Vm operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: Vm
             
             $query = New-RscQueryNutanix -Vm
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NutanixVm
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the VmAsyncRequestStatus operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: VmAsyncRequestStatus
             
             $query = New-RscQueryNutanix -VmAsyncRequestStatus
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the VmMissedSnapshots operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: VmMissedSnapshots
             
             $query = New-RscQueryNutanix -VmMissedSnapshots
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MissedSnapshotListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Vms operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: Vms
             
             $query = New-RscQueryNutanix -Vms
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NutanixVmConnection
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryO365">
             <summary>
             Create a new RscQuery object for any of the 37
             operations in the 'O365' API domain:
             AllAdGroups, AllOrgStatuses, AllSubscriptionsAppTypeCounts, BrowseTeamConvChannels, Calendar, Groups, License, ListApps, Mailbox, Mailboxes, ObjectAncestors, Onedrive, Onedrives, Org, OrgAtSnappableLevel, OrgSummaries, Orgs, ServiceAccount, ServiceStatus, SharepointDrive, SharepointDrives, SharepointList, SharepointLists, SharepointObjectList, SharepointObjects, SharepointSite, SharepointSites, Site, Sites, StorageStats, Team, TeamChannels, TeamConversationsFolderID, TeamPostedBy, Teams, User, or UserObjects.
             </summary>
             <description>
             New-RscQueryO365 creates a new
             query object for operations
             in the 'O365' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 37 operations
             in the 'O365' API domain. Select the operation this
             query is for by specifying the appropriate switch parameter;
             one of: -AllAdGroups, -AllOrgStatuses, -AllSubscriptionsAppTypeCounts, -BrowseTeamConvChannels, -Calendar, -Groups, -License, -ListApps, -Mailbox, -Mailboxes, -ObjectAncestors, -Onedrive, -Onedrives, -Org, -OrgAtSnappableLevel, -OrgSummaries, -Orgs, -ServiceAccount, -ServiceStatus, -SharepointDrive, -SharepointDrives, -SharepointList, -SharepointLists, -SharepointObjectList, -SharepointObjects, -SharepointSite, -SharepointSites, -Site, -Sites, -StorageStats, -Team, -TeamChannels, -TeamConversationsFolderID, -TeamPostedBy, -Teams, -User, -UserObjects.
             Alternatively, you can specify the operation by setting the
             -Op parameter, for example: -Op AllAdGroups,
             which is equivalent to specifying -AllAdGroups.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryO365 -AllAdGroups).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryO365 -AllAdGroups).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AllAdGroups operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: AllAdGroups
             
             $query = New-RscQueryO365 -AllAdGroups
             
             # REQUIRED
             $query.Var.orgId = $someString
             # REQUIRED
             $query.Var.adGroupSearchFilter = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AdGroup&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllOrgStatuses operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: AllOrgStatuses
             
             $query = New-RscQueryO365 -AllOrgStatuses
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;O365OrgInfo&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllSubscriptionsAppTypeCounts operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: AllSubscriptionsAppTypeCounts
             
             $query = New-RscQueryO365 -AllSubscriptionsAppTypeCounts
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;O365SubscriptionAppTypeCounts&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BrowseTeamConvChannels operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: BrowseTeamConvChannels
             
             $query = New-RscQueryO365 -BrowseTeamConvChannels
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # REQUIRED
             $query.Var.snappableFid = $someString
             # OPTIONAL
             $query.Var.snapshotFidOpt = $someString
             # REQUIRED
             $query.Var.excludeArchived = $someBoolean
             # REQUIRED
             $query.Var.orgId = $someString
             # REQUIRED
             $query.Var.channelMembershipTypeFilter = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             # OPTIONAL
             $query.Var.nameFilter = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365TeamConvChannelConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Calendar operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: Calendar
             
             $query = New-RscQueryO365 -Calendar
             
             # REQUIRED
             $query.Var.snappableFid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365Calendar
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Groups operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: Groups
             
             $query = New-RscQueryO365 -Groups
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             # REQUIRED
             $query.Var.o365OrgId = $someString
             # REQUIRED
             $query.Var.snappableType = $someSnappableType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnappableType]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365GroupConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the License operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: License
             
             $query = New-RscQueryO365 -License
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365License
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ListApps operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: ListApps
             
             $query = New-RscQueryO365 -ListApps
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # REQUIRED
             $query.Var.o365AppFilters = @(
             	@{
             		# OPTIONAL
             		field = $someAppFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AppFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             }
             )
             # OPTIONAL
             $query.Var.o365AppSortByParam = @{
             	# OPTIONAL
             	field = $someAppSortByParamField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AppSortByParamField]) for enum values.
             	# OPTIONAL
             	sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365AppConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Mailbox operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: Mailbox
             
             $query = New-RscQueryO365 -Mailbox
             
             # REQUIRED
             $query.Var.snappableFid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365Mailbox
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Mailboxes operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: Mailboxes
             
             $query = New-RscQueryO365 -Mailboxes
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             # REQUIRED
             $query.Var.o365OrgId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365MailboxConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ObjectAncestors operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: ObjectAncestors
             
             $query = New-RscQueryO365 -ObjectAncestors
             
             # REQUIRED
             $query.Var.snappableFid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GetImplicitlyAuthorizedAncestorSummariesResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Onedrive operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: Onedrive
             
             $query = New-RscQueryO365 -Onedrive
             
             # REQUIRED
             $query.Var.snappableFid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365Onedrive
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Onedrives operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: Onedrives
             
             $query = New-RscQueryO365 -Onedrives
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             # REQUIRED
             $query.Var.o365OrgId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365OnedriveConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Org operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: Org
             
             $query = New-RscQueryO365 -Org
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365Org
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the OrgAtSnappableLevel operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: OrgAtSnappableLevel
             
             $query = New-RscQueryO365 -OrgAtSnappableLevel
             
             # REQUIRED
             $query.Var.fid = $someString
             # REQUIRED
             $query.Var.snappableType = $someSnappableType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnappableType]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365Org
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the OrgSummaries operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: OrgSummaries
             
             $query = New-RscQueryO365 -OrgSummaries
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GetImplicitlyAuthorizedObjectSummariesResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Orgs operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: Orgs
             
             $query = New-RscQueryO365 -Orgs
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             # OPTIONAL
             $query.Var.workloadHierarchy = $someWorkloadLevelHierarchy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.WorkloadLevelHierarchy]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365OrgConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ServiceAccount operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: ServiceAccount
             
             $query = New-RscQueryO365 -ServiceAccount
             
             # REQUIRED
             $query.Var.orgId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365ServiceAccountStatusResp
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ServiceStatus operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: ServiceStatus
             
             $query = New-RscQueryO365 -ServiceStatus
             
             # OPTIONAL
             $query.Var.orgID = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GetO365ServiceStatusResp
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SharepointDrive operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: SharepointDrive
             
             $query = New-RscQueryO365 -SharepointDrive
             
             # REQUIRED
             $query.Var.snappableFid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365SharepointDrive
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SharepointDrives operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: SharepointDrives
             
             $query = New-RscQueryO365 -SharepointDrives
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             # REQUIRED
             $query.Var.o365OrgId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365SharepointDriveConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SharepointList operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: SharepointList
             
             $query = New-RscQueryO365 -SharepointList
             
             # REQUIRED
             $query.Var.snappableFid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365SharepointList
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SharepointLists operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: SharepointLists
             
             $query = New-RscQueryO365 -SharepointLists
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             # REQUIRED
             $query.Var.o365OrgId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365SharepointListConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SharepointObjectList operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: SharepointObjectList
             
             $query = New-RscQueryO365 -SharepointObjectList
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             # OPTIONAL
             $query.Var.objectTypeFilter = @(
             	$someString
             )
             # REQUIRED
             $query.Var.includeEntireHierarchy = $someBoolean
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365SharepointObjectConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SharepointObjects operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: SharepointObjects
             
             $query = New-RscQueryO365 -SharepointObjects
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365SharepointObjectConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SharepointSite operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: SharepointSite
             
             $query = New-RscQueryO365 -SharepointSite
             
             # REQUIRED
             $query.Var.siteFid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365Site
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SharepointSites operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: SharepointSites
             
             $query = New-RscQueryO365 -SharepointSites
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             # REQUIRED
             $query.Var.o365OrgId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365SiteConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Site operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: Site
             
             $query = New-RscQueryO365 -Site
             
             # REQUIRED
             $query.Var.snappableFid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365Site
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Sites operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: Sites
             
             $query = New-RscQueryO365 -Sites
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             # REQUIRED
             $query.Var.o365OrgId = $someString
             # OPTIONAL
             $query.Var.excludeChildSites = $someBoolean
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365SiteConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StorageStats operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: StorageStats
             
             $query = New-RscQueryO365 -StorageStats
             
             # OPTIONAL
             $query.Var.orgID = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GetO365StorageStatsResp
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Team operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: Team
             
             $query = New-RscQueryO365 -Team
             
             # REQUIRED
             $query.Var.snappableFid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365Teams
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TeamChannels operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: TeamChannels
             
             $query = New-RscQueryO365 -TeamChannels
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # REQUIRED
             $query.Var.snappableFid = $someString
             # REQUIRED
             $query.Var.excludeArchived = $someBoolean
             # REQUIRED
             $query.Var.channelMembershipTypeFilter = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             # OPTIONAL
             $query.Var.nameFilter = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365TeamsChannelConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TeamConversationsFolderID operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: TeamConversationsFolderID
             
             $query = New-RscQueryO365 -TeamConversationsFolderID
             
             # REQUIRED
             $query.Var.snappableFid = $someString
             # REQUIRED
             $query.Var.snapshotFid = $someString
             # REQUIRED
             $query.Var.o365OrgId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TeamPostedBy operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: TeamPostedBy
             
             $query = New-RscQueryO365 -TeamPostedBy
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # REQUIRED
             $query.Var.snappableFid = $someString
             # REQUIRED
             $query.Var.o365OrgId = $someString
             # OPTIONAL
             $query.Var.nameFilter = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365TeamConversationsSenderConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Teams operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: Teams
             
             $query = New-RscQueryO365 -Teams
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             # REQUIRED
             $query.Var.o365OrgId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365TeamsConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the User operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: User
             
             $query = New-RscQueryO365 -User
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365User
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UserObjects operation
             of the 'O365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: UserObjects
             
             $query = New-RscQueryO365 -UserObjects
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365UserDescendantMetadataConnection
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryOracle">
             <summary>
             Create a new RscQuery object for any of the 16
             operations in the 'Oracle' API domain:
             AcoExampleDownloadLink, AcoParameters, DataGuardGroup, Database, DatabaseLogBackupConfig, Databases, Host, HostLogBackupConfig, LiveMounts, MissedRecoverableRanges, MissedSnapshots, PdbDetails, Rac, RacLogBackupConfig, RecoverableRanges, or TopLevelDescendants.
             </summary>
             <description>
             New-RscQueryOracle creates a new
             query object for operations
             in the 'Oracle' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 16 operations
             in the 'Oracle' API domain. Select the operation this
             query is for by specifying the appropriate switch parameter;
             one of: -AcoExampleDownloadLink, -AcoParameters, -DataGuardGroup, -Database, -DatabaseLogBackupConfig, -Databases, -Host, -HostLogBackupConfig, -LiveMounts, -MissedRecoverableRanges, -MissedSnapshots, -PdbDetails, -Rac, -RacLogBackupConfig, -RecoverableRanges, -TopLevelDescendants.
             Alternatively, you can specify the operation by setting the
             -Op parameter, for example: -Op AcoExampleDownloadLink,
             which is equivalent to specifying -AcoExampleDownloadLink.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryOracle -AcoExampleDownloadLink).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryOracle -AcoExampleDownloadLink).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AcoExampleDownloadLink operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: AcoExampleDownloadLink
             
             $query = New-RscQueryOracle -AcoExampleDownloadLink
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	dbId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: OracleFileDownloadLink
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AcoParameters operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: AcoParameters
             
             $query = New-RscQueryOracle -AcoParameters
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	dbId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: OracleAcoParameterList
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DataGuardGroup operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: DataGuardGroup
             
             $query = New-RscQueryOracle -DataGuardGroup
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: OracleDataGuardGroup
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Database operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: Database
             
             $query = New-RscQueryOracle -Database
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: OracleDatabase
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DatabaseLogBackupConfig operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: DatabaseLogBackupConfig
             
             $query = New-RscQueryOracle -DatabaseLogBackupConfig
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: OracleLogBackupConfig
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Databases operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: Databases
             
             $query = New-RscQueryOracle -Databases
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: OracleDatabaseConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Host operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: Host
             
             $query = New-RscQueryOracle -Host
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: OracleHost
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the HostLogBackupConfig operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: HostLogBackupConfig
             
             $query = New-RscQueryOracle -HostLogBackupConfig
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: OracleLogBackupConfig
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the LiveMounts operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: LiveMounts
             
             $query = New-RscQueryOracle -LiveMounts
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.filters = @(
             	@{
             		# OPTIONAL
             		field = $someOracleLiveMountFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.OracleLiveMountFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             }
             )
             # OPTIONAL
             $query.Var.sortBy = @{
             	# OPTIONAL
             	field = $someOracleLiveMountSortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.OracleLiveMountSortByField]) for enum values.
             	# OPTIONAL
             	sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: OracleLiveMountConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the MissedRecoverableRanges operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: MissedRecoverableRanges
             
             $query = New-RscQueryOracle -MissedRecoverableRanges
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	afterTime = $someDateTime
             	# OPTIONAL
             	beforeTime = $someDateTime
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: OracleMissedRecoverableRangeListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the MissedSnapshots operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: MissedSnapshots
             
             $query = New-RscQueryOracle -MissedSnapshots
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	afterTime = $someDateTime
             	# OPTIONAL
             	beforeTime = $someDateTime
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MissedSnapshotListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PdbDetails operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: PdbDetails
             
             $query = New-RscQueryOracle -PdbDetails
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	pdbDetailsRequest = @{
             		# REQUIRED
             		recoveryPoint = @{
             			# OPTIONAL
             			snapshotId = $someString
             			# OPTIONAL
             			timestampMs = $someInt64
             		}
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: OraclePdbDetails
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Rac operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: Rac
             
             $query = New-RscQueryOracle -Rac
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: OracleRac
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RacLogBackupConfig operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: RacLogBackupConfig
             
             $query = New-RscQueryOracle -RacLogBackupConfig
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: OracleLogBackupConfig
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RecoverableRanges operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: RecoverableRanges
             
             $query = New-RscQueryOracle -RecoverableRanges
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	afterTime = $someDateTime
             	# OPTIONAL
             	beforeTime = $someDateTime
             	# OPTIONAL
             	shouldIncludeDbSnapshotSummaries = $someBoolean
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: OracleRecoverableRangeListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TopLevelDescendants operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: TopLevelDescendants
             
             $query = New-RscQueryOracle -TopLevelDescendants
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.typeFilter = @(
             	$someHierarchyObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyObjectTypeEnum]) for enum values.
             )
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: OracleTopLevelDescendantTypeConnection
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQuerySla">
             <summary>
             Create a new RscQuery object for any of the 11
             operations in the 'SLA' API domain:
             AllNcdComplianceData, AllSummariesByIds, AuditDetail, ConflictObjects, CountOfObjectsProtected, Domain, Domains, GlobalFilterList, GlobalStatuses, ManagedVolume, or ManagedVolumes.
             </summary>
             <description>
             New-RscQuerySla creates a new
             query object for operations
             in the 'SLA' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 11 operations
             in the 'SLA' API domain. Select the operation this
             query is for by specifying the appropriate switch parameter;
             one of: -AllNcdComplianceData, -AllSummariesByIds, -AuditDetail, -ConflictObjects, -CountOfObjectsProtected, -Domain, -Domains, -GlobalFilterList, -GlobalStatuses, -ManagedVolume, -ManagedVolumes.
             Alternatively, you can specify the operation by setting the
             -Op parameter, for example: -Op AllNcdComplianceData,
             which is equivalent to specifying -AllNcdComplianceData.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQuerySla -AllNcdComplianceData).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQuerySla -AllNcdComplianceData).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AllNcdComplianceData operation
             of the 'SLA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    SLA
             # API Operation: AllNcdComplianceData
             
             $query = New-RscQuerySla -AllNcdComplianceData
             
             # REQUIRED
             $query.Var.clusters = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;NcdSlaComplianceData&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllSummariesByIds operation
             of the 'SLA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    SLA
             # API Operation: AllSummariesByIds
             
             $query = New-RscQuerySla -AllSummariesByIds
             
             # REQUIRED
             $query.Var.slaIds = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;SlaDomain&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AuditDetail operation
             of the 'SLA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    SLA
             # API Operation: AuditDetail
             
             $query = New-RscQuerySla -AuditDetail
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # REQUIRED
             $query.Var.SlaId = $someString
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someSLAAuditDetailFilterFieldEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SLAAuditDetailFilterFieldEnum]) for enum values.
             		# OPTIONAL
             		text = $someString
             }
             )
             # OPTIONAL
             $query.Var.timezone = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;SlaAuditDetail&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ConflictObjects operation
             of the 'SLA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    SLA
             # API Operation: ConflictObjects
             
             $query = New-RscQuerySla -ConflictObjects
             
             # REQUIRED
             $query.Var.fids = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;HierarchyObject&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CountOfObjectsProtected operation
             of the 'SLA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    SLA
             # API Operation: CountOfObjectsProtected
             
             $query = New-RscQuerySla -CountOfObjectsProtected
             
             # OPTIONAL
             $query.Var.rootOptionalFid = $someString
             # REQUIRED
             $query.Var.slaIds = @(
             	$someString
             )
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             # OPTIONAL
             $query.Var.typeFilter = @(
             	$someHierarchyObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyObjectTypeEnum]) for enum values.
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CountOfObjectsProtectedBySlAsResult
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Domain operation
             of the 'SLA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    SLA
             # API Operation: Domain
             
             $query = New-RscQuerySla -Domain
             
             # REQUIRED
             $query.Var.id = $someString
             # OPTIONAL
             $query.Var.shouldShowSyncStatus = $someBoolean
             # OPTIONAL
             $query.Var.shouldShowUpgradeInfo = $someBoolean
             # OPTIONAL
             $query.Var.shouldShowPausedClusters = $someBoolean
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SlaDomain
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Domains operation
             of the 'SLA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    SLA
             # API Operation: Domains
             
             $query = New-RscQuerySla -Domains
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortBy = $someSlaQuerySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SlaQuerySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someGlobalSlaQueryFilterInputField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.GlobalSlaQueryFilterInputField]) for enum values.
             		# OPTIONAL
             		text = $someString
             		# OPTIONAL
             		objectTypeList = @(
             			$someSlaObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SlaObjectType]) for enum values.
             		)
             		# OPTIONAL
             		textList = @(
             			$someString
             		)
             }
             )
             # OPTIONAL
             $query.Var.contextFilter = $someContextFilterTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ContextFilterTypeEnum]) for enum values.
             # OPTIONAL
             $query.Var.contextFilterInput = @(
             	@{
             		# REQUIRED
             		field = $someString
             		# REQUIRED
             		text = $someString
             }
             )
             # OPTIONAL
             $query.Var.shouldShowSyncStatus = $someBoolean
             # OPTIONAL
             $query.Var.shouldShowProtectedObjectCount = $someBoolean
             # OPTIONAL
             $query.Var.shouldShowUpgradeInfo = $someBoolean
             # OPTIONAL
             $query.Var.showRemoteSlas = $someBoolean
             # OPTIONAL
             $query.Var.shouldShowPausedClusters = $someBoolean
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SlaDomainConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GlobalFilterList operation
             of the 'SLA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    SLA
             # API Operation: GlobalFilterList
             
             $query = New-RscQuerySla -GlobalFilterList
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortBy = $someSlaQuerySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SlaQuerySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someGlobalSlaQueryFilterInputField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.GlobalSlaQueryFilterInputField]) for enum values.
             		# OPTIONAL
             		text = $someString
             		# OPTIONAL
             		objectTypeList = @(
             			$someSlaObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SlaObjectType]) for enum values.
             		)
             		# OPTIONAL
             		textList = @(
             			$someString
             		)
             }
             )
             # OPTIONAL
             $query.Var.contextFilter = $someContextFilterTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ContextFilterTypeEnum]) for enum values.
             # OPTIONAL
             $query.Var.contextFilterInput = @(
             	@{
             		# REQUIRED
             		field = $someString
             		# REQUIRED
             		text = $someString
             }
             )
             # OPTIONAL
             $query.Var.shouldShowSyncStatus = $someBoolean
             # OPTIONAL
             $query.Var.shouldShowProtectedObjectCount = $someBoolean
             # OPTIONAL
             $query.Var.shouldShowUpgradeInfo = $someBoolean
             # OPTIONAL
             $query.Var.showRemoteSlas = $someBoolean
             # OPTIONAL
             $query.Var.shouldShowPausedClusters = $someBoolean
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GlobalSlaForFilterConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GlobalStatuses operation
             of the 'SLA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    SLA
             # API Operation: GlobalStatuses
             
             $query = New-RscQuerySla -GlobalStatuses
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someSlaStatusFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SlaStatusFilterField]) for enum values.
             		# OPTIONAL
             		text = $someString
             }
             )
             # REQUIRED
             $query.Var.SlaId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GlobalSlaStatusConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ManagedVolume operation
             of the 'SLA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    SLA
             # API Operation: ManagedVolume
             
             $query = New-RscQuerySla -ManagedVolume
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ManagedVolume
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ManagedVolumes operation
             of the 'SLA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    SLA
             # API Operation: ManagedVolumes
             
             $query = New-RscQuerySla -ManagedVolumes
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ManagedVolumeConnection
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryVcenter">
             <summary>
             Create a new RscQuery object for any of the 9
             operations in the 'vSphere vCenter' API domain:
             AdvancedTagPreview, HotAddBandwidth, HotAddNetwork, HotAddProxy, List, Networks, NumProxiesNeeded, PreAddInfo, or Vcenter.
             </summary>
             <description>
             New-RscQueryVcenter creates a new
             query object for operations
             in the 'vSphere vCenter' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 9 operations
             in the 'vSphere vCenter' API domain. Select the operation this
             query is for by specifying the appropriate switch parameter;
             one of: -AdvancedTagPreview, -HotAddBandwidth, -HotAddNetwork, -HotAddProxy, -List, -Networks, -NumProxiesNeeded, -PreAddInfo, -Vcenter.
             Alternatively, you can specify the operation by setting the
             -Op parameter, for example: -Op AdvancedTagPreview,
             which is equivalent to specifying -AdvancedTagPreview.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryVcenter -AdvancedTagPreview).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryVcenter -AdvancedTagPreview).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AdvancedTagPreview operation
             of the 'vSphere vCenter' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere vCenter
             # API Operation: AdvancedTagPreview
             
             $query = New-RscQueryVcenter -AdvancedTagPreview
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	limit = $someInt
             	# OPTIONAL
             	offset = $someInt
             	# REQUIRED
             	filterCondition = $someString
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VcenterAdvancedTagPreviewReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the HotAddBandwidth operation
             of the 'vSphere vCenter' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere vCenter
             # API Operation: HotAddBandwidth
             
             $query = New-RscQueryVcenter -HotAddBandwidth
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: HotAddBandwidthInfo
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the HotAddNetwork operation
             of the 'vSphere vCenter' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere vCenter
             # API Operation: HotAddNetwork
             
             $query = New-RscQueryVcenter -HotAddNetwork
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: HotAddNetworkConfigWithName
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the HotAddProxy operation
             of the 'vSphere vCenter' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere vCenter
             # API Operation: HotAddProxy
             
             $query = New-RscQueryVcenter -HotAddProxy
             
             # REQUIRED
             $query.Var.clusterUuids = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;VcenterHotAddProxyVmInfo&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the List operation
             of the 'vSphere vCenter' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere vCenter
             # API Operation: List
             
             $query = New-RscQueryVcenter -List
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereVcenterConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Networks operation
             of the 'vSphere vCenter' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere vCenter
             # API Operation: Networks
             
             $query = New-RscQueryVcenter -Networks
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NetworkInfoListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NumProxiesNeeded operation
             of the 'vSphere vCenter' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere vCenter
             # API Operation: NumProxiesNeeded
             
             $query = New-RscQueryVcenter -NumProxiesNeeded
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Int32
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PreAddInfo operation
             of the 'vSphere vCenter' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere vCenter
             # API Operation: PreAddInfo
             
             $query = New-RscQueryVcenter -PreAddInfo
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	vcenterConfig = @{
             		# OPTIONAL
             		connectionConfig = @{
             			# OPTIONAL
             			caCerts = $someString
             			# REQUIRED
             			hostname = $someString
             			# REQUIRED
             			password = $someString
             			# REQUIRED
             			username = $someString
             		}
             		# OPTIONAL
             		id = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VcenterPreAddInfo
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Vcenter operation
             of the 'vSphere vCenter' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere vCenter
             # API Operation: Vcenter
             
             $query = New-RscQueryVcenter -Vcenter
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereVcenter
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryVsphere">
             <summary>
             Create a new RscQuery object for any of the 23
             operations in the 'vSphere' API domain:
             ComputeCluster, ComputeClusters, Datacenter, Datastore, DatastoreCluster, DatastoreClusters, DatastoreList, Folder, Folders, Host, HostDetails, HostList, HostsByFids, LiveMounts, Mount, MountList, Network, ResourcePool, RootRecoveryHierarchy, Tag, TagCategory, TopLevelDescendantsList, or VmwareCdpLiveInfo.
             </summary>
             <description>
             New-RscQueryVsphere creates a new
             query object for operations
             in the 'vSphere' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 23 operations
             in the 'vSphere' API domain. Select the operation this
             query is for by specifying the appropriate switch parameter;
             one of: -ComputeCluster, -ComputeClusters, -Datacenter, -Datastore, -DatastoreCluster, -DatastoreClusters, -DatastoreList, -Folder, -Folders, -Host, -HostDetails, -HostList, -HostsByFids, -LiveMounts, -Mount, -MountList, -Network, -ResourcePool, -RootRecoveryHierarchy, -Tag, -TagCategory, -TopLevelDescendantsList, -VmwareCdpLiveInfo.
             Alternatively, you can specify the operation by setting the
             -Op parameter, for example: -Op ComputeCluster,
             which is equivalent to specifying -ComputeCluster.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryVsphere -ComputeCluster).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryVsphere -ComputeCluster).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the ComputeCluster operation
             of the 'vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere
             # API Operation: ComputeCluster
             
             $query = New-RscQueryVsphere -ComputeCluster
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereComputeCluster
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ComputeClusters operation
             of the 'vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere
             # API Operation: ComputeClusters
             
             $query = New-RscQueryVsphere -ComputeClusters
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereComputeClusterConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Datacenter operation
             of the 'vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere
             # API Operation: Datacenter
             
             $query = New-RscQueryVsphere -Datacenter
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereDatacenter
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Datastore operation
             of the 'vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere
             # API Operation: Datastore
             
             $query = New-RscQueryVsphere -Datastore
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereDatastore
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DatastoreCluster operation
             of the 'vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere
             # API Operation: DatastoreCluster
             
             $query = New-RscQueryVsphere -DatastoreCluster
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereDatastoreCluster
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DatastoreClusters operation
             of the 'vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere
             # API Operation: DatastoreClusters
             
             $query = New-RscQueryVsphere -DatastoreClusters
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereDatastoreClusterConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DatastoreList operation
             of the 'vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere
             # API Operation: DatastoreList
             
             $query = New-RscQueryVsphere -DatastoreList
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereDatastoreConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Folder operation
             of the 'vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere
             # API Operation: Folder
             
             $query = New-RscQueryVsphere -Folder
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereFolder
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Folders operation
             of the 'vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere
             # API Operation: Folders
             
             $query = New-RscQueryVsphere -Folders
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereFolderConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Host operation
             of the 'vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere
             # API Operation: Host
             
             $query = New-RscQueryVsphere -Host
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereHost
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the HostDetails operation
             of the 'vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere
             # API Operation: HostDetails
             
             $query = New-RscQueryVsphere -HostDetails
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VmwareHostDetail
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the HostList operation
             of the 'vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere
             # API Operation: HostList
             
             $query = New-RscQueryVsphere -HostList
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereHostConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the HostsByFids operation
             of the 'vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere
             # API Operation: HostsByFids
             
             $query = New-RscQueryVsphere -HostsByFids
             
             # REQUIRED
             $query.Var.fids = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;VsphereHost&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the LiveMounts operation
             of the 'vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere
             # API Operation: LiveMounts
             
             $query = New-RscQueryVsphere -LiveMounts
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someVsphereLiveMountFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.VsphereLiveMountFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             }
             )
             # OPTIONAL
             $query.Var.sortBy = @{
             	# OPTIONAL
             	field = $someVsphereLiveMountSortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.VsphereLiveMountSortByField]) for enum values.
             	# OPTIONAL
             	sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereLiveMountConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Mount operation
             of the 'vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere
             # API Operation: Mount
             
             $query = New-RscQueryVsphere -Mount
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereMount
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the MountList operation
             of the 'vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere
             # API Operation: MountList
             
             $query = New-RscQueryVsphere -MountList
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.filter = @{
             	# OPTIONAL
             	name = $someString
             	# OPTIONAL
             	clusterUuid = @(
             		$someString
             	)
             	# OPTIONAL
             	powerStatus = @(
             		$someBoolean
             	)
             	# OPTIONAL
             	sourceVmId = $someString
             }
             # OPTIONAL
             $query.Var.sortBy = $someVsphereMountSortBy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.VsphereMountSortBy]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereMountConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Network operation
             of the 'vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere
             # API Operation: Network
             
             $query = New-RscQueryVsphere -Network
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereNetwork
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ResourcePool operation
             of the 'vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere
             # API Operation: ResourcePool
             
             $query = New-RscQueryVsphere -ResourcePool
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereResourcePool
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RootRecoveryHierarchy operation
             of the 'vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere
             # API Operation: RootRecoveryHierarchy
             
             $query = New-RscQueryVsphere -RootRecoveryHierarchy
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CdmHierarchyObjectConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Tag operation
             of the 'vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere
             # API Operation: Tag
             
             $query = New-RscQueryVsphere -Tag
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereTag
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TagCategory operation
             of the 'vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere
             # API Operation: TagCategory
             
             $query = New-RscQueryVsphere -TagCategory
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereTagCategory
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TopLevelDescendantsList operation
             of the 'vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere
             # API Operation: TopLevelDescendantsList
             
             $query = New-RscQueryVsphere -TopLevelDescendantsList
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.typeFilter = @(
             	$someHierarchyObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyObjectTypeEnum]) for enum values.
             )
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CdmHierarchyObjectConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the VmwareCdpLiveInfo operation
             of the 'vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere
             # API Operation: VmwareCdpLiveInfo
             
             $query = New-RscQueryVsphere -VmwareCdpLiveInfo
             
             # REQUIRED
             $query.Var.ids = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchVmwareCdpLiveInfo
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryVsphereVm">
             <summary>
             Create a new RscQuery object for any of the 6
             operations in the 'vSphere VM' API domain:
             AsyncRequestStatus, MissedRecoverableRange, New, NewList, RecoverableRange, or RecoverableRangeInBatch.
             </summary>
             <description>
             New-RscQueryVsphereVm creates a new
             query object for operations
             in the 'vSphere VM' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 6 operations
             in the 'vSphere VM' API domain. Select the operation this
             query is for by specifying the appropriate switch parameter;
             one of: -AsyncRequestStatus, -MissedRecoverableRange, -New, -NewList, -RecoverableRange, -RecoverableRangeInBatch.
             Alternatively, you can specify the operation by setting the
             -Op parameter, for example: -Op AsyncRequestStatus,
             which is equivalent to specifying -AsyncRequestStatus.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryVsphereVm -AsyncRequestStatus).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryVsphereVm -AsyncRequestStatus).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AsyncRequestStatus operation
             of the 'vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere VM
             # API Operation: AsyncRequestStatus
             
             $query = New-RscQueryVsphereVm -AsyncRequestStatus
             
             # REQUIRED
             $query.Var.clusterUuid = $someString
             # REQUIRED
             $query.Var.id = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the MissedRecoverableRange operation
             of the 'vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere VM
             # API Operation: MissedRecoverableRange
             
             $query = New-RscQueryVsphereVm -MissedRecoverableRange
             
             # REQUIRED
             $query.Var.snappableFid = $someString
             # OPTIONAL
             $query.Var.beforeTime = $someDateTime
             # OPTIONAL
             $query.Var.afterTime = $someDateTime
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RecoverableRangeResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the New operation
             of the 'vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere VM
             # API Operation: New
             
             $query = New-RscQueryVsphereVm -New
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereVm
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NewList operation
             of the 'vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere VM
             # API Operation: NewList
             
             $query = New-RscQueryVsphereVm -NewList
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereVmConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RecoverableRange operation
             of the 'vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere VM
             # API Operation: RecoverableRange
             
             $query = New-RscQueryVsphereVm -RecoverableRange
             
             # REQUIRED
             $query.Var.snappableFid = $someString
             # OPTIONAL
             $query.Var.beforeTime = $someDateTime
             # OPTIONAL
             $query.Var.afterTime = $someDateTime
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RecoverableRangeResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RecoverableRangeInBatch operation
             of the 'vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    vSphere VM
             # API Operation: RecoverableRangeInBatch
             
             $query = New-RscQueryVsphereVm -RecoverableRangeInBatch
             
             # REQUIRED
             $query.Var.requestInfo = @{
             	# OPTIONAL
             	afterTime = $someDateTime
             	# OPTIONAL
             	beforeTime = $someDateTime
             	# REQUIRED
             	vmIds = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchVmwareVmRecoverableRanges
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Private.RscBasePSCmdlet">
            <summary>
            Base class for all RSC PowerShell cmdlets.
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.PowerShell.Private.RscBasePSCmdlet.#ctor(System.Boolean)">
            <summary>
            Create a new RSC PowerShell cmdlet with logging and a client.
            Client is left null until RetrieveConnection() is called
            from the derived class, or if the cmdlet is constructed
            with retrieveConnection=true.
            
            Note that `retrieveConnection=true` retrieves an existing
            connection if any ; if there are none, it does not 
            create a new connection.
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.PowerShell.Private.RscBasePSCmdlet.GetProfileDir">
            <summary>
            Get the RSC SDK's user profile directory.
            Typically "$(Split-Path $PROFILE -Parent)/rubrik-powershell-sdk"
            But resolves to the current directory if $PROFILE is not defined.
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.PowerShell.Private.RscBasePSCmdlet.GetValueFromParameterSet(System.String)">
            <summary>
            If a cmdlet parameter exists with given name, within the current parameter set, return its value.
            </summary>
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Private.RscGqlPSCmdletConfig">
            <summary>
            Configuration for RscGqlPSCmdlet
            
            HasPatchingDynamicParam:
            If true, add patching dynamic parameter to the cmdlet
            (-AddField and -RemoveField)
            
            SendQueryOnExitIfAny:
            If true, send the query to the server when the cmdlet exits.
            If false, return the query object instead (if any).
            </summary>
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Private.RscGqlPSCmdlet">
            <summary>
            Base class for all RSC PowerShell cmdlets that use a GraphQL query.
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.PowerShell.Private.RscGqlPSCmdlet.#ctor(RubrikSecurityCloud.PowerShell.Private.RscGqlPSCmdletConfig)">
            <summary>
            Create a new RSC PowerShell cmdlet.
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.PowerShell.Private.RscGqlPSCmdlet.Initialize(System.Tuple{System.String,System.String}[],System.String,System.String,System.String,System.String,RubrikSecurityCloud.QueryDocMethod,RubrikSecurityCloud.QueryFieldSpecMethod,System.String)">
            <summary>
            Initialize the query object.
            Initialize() is called by the cmdlet's ProcessRecord() method.
            </summary>
            <param name="opArgDefs">
            Operation argument definitions. e.g. { Tuple.Create("first",
            "Int"), Tuple.Create("sortOrder", "SortOrder") }
            </param>
            <param name="opKind">"query" or "mutation"</param>
            <param name="opName">e.g. "QueryClusterConnection"</param>
            <param name="opArgs">
            e.g. "($first: Int ,$sortOrder: SortOrder)"</param>
            <param name="opReturnType">e.g. "ClusterConnection"</param>
            <param name="queryDocMethod">
            Method that returns the query document as a string.
            It does not explore. It takes a field object as input,
            and returns the query document as a string.
            "query document": the text of the operation: 
            the operation name, the operation arguments,
            and the fields to select for retrieval. For example in
            the final query, it's all the text inside
            query QueryClusterConnection($first: Int ...) {
                    -- query document --
            }
            So it's: the query name, the query arguments, and 
            the field spec.
            </param>
            <param name="queryFieldSpecMethod">
            Method that builds the field object for this query
            using exploration. It takes for input an exploration context,
            and returns the field object.
            </param>
            <param name="varUsageExample">
            Example text of how to initialize the variables
            </param>
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Private.RscSessionInfo">
            <summary>
            Used to return information on the user session and SDK/Server
            versions in use.
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.PowerShell.Private.RscSessionInfo.#ctor(RubrikSecurityCloud.NetSDK.Client.RscGraphQLClient,RubrikSecurityCloud.IRscLogger)">
            <summary>
            Constructor
            </summary>
            <param name="rscClient">Instance of RscGraphQLClient</param>
            <param name="logger">Instance of type implementing IRscLogger</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:RubrikSecurityCloud.PowerShell.Private.RscSessionInfo.GetRscPsVersion">
            <summary>
            Returns an instance of RscPsVersionTable containing the
            server deployment version and the SDK schema version.
            </summary>
            <returns>Instance of RscPsVersionTable</returns>
        </member>
        <member name="M:RubrikSecurityCloud.PowerShell.Private.RscSessionInfo.GetSessionInfo">
            <summary>
            Returns an instance of RscPsSession info containing the
            client information, authentication state and version info.
            </summary>
            <returns>Instance of RscPsSessionInfo</returns>
        </member>
        <member name="M:RubrikSecurityCloud.PowerShell.Private.RscTypeInitializer.GetAllTypeNames(System.String,System.Boolean)">
            <summary>
            Get a list of all RSC schema types whose names contain a given string.
            </summary>
            <param name="nameFilter">string to match, case insensitive</param>
            <param name="interfaces">if true, return interfaces; if false return classes</param>
        </member>
        <member name="M:RubrikSecurityCloud.PowerShell.Private.RscTypeInitializer.GetTypeByName(System.String)">
            <summary>
            Get an RSC schema type by name.
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.PowerShell.Private.RscTypeInitializer.InitializeInputWithSelectedFields(System.String,System.Collections.Hashtable)">
            <summary>
            Return an instance of an input, with fields contained in
            inputFields initialized to non-null values.
            </summary>
            <param name="inputTypeName"></param>
            <param name="providedInputFields"></param>
            <returns>object</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:RubrikSecurityCloud.PowerShell.Private.RscTypeInitializer.InitializeTypeWithSelectedProperties(System.String,System.String[])">
            <summary>
            Return an instance of an class, with properties listed in
            requestedProperties initialized to non-null values.
            </summary>
            <param name="objectClassName"></param>
            <param name="requestedProperties"></param>
            <returns>object</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
              This class was generated by MSBuild using the GenerateResource task.
              To add or remove a member, edit your .resx file then rerun MSBuild.
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.JsonUtils.JsonReady(System.Object)">
            <summary>
            Convert an object so that it can be serialized to JSON.
            - Handles basic types (string, int, etc.) by returning them as-is.
            - Unwrap PowerShell PSObjects.
            - RSC types pass through.
            - Hashtables and Enumerable types are recursively processed.
            - Defaults to ToString() on unrecognized types.
            </summary>
        </member>
        <member name="T:RubrikSecurityCloud.RscGqlOperation">
            <summary>
             A GraphQL Operation.
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.RscGqlOperation.Kind">
            <summary>
            The kind of operation: "query" or "mutation".
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.RscGqlOperation.Name">
            <summary>
            The name of the operation.
            By convention, the name of the operation is the capitalized version of the name of the root field. e.g. :
            - root field: "clusterConnection",
            - operation name: "ClusterConnection"
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.RscGqlOperation.Args">
            <summary>
            The arguments of the operation. e.g. : "(id: $id)"
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.RscGqlOperation.ReturnType">
            <summary>
            The return type of the operation, which can either be
            a simple type (int, string, etc.) or a RubrikSecurityCloud.Schema
            type (e.g. "ClusterConnection", "Cluster", etc.)
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.RscGqlOperation.FieldSpec">
            <summary>
            The field spec of the operation. e.g. : "id name"
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.RscGqlOperation.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Create a new RscGqlOperation object.
            
            The RscGqlOperation is a collection of string properties
            that are assembled by the Query() method to produce
            the exact, final GraphQL query that is sent to the API server.
            </summary>
            <param name="kind">The kind of operation (query, mutation, subscription).</param>
            <param name="name">The name of the operation.</param>
            <param name="args">The arguments of the operation.</param>
            <param name="returnType">The return type of the operation.</param>
            <param name="fieldSpec">The field spec of the operation.</param>
            <returns>A new RscGqlOperation object.</returns>
        </member>
        <member name="M:RubrikSecurityCloud.RscGqlOperation.Query">
            <summary>
            Return the query for the API server.
            </summary>
        </member>
        <member name="T:RubrikSecurityCloud.RscGqlVars">
            <summary>
            Variables to be used in a GraphQL query.
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.RscGqlVars.#ctor">
            <summary>
            Create a new RscGqlVars object.
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.RscGqlVars.#ctor(System.Object,System.Tuple{System.String,System.String}[],RubrikSecurityCloud.GetOverrideValueForVarDelegate,System.Boolean,System.String)">
            <summary>
            Create a new RscGqlVars object.
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.RscGqlVars.Set(System.Object,System.Tuple{System.String,System.String}[],RubrikSecurityCloud.GetOverrideValueForVarDelegate,System.Boolean,System.String)">
            <summary>
            Set variables from various input types.
            </summary>
            <param name="obj">
            - If varDefs shows only 1 variable, and obj is not a hashtable,
              then obj is assumed to be the value of that variable.
            - If obj is a string, it is assumed to be a
              comma-separated list of key-value pairs.
            - Otherwise obj must be a hashtable
              (obj=null is treated as an empty hashtable).
            Values are converted to JSON-serializable types
            (RSC types are passed through as-is).
            </param>
            <param name="varDefs">
            Variable definitions modify the variables in 3 ways:
            - look up overrides from the cmdlet's parameters
            - throw on missing required variables
            - for basic types, convert the value to the correct type
            </param>
            <param name="getOverrideValueForVar">
            Used to look up overrides from the cmdlet's parameters.
            </param>
            <param name="ignoreRequired">
            if false, throw on missing required variables.
            </param>
            <param name="example">
            An example of how the variables can be initialized.
            </param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:RubrikSecurityCloud.RscGqlVars.Info">
            <summary>
            Return info about the variables:
            - name
            - type
            - link to online documentation
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.RscGqlVars.Example">
            <summary>
            Return an example of how the variables can be initialized.
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.RscGqlVars.conformToVarDefs(RubrikSecurityCloud.GetOverrideValueForVarDelegate,System.Boolean)">
            <summary>
            Variable definitions modify the variables in 3 ways:
            - look up overrides from the cmdlet's parameters
            - throw on missing required variables
            - for basic types, convert the value to the correct type
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.RscGqlVars.Finalize">
            <summary>
            Finalize the variables for sending to the server:
            - perform basic conversions to match var definitions
              (e.g.: a value of "3" is converted to 3
                     where the var def says int)
            - check for missing required variables
            - make sure all variables are JSON-serializable.
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.RscGqlVars.ToString">
            <summary>
            String representation of the variables.
            </summary>
        </member>
        <member name="F:RubrikSecurityCloud.RscQuery.queryDocMethod">
            <summary>
            Method that returns the query document as a string.
            It does not explore. It takes a field object as input,
            and returns the query document as a string.
            "query document": the text of the operation: 
            the operation name, the operation arguments,
            and the fields to select for retrieval. For example in
            the final query, it's all the text inside
            query QueryClusterConnection($first: Int ...) {
                    -- query document --
            }
            So it's: the query name, the query arguments, and 
            the field spec.
            </summary>
        </member>
        <member name="F:RubrikSecurityCloud.RscQuery.queryFieldSpecMethod">
            <summary>
            Method that builds the field object for this query
            using exploration. It takes for input an exploration context,
            and returns the field object.
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.RscQuery.#ctor(System.String,RubrikSecurityCloud.RscGqlVars,System.Object,RubrikSecurityCloud.RscGqlOperation)">
            <summary>
            Create a new RscQuery object.
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.RscQuery.Invoke">
            <summary>
            Invoke the GraphQL query (send it to the API server)
            and return the result as a PowerShell object of
            the appropriate schema type.
            </summary>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:RubrikSecurityCloud.RscQuery.GqlOperation">
            <summary>
            The name of the underlying GQL operation.
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.RscQuery.FlattenField">
            <summary>
            Return the flattened list of fields in the Field object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RubrikSecurityCloud.RscQuery.Info">
            <summary>
            Return documentation links for variables and Field object.
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.RscQuery.VarTemplate">
            <summary>
            Return an example of how the variables can be initialized.
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.RscQuery.GqlRequest(System.Boolean)">
            <summary>
            Build the GraphQL request
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.RscQuery.ToString">
            <summary>
             String representation of this object.
            </summary>
        </member>
    </members>
</doc>
